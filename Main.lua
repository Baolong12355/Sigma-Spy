--[[
	⣿⣿⣿⣿⣿ SIGMA SPY ⣿⣿⣿⣿⣿
	⣿⣿⣯⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉
	⠉⠻⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠈⠻⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠀⠀⣉⣿⣿⣿⠆⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⣠⣾⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⢀⣴⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣀⣴⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣿⣿⣟⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
	⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

	@author depso (depthso)
	@repo https://github.com/depthso
	@license MIT
	@description Sigma Remote Spy for Roblox
    
	This file is COMPILED, check /src folder for the source
	Build scripts are available in /build
]]

local a,b={UseWorkspace=false,NoActors=false,FolderName='Sigma Spy',RepoUrl=
[[https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main]],
ParserUrl=
[[https://raw.githubusercontent.com/depthso/Roblox-parser/refs/heads/main/dist/Main.luau]]
},{...}local c=b[1]if typeof(c)=='table'then for d,e in c do a[d]=e end end
local d=setmetatable({},{__index=function(d,e)local f=game:GetService(e)return
cloneref(f)end})local e=(function()local e,f={UseWorkspace=false,Folder=
'Sigma spy',RepoUrl=nil,FolderStructure={['Sigma Spy']={'assets'}}}function e:
Init(g)local h,i=self.FolderStructure,g.Services f=i.HttpService self:
CheckFolders(h)end function e:PushConfig(g)for h,i in next,g do self[h]=i end
end function e:UrlFetch(g)local h={Url=g:gsub(' ','%%20'),Method='GET'}local i,j
=pcall(request,h)if not i then warn'[!] HTTP request error! Check console (F9)'
warn('> Url:',g)error(j)return''end local k,l=j.Body,j.StatusCode if l==404 then
warn'[!] The file requested has moved or been deleted.'warn(' >',g)return''end
return k,j end function e:MakePath(g)local h=self.Folder return`{h}/{g}`end
function e:LoadCustomasset(g)if not getcustomasset then return end if not g then
return end local h=readfile(g)if#h<=0 then return end local i,j=pcall(
getcustomasset,g)if not i then return end if not j or#j<=0 then return end
return j end function e:GetFile(g,h)local i,j,k,l=self.RepoUrl,self.UseWorkspace
,self:MakePath(g),''if j then l=readfile(k)else l=self:UrlFetch(`{i}/{g}`)end if
h then self:FileCheck(k,function()return l end)return self:LoadCustomasset(k)end
return l end function e:GetTemplate(g)return self:GetFile(`templates/{g}.lua`)
end function e:FileCheck(g,h)if isfile(g)then return end local i=h()writefile(g,
i)end function e:FolderCheck(g)if isfolder(g)then return end makefolder(g)end
function e:CheckPath(g,h)return g and`{g}/{h}`or h end function e:CheckFolders(g
,h)for i,j in next,g do if typeof(j)=='table'then local k=self:CheckPath(h,i)
self:FolderCheck(k)self:CheckFolders(j,k)continue end local k=self:CheckPath(h,j
)self:FolderCheck(k)end end function e:TemplateCheck(g,h)self:FileCheck(g,
function()return self:GetTemplate(h)end)end function e:GetAsset(g,h)return self:
GetFile(`assets/{g}`,h)end function e:GetModule(g,h)local i=`{g}.lua`if h then
self:TemplateCheck(i,h)return readfile(i)end return self:GetFile(i)end function
e:LoadLibraries(g,...)local h={}for i,j in next,g do local k=typeof(j)=='table'
and j[1]=='base64'j=k and j[2]or j if typeof(j)~='string'and not k then h[i]=j
continue end if k then j=crypt.base64decode(j)g[i]=j end local l,m=loadstring(j,
i)assert(l,`Failed to load {i}: {m}`)h[i]=l(...)end return h end function e:
LoadModules(g,h)for i,j in next,g do local k=j.Init if not k then continue end j
:Init(h)end end function e:CreateFont(g,h)if not h then return end local i=`assets/{
g}.json`local j,k=self:MakePath(i),{name=g,faces={{name='Regular',weight=400,
style='Normal',assetId=h}}}local l=f:JSONEncode(k)writefile(j,l)return j end
function e:CompileModule(g)local h='local Libraries = {'for i,j in g do if
typeof(j)~='string'then continue end h..=`\t{i} = (function()\n{j}\nend)(),\n`
end h..='}'return h end function e:MakeActorScript(g,h)local i=e:CompileModule(g
)i..='\r\n\tlocal ExtraData = {\r\n\t\tIsActor = true\r\n\t}\r\n\t'i..=`Libraries.Hook:BeginService(Libraries, ExtraData, {
h})`return i end return e end)()e:PushConfig(a)e:Init{Services=d}local f=e.
FolderName local g,h={Config=e:GetModule(`{f}/Config`,'Config'),ReturnSpoofs=e:
GetModule(`{f}/Return spoofs`,'Return Spoofs'),Configuration=a,Files=e,Process={
'base64',
[[]]
},Hook={'base64',
[[]]
},Flags={'base64',
[[dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkNCnR5cGUgRmxhZyA9IHsNCiAgICBWYWx1ZTogRmxhZ1ZhbHVlLA0KICAgIExhYmVsOiBzdHJpbmcsDQogICAgQ2F0ZWdvcnk6IHN0cmluZw0KfQ0KdHlwZSBGbGFncyA9IHsNCiAgICBbc3RyaW5nXTogRmxhZw0KfQ0KdHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCmxvY2FsIE1vZHVsZSA9IHsNCiAgICBGbGFncyA9IHsNCiAgICAgICAgUHJldmVudFJlbmFtaW5nID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIHJlbmFtaW5nIiwNCiAgICAgICAgfSwNCiAgICAgICAgUHJldmVudFBhcmVudGluZyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJObyBwYXJlbnRpbmciLA0KICAgICAgICB9LA0KICAgICAgICBTZWxlY3ROZXdlc3QgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiQXV0byBzZWxlY3QgbmV3ZXN0IiwNCiAgICAgICAgfSwNCiAgICAgICAgRGVjb21waWxlUG9wb3V0ID0geyAtLSBMb3ZyZSBTSFVTSA0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIlBvcC1vdXQgZGVjb21waWxlcyIsDQogICAgICAgIH0sDQogICAgICAgIElnbm9yZU5pbCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIklnbm9yZSBuaWwgcGFyZW50cyIsDQogICAgICAgIH0sDQogICAgICAgIExvZ0V4cGxvaXQgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJMb2cgZXhwbG9pdCBjYWxscyIsDQogICAgICAgIH0sDQogICAgICAgIExvZ1JlY2l2ZXMgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJMb2cgcmVjZWl2ZXMiLA0KICAgICAgICB9LA0KICAgICAgICBQYXVzZWQgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiUGF1c2VkIiwNCiAgICAgICAgICAgIEtleWJpbmQgPSBFbnVtLktleUNvZGUuUQ0KICAgICAgICB9LA0KICAgICAgICBLZXliaW5kc0VuYWJsZWQgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJLZXliaW5kcyBFbmFibGVkIg0KICAgICAgICB9LA0KICAgICAgICBGaW5kU3RyaW5nRm9yTmFtZSA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIkZpbmQgYXJnIGZvciBuYW1lIg0KICAgICAgICB9LA0KICAgICAgICBVaVZpc2libGUgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJVSSBWaXNpYmxlIiwNCiAgICAgICAgICAgIEtleWJpbmQgPSBFbnVtLktleUNvZGUuUA0KICAgICAgICB9LA0KICAgICAgICBOb1RyZWVOb2RlcyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJObyBncm91cGluZyINCiAgICAgICAgfSwNCiAgICAgICAgVGFibGVBcmdzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIlRhYmxlIGFyZ3MiDQogICAgICAgIH0sDQogICAgICAgIE5vVmFyaWFibGVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIGNvbXByZXNzaW9uIg0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZ1ZhbHVlKE5hbWU6IHN0cmluZyk6IEZsYWdWYWx1ZQ0KICAgIGxvY2FsIEZsYWcgPSBzZWxmOkdldEZsYWcoTmFtZSkNCiAgICByZXR1cm4gRmxhZy5WYWx1ZQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnVmFsdWUoTmFtZTogc3RyaW5nLCBWYWx1ZTogRmxhZ1ZhbHVlKQ0KICAgIGxvY2FsIEZsYWcgPSBzZWxmOkdldEZsYWcoTmFtZSkNCiAgICBGbGFnLlZhbHVlID0gVmFsdWUNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ0NhbGxiYWNrKE5hbWU6IHN0cmluZywgQ2FsbGJhY2s6ICguLi5hbnkpIC0+IC4uLmFueSkNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgRmxhZy5DYWxsYmFjayA9IENhbGxiYWNrDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFja3MoRGljdDoge30pDQogICAgZm9yIE5hbWUsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkgaW4gbmV4dCwgRGljdCBkbyANCiAgICAgICAgc2VsZjpTZXRGbGFnQ2FsbGJhY2soTmFtZSwgQ2FsbGJhY2spDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWcoTmFtZTogc3RyaW5nKTogRmxhZw0KICAgIGxvY2FsIEFsbEZsYWdzID0gc2VsZjpHZXRGbGFncygpDQogICAgbG9jYWwgRmxhZyA9IEFsbEZsYWdzW05hbWVdDQogICAgYXNzZXJ0KEZsYWcsICJGbGFnIGRvZXMgbm90IGV4aXN0ISIpDQogICAgcmV0dXJuIEZsYWcNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6QWRkRmxhZyhOYW1lOiBzdHJpbmcsIEZsYWc6IEZsYWcpDQogICAgbG9jYWwgQWxsRmxhZ3MgPSBzZWxmOkdldEZsYWdzKCkNCiAgICBBbGxGbGFnc1tOYW1lXSA9IEZsYWcNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZ3MoKTogRmxhZ3MNCiAgICByZXR1cm4gc2VsZi5GbGFncw0KZW5kDQoNCnJldHVybiBNb2R1bGU=]]
},Ui={'base64',
[[]]
},Generation={'base64',
[[]]
},Communication={'base64',
[[dHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCi0tLy8gTW9kdWxlDQpsb2NhbCBNb2R1bGUgPSB7DQogICAgQ29tbUNhbGxiYWNrcyA9IHt9DQp9DQoNCmxvY2FsIENvbW1XcmFwcGVyID0ge30NCkNvbW1XcmFwcGVyLl9faW5kZXggPSBDb21tV3JhcHBlcg0KDQotLS8vIFNlcnZpY2VzDQpsb2NhbCBDb3JlR3VpDQoNCi0tLy8gTW9kdWxlcw0KbG9jYWwgSG9vaw0KbG9jYWwgQ2hhbm5lbA0KbG9jYWwgQ29uZmlnDQpsb2NhbCBQcm9jZXNzDQoNCmZ1bmN0aW9uIE1vZHVsZTpJbml0KERhdGEpDQogICAgbG9jYWwgTW9kdWxlcyA9IERhdGEuTW9kdWxlcw0KICAgIGxvY2FsIFNlcnZpY2VzID0gRGF0YS5TZXJ2aWNlcw0KDQogICAgSG9vayA9IE1vZHVsZXMuSG9vaw0KICAgIFByb2Nlc3MgPSBNb2R1bGVzLlByb2Nlc3MNCiAgICBDb25maWcgPSBNb2R1bGVzLkNvbmZpZyBvciBDb25maWcNCiAgICBDb3JlR3VpID0gU2VydmljZXMuQ29yZUd1aQ0KZW5kDQoNCmZ1bmN0aW9uIENvbW1XcmFwcGVyOkZpcmUoLi4uKQ0KICAgIGxvY2FsIFF1ZXVlID0gc2VsZi5RdWV1ZQ0KICAgIHRhYmxlLmluc2VydChRdWV1ZSwgey4uLn0pDQplbmQNCg0KZnVuY3Rpb24gQ29tbVdyYXBwZXI6UHJvY2Vzc0FyZ3VtZW50cyhBcmd1bWVudHMpIA0KICAgIGxvY2FsIENoYW5uZWwgPSBzZWxmLkNoYW5uZWwNCiAgICBDaGFubmVsOkZpcmUoUHJvY2VzczpVbnBhY2soQXJndW1lbnRzKSkNCmVuZA0KDQpmdW5jdGlvbiBDb21tV3JhcHBlcjpQcm9jZXNzUXVldWUoKQ0KICAgIGxvY2FsIFF1ZXVlID0gc2VsZi5RdWV1ZQ0KDQogICAgZm9yIEluZGV4ID0gMSwgI1F1ZXVlIGRvDQogICAgICAgIGxvY2FsIEFyZ3VtZW50cyA9IHRhYmxlLnJlbW92ZShRdWV1ZSkNCiAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQ0KICAgICAgICAgICAgc2VsZjpQcm9jZXNzQXJndW1lbnRzKEFyZ3VtZW50cykgDQogICAgICAgIGVuZCkNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiBDb21tV3JhcHBlcjpCZWdpblF1ZXVlU2VydmljZSgpDQogICAgY29yb3V0aW5lLndyYXAoZnVuY3Rpb24oKQ0KICAgICAgICB3aGlsZSB3YWl0KCkgZG8NCiAgICAgICAgICAgIHNlbGY6UHJvY2Vzc1F1ZXVlKCkNCiAgICAgICAgZW5kDQogICAgZW5kKSgpDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOk5ld0NvbW1XcmFwKENoYW5uZWw6IEJpbmRhYmxlRXZlbnQpDQogICAgbG9jYWwgQmFzZSA9IHsNCiAgICAgICAgUXVldWUgPSBzZXRtZXRhdGFibGUoe30sIHtfX21vZGUgPSAidiJ9KSwNCiAgICAgICAgQ2hhbm5lbCA9IENoYW5uZWwsDQogICAgICAgIEV2ZW50ID0gQ2hhbm5lbC5FdmVudA0KICAgIH0NCg0KICAgIC0tLy8gQ3JlYXRlIG5ldyB3cmFwcGVyIGNsYXNzDQogICAgbG9jYWwgV3JhcHBlZCA9IHNldG1ldGF0YWJsZShCYXNlLCBDb21tV3JhcHBlcikNCiAgICBXcmFwcGVkOkJlZ2luUXVldWVTZXJ2aWNlKCkNCg0KICAgIHJldHVybiBXcmFwcGVkDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOk1ha2VEZWJ1Z0lkSGFuZGxlcigpOiBCaW5kYWJsZUZ1bmN0aW9uDQogICAgLS0vLyBVc2luZyBCaW5kYWJsZUZ1bmN0aW9uIGFzIGl0IGRvZXMgbm90IHJlcXVpcmUgYSB0aHJlYWQgcGVybWlzc2lvbiBjaGFuZ2UNCiAgICBsb2NhbCBSZW1vdGUgPSBJbnN0YW5jZS5uZXcoIkJpbmRhYmxlRnVuY3Rpb24iKQ0KICAgIGZ1bmN0aW9uIFJlbW90ZS5Pbkludm9rZShPYmplY3Q6IEluc3RhbmNlKTogc3RyaW5nDQogICAgICAgIHJldHVybiBPYmplY3Q6R2V0RGVidWdJZCgpDQogICAgZW5kDQoNCiAgICBzZWxmLkRlYnVnSWRSZW1vdGUgPSBSZW1vdGUNCiAgICBzZWxmLkRlYnVnSWRJbnZva2UgPSBSZW1vdGUuSW52b2tlDQoNCiAgICByZXR1cm4gUmVtb3RlDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldERlYnVnSWQoT2JqZWN0OiBJbnN0YW5jZSk6IHN0cmluZw0KICAgIGxvY2FsIEludm9rZSA9IHNlbGYuRGVidWdJZEludm9rZQ0KICAgIGxvY2FsIFJlbW90ZSA9IHNlbGYuRGVidWdJZFJlbW90ZQ0KCXJldHVybiBJbnZva2UoUmVtb3RlLCBPYmplY3QpDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldEhpZGRlblBhcmVudCgpOiBJbnN0YW5jZQ0KICAgIC0tLy8gVXNlIGdldGh1aSBpZiBpdCBleGlzdHMNCiAgICBpZiBnZXRodWkgdGhlbiByZXR1cm4gZ2V0aHVpKCkgZW5kDQogICAgcmV0dXJuIENvcmVHdWkNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6Q3JlYXRlQ29tbUNoYW5uZWwoKTogKG51bWJlciwgQmluZGFibGVFdmVudCkNCiAgICAtLS8vIFVzZSBuYXRpdmUgaWYgaXQgZXhpc3RzDQogICAgbG9jYWwgRm9yY2UgPSBDb25maWcuRm9yY2VVc2VDdXN0b21Db21tDQogICAgaWYgY3JlYXRlX2NvbW1fY2hhbm5lbCBhbmQgbm90IEZvcmNlIHRoZW4NCiAgICAgICAgcmV0dXJuIGNyZWF0ZV9jb21tX2NoYW5uZWwoKQ0KICAgIGVuZA0KDQogICAgbG9jYWwgUGFyZW50ID0gc2VsZjpHZXRIaWRkZW5QYXJlbnQoKQ0KICAgIGxvY2FsIENoYW5uZWxJZCA9IG1hdGgucmFuZG9tKDEsIDEwMDAwMDAwKQ0KDQogICAgLS0vLyBCaW5kYWJsZUV2ZW50DQogICAgbG9jYWwgQ2hhbm5lbCA9IEluc3RhbmNlLm5ldygiQmluZGFibGVFdmVudCIsIFBhcmVudCkNCiAgICBDaGFubmVsLk5hbWUgPSBDaGFubmVsSWQNCg0KICAgIHJldHVybiBDaGFubmVsSWQsIENoYW5uZWwNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0Q29tbUNoYW5uZWwoQ2hhbm5lbElkOiBudW1iZXIpOiBCaW5kYWJsZUV2ZW50Pw0KICAgIC0tLy8gVXNlIG5hdGl2ZSBpZiBpdCBleGlzdHMNCiAgICBsb2NhbCBGb3JjZSA9IENvbmZpZy5Gb3JjZVVzZUN1c3RvbUNvbW0NCiAgICBpZiBnZXRfY29tbV9jaGFubmVsIGFuZCBub3QgRm9yY2UgdGhlbg0KICAgICAgICBsb2NhbCBDaGFubmVsID0gZ2V0X2NvbW1fY2hhbm5lbChDaGFubmVsSWQpDQogICAgICAgIHJldHVybiBDaGFubmVsLCBmYWxzZQ0KICAgIGVuZA0KDQogICAgbG9jYWwgUGFyZW50ID0gc2VsZjpHZXRIaWRkZW5QYXJlbnQoKQ0KICAgIGxvY2FsIENoYW5uZWwgPSBQYXJlbnQ6RmluZEZpcnN0Q2hpbGQoQ2hhbm5lbElkKQ0KDQogICAgLS0vLyBXcmFwIHRoZSBjaGFubmVsIChQcmV2ZW50cyB0aHJlYWQgcGVybWlzc2lvbiBlcnJvcnMpDQogICAgbG9jYWwgV3JhcHBlZCA9IHNlbGY6TmV3Q29tbVdyYXAoQ2hhbm5lbCkNCiAgICByZXR1cm4gV3JhcHBlZCwgdHJ1ZQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpDaGVja1ZhbHVlKFZhbHVlLCBJbmJvdW5kOiBib29sZWFuPykNCiAgICAgLS0vLyBObyBzZXJpYWxpemluZyAgbmVlZGVkDQogICAgaWYgdHlwZW9mKFZhbHVlKSB+PSAidGFibGUiIHRoZW4gDQogICAgICAgIHJldHVybiBWYWx1ZSANCiAgICBlbmQNCiAgIA0KICAgIC0tLy8gRGVzZXJpYWxpemUNCiAgICBpZiBJbmJvdW5kIHRoZW4NCiAgICAgICAgcmV0dXJuIHNlbGY6RGVzZXJpYWxpemVUYWJsZShWYWx1ZSkNCiAgICBlbmQNCg0KICAgIC0tLy8gU2VyaWFsaXplDQogICAgcmV0dXJuIHNlbGY6U2VyaWFsaXplVGFibGUoVmFsdWUpDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOk1ha2VQYWNrZXQoSW5kZXgsIFZhbHVlKTogdGFibGUNCiAgICByZXR1cm4gew0KICAgICAgICBJbmRleCA9IHNlbGY6Q2hlY2tWYWx1ZShJbmRleCksIA0KICAgICAgICBWYWx1ZSA9IHNlbGY6Q2hlY2tWYWx1ZShWYWx1ZSkNCiAgICB9DQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlJlYWRQYWNrZXQoUGFja2V0OiB0YWJsZSk6IChhbnksIGFueSkNCiAgICBsb2NhbCBLZXkgPSBzZWxmOkNoZWNrVmFsdWUoUGFja2V0LkluZGV4LCB0cnVlKQ0KICAgIGxvY2FsIFZhbHVlID0gc2VsZjpDaGVja1ZhbHVlKFBhY2tldC5WYWx1ZSwgdHJ1ZSkNCiAgICByZXR1cm4gS2V5LCBWYWx1ZQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXJpYWxpemVUYWJsZShUYWJsZTogdGFibGUpOiB0YWJsZQ0KICAgIGxvY2FsIFNlcmlhbGl6ZWQgPSB7fQ0KICAgIGZvciBJbmRleCwgVmFsdWUgaW4gbmV4dCwgVGFibGUgZG8NCiAgICAgICAgbG9jYWwgUGFja2V0ID0gc2VsZjpNYWtlUGFja2V0KEluZGV4LCBWYWx1ZSkNCiAgICAgICAgdGFibGUuaW5zZXJ0KFNlcmlhbGl6ZWQsIFBhY2tldCkNCiAgICBlbmQNCiAgICByZXR1cm4gU2VyaWFsaXplZA0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpEZXNlcmlhbGl6ZVRhYmxlKFNlcmlhbGl6ZWQ6IHRhYmxlKTogdGFibGUNCiAgICBsb2NhbCBUYWJsZSA9IHt9DQogICAgZm9yIF8sIFBhY2tldCBpbiBuZXh0LCBTZXJpYWxpemVkIGRvDQogICAgICAgIGxvY2FsIEluZGV4LCBWYWx1ZSA9IHNlbGY6UmVhZFBhY2tldChQYWNrZXQpDQogICAgICAgIGlmIG5vdCBJbmRleCB0aGVuIGNvbnRpbnVlIGVuZA0KDQogICAgICAgIFRhYmxlW0luZGV4XSA9IFZhbHVlDQogICAgZW5kDQogICAgcmV0dXJuIFRhYmxlDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldENoYW5uZWwoTmV3Q2hhbm5lbDogbnVtYmVyKQ0KICAgIENoYW5uZWwgPSBOZXdDaGFubmVsDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkNvbnNvbGVQcmludCguLi4pDQogICAgc2VsZjpDb21tdW5pY2F0ZSgiUHJpbnQiLCAuLi4pDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlF1ZXVlTG9nKERhdGEpDQogICAgc2VsZjpDb21tdW5pY2F0ZSgiUXVldWVMb2ciLCBEYXRhKQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpBZGRDb21tQ2FsbGJhY2soVHlwZTogc3RyaW5nLCBDYWxsYmFjazogKC4uLmFueSkgLT4gLi4uYW55KQ0KICAgIGxvY2FsIENvbW1DYWxsYmFja3MgPSBzZWxmLkNvbW1DYWxsYmFja3MNCiAgICBDb21tQ2FsbGJhY2tzW1R5cGVdID0gQ2FsbGJhY2sNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0Q29tbUNhbGxiYWNrKFR5cGU6IHN0cmluZyk6ICguLi5hbnkpIC0+IC4uLmFueQ0KICAgIGxvY2FsIENvbW1DYWxsYmFja3MgPSBzZWxmLkNvbW1DYWxsYmFja3MNCiAgICByZXR1cm4gQ29tbUNhbGxiYWNrc1tUeXBlXQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpDaGFubmVsSW5kZXgoQ2hhbm5lbCwgUHJvcGVydHk6IHN0cmluZykNCiAgICBpZiB0eXBlb2YoQ2hhbm5lbCkgPT0gIkluc3RhbmNlIiB0aGVuDQogICAgICAgIHJldHVybiBIb29rOkluZGV4KENoYW5uZWwsIFByb3BlcnR5KQ0KICAgIGVuZA0KDQogICAgLS0vLyBTb21lIGV4ZWN1dG9ycyByZXR1cm4gYSBVc2VyRGF0YSB0eXBlDQogICAgcmV0dXJuIENoYW5uZWxbUHJvcGVydHldDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkNvbW11bmljYXRlKC4uLikNCiAgICBsb2NhbCBGaXJlID0gc2VsZjpDaGFubmVsSW5kZXgoQ2hhbm5lbCwgIkZpcmUiKQ0KICAgIEZpcmUoQ2hhbm5lbCwgLi4uKQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpBZGRDb25uZWN0aW9uKENhbGxiYWNrKTogUkJYU2NyaXB0Q29ubmVjdGlvbg0KICAgIGxvY2FsIEV2ZW50ID0gc2VsZjpDaGFubmVsSW5kZXgoQ2hhbm5lbCwgIkV2ZW50IikNCiAgICByZXR1cm4gRXZlbnQ6Q29ubmVjdChDYWxsYmFjaykNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6QWRkVHlwZUNhbGxiYWNrKFR5cGU6IHN0cmluZywgQ2FsbGJhY2spOiBSQlhTY3JpcHRDb25uZWN0aW9uDQogICAgbG9jYWwgRXZlbnQgPSBzZWxmOkNoYW5uZWxJbmRleChDaGFubmVsLCAiRXZlbnQiKQ0KICAgIHJldHVybiBFdmVudDpDb25uZWN0KGZ1bmN0aW9uKFJlY2l2ZWRUeXBlOiBzdHJpbmcsIC4uLikNCiAgICAgICAgaWYgUmVjaXZlZFR5cGUgfj0gVHlwZSB0aGVuIHJldHVybiBlbmQNCiAgICAgICAgQ2FsbGJhY2soLi4uKQ0KICAgIGVuZCkNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6QWRkVHlwZUNhbGxiYWNrcyhUeXBlczogdGFibGUpDQogICAgZm9yIFR5cGU6IHN0cmluZywgQ2FsbGJhY2sgaW4gbmV4dCwgVHlwZXMgZG8NCiAgICAgICAgc2VsZjpBZGRUeXBlQ2FsbGJhY2soVHlwZSwgQ2FsbGJhY2spDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkFkZERlZmF1bHRDYWxsYmFja3MoRXZlbnQ6IEJpbmRhYmxlRXZlbnQpDQogICAgc2VsZjpBZGRDb21tQ2FsbGJhY2soIldhcm4iLCBmdW5jdGlvbiguLi4pDQogICAgICAgIHdhcm4oLi4uKQ0KICAgIGVuZCkNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6Q3JlYXRlQ2hhbm5lbCgpOiBudW1iZXINCiAgICBsb2NhbCBDaGFubmVsSUQsIEV2ZW50ID0gc2VsZjpDcmVhdGVDb21tQ2hhbm5lbCgpDQoNCiAgICAtLS8vIENvbm5lY3QgR2V0Q29tbUNhbGxiYWNrIGZ1bmN0aW9uDQogICAgRXZlbnQuRXZlbnQ6Q29ubmVjdChmdW5jdGlvbihUeXBlOiBzdHJpbmcsIC4uLikNCiAgICAgICAgbG9jYWwgQ2FsbGJhY2sgPSBzZWxmOkdldENvbW1DYWxsYmFjayhUeXBlKQ0KICAgICAgICBpZiBDYWxsYmFjayB0aGVuDQogICAgICAgICAgICBDYWxsYmFjayguLi4pDQogICAgICAgIGVuZA0KICAgIGVuZCkNCg0KICAgIC0tLy8gQWRkIGRlZmF1bHQgY29tbXVuaWNhdGlvbiBjYWxsYmFja3MNCiAgICBzZWxmOkFkZERlZmF1bHRDYWxsYmFja3MoRXZlbnQpDQoNCiAgICByZXR1cm4gQ2hhbm5lbElELCBFdmVudA0KZW5kDQoNCk1vZHVsZTpNYWtlRGVidWdJZEhhbmRsZXIoKQ0KDQpyZXR1cm4gTW9kdWxl]]
}},d.Players local i=e:LoadLibraries(g)local j,k,l,m,n,o,p=i.Process,i.Hook,i.Ui
,i.Generation,i.Communication,i.Config,e:GetAsset('ProggyClean.ttf',true)local q
=e:CreateFont('ProggyClean',p)l:SetFontFile(q)j:CheckConfig(o)e:LoadModules(i,{
Modules=i,Services=d})local r,s=l:CreateMainWindow(),j:CheckIsSupported()if not
s then r:Close()return end local t,u=n:CreateChannel()n:AddCommCallback(
'QueueLog',function(...)l:QueueLog(...)end)n:AddCommCallback('Print',function(
...)l:ConsoleLog(...)end)local v=h.LocalPlayer m:SetSwapsCallback(function(w)w:
AddSwap(v,{String='LocalPlayer'})w:AddSwap(v.Character,{String='Character',
NextParent=v})end)l:CreateWindowContent(r)l:SetCommChannel(u)l:BeginLogService()
local w=e:MakeActorScript(g,t)k:LoadHooks(w,t)
--[[
	⣿⣿⣿⣿⣿ SIGMA SPY ⣿⣿⣿⣿⣿
	⣿⣿⣯⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉
	⠉⠻⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠈⠻⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠀⠀⣉⣿⣿⣿⠆⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⣠⣾⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⢀⣴⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣀⣴⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣿⣿⣟⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
	⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

	@author depso (depthso)
	@repo https://github.com/depthso
	@license MIT
	@description Sigma Remote Spy for Roblox
    
	This file is COMPILED, check /src folder for the source
	Build scripts are available in /build
]]

local a,b={UseWorkspace=false,NoActors=false,FolderName='Sigma Spy',RepoUrl=
[[https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main]],
ParserUrl=
[[https://raw.githubusercontent.com/depthso/Roblox-parser/refs/heads/main/dist/Main.luau]]
},{...}local c=b[1]if typeof(c)=='table'then for d,e in c do a[d]=e end end
local d=setmetatable({},{__index=function(d,e)local f=game:GetService(e)return
cloneref(f)end})local e=(function()local e,f={UseWorkspace=false,Folder=
'Sigma spy',RepoUrl=nil,FolderStructure={['Sigma Spy']={'assets'}}}function e:
Init(g)local h,i=self.FolderStructure,g.Services f=i.HttpService self:
CheckFolders(h)end function e:PushConfig(g)for h,i in next,g do self[h]=i end
end function e:UrlFetch(g)local h={Url=g:gsub(' ','%%20'),Method='GET'}local i,j
=pcall(request,h)if not i then warn'[!] HTTP request error! Check console (F9)'
warn('> Url:',g)error(j)return''end local k,l=j.Body,j.StatusCode if l==404 then
warn'[!] The file requested has moved or been deleted.'warn(' >',g)return''end
return k,j end function e:MakePath(g)local h=self.Folder return`{h}/{g}`end
function e:LoadCustomasset(g)if not getcustomasset then return end if not g then
return end local h=readfile(g)if#h<=0 then return end local i,j=pcall(
getcustomasset,g)if not i then return end if not j or#j<=0 then return end
return j end function e:GetFile(g,h)local i,j,k,l=self.RepoUrl,self.UseWorkspace
,self:MakePath(g),''if j then l=readfile(k)else l=self:UrlFetch(`{i}/{g}`)end if
h then self:FileCheck(k,function()return l end)return self:LoadCustomasset(k)end
return l end function e:GetTemplate(g)return self:GetFile(`templates/{g}.lua`)
end function e:FileCheck(g,h)if isfile(g)then return end local i=h()writefile(g,
i)end function e:FolderCheck(g)if isfolder(g)then return end makefolder(g)end
function e:CheckPath(g,h)return g and`{g}/{h}`or h end function e:CheckFolders(g
,h)for i,j in next,g do if typeof(j)=='table'then local k=self:CheckPath(h,i)
self:FolderCheck(k)self:CheckFolders(j,k)continue end local k=self:CheckPath(h,j
)self:FolderCheck(k)end end function e:TemplateCheck(g,h)self:FileCheck(g,
function()return self:GetTemplate(h)end)end function e:GetAsset(g,h)return self:
GetFile(`assets/{g}`,h)end function e:GetModule(g,h)local i=`{g}.lua`if h then
self:TemplateCheck(i,h)local j=readfile(i)local k=loadstring(j)if k then return
j end return self:GetTemplate(h)end return self:GetFile(i)end function e:
LoadLibraries(g,...)local h={}for i,j in next,g do local k=typeof(j)=='table'and
j[1]=='base64'j=k and j[2]or j if typeof(j)~='string'and not k then h[i]=j
continue end if k then j=crypt.base64decode(j)g[i]=j end local l,m=loadstring(j,
i)assert(l,`Failed to load {i}: {m}`)h[i]=l(...)end return h end function e:
LoadModules(g,h)for i,j in next,g do local k=j.Init if not k then continue end j
:Init(h)end end function e:CreateFont(g,h)if not h then return end local i=`assets/{
g}.json`local j,k=self:MakePath(i),{name=g,faces={{name='Regular',weight=400,
style='Normal',assetId=h}}}local l=f:JSONEncode(k)writefile(j,l)return j end
function e:CompileModule(g)local h='local Libraries = {'for i,j in g do if
typeof(j)~='string'then continue end h..=`\t{i} = (function()\n{j}\nend)(),\n`
end h..='}'return h end function e:MakeActorScript(g,h)local i=e:CompileModule(g
)i..='\r\n\tlocal ExtraData = {\r\n\t\tIsActor = true\r\n\t}\r\n\t'i..=`Libraries.Hook:BeginService(Libraries, ExtraData, {
h})`return i end return e end)()e:PushConfig(a)e:Init{Services=d}local f=e.
FolderName local g,h={Config=e:GetModule(`{f}/Config`,'Config'),ReturnSpoofs=e:
GetModule(`{f}/Return spoofs`,'Return Spoofs'),Configuration=a,Files=e,Process={
'base64',
[[]]
},Hook={'base64',
[[]]
},Flags={'base64',
[[dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkNCnR5cGUgRmxhZyA9IHsNCiAgICBWYWx1ZTogRmxhZ1ZhbHVlLA0KICAgIExhYmVsOiBzdHJpbmcsDQogICAgQ2F0ZWdvcnk6IHN0cmluZw0KfQ0KdHlwZSBGbGFncyA9IHsNCiAgICBbc3RyaW5nXTogRmxhZw0KfQ0KdHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCmxvY2FsIE1vZHVsZSA9IHsNCiAgICBGbGFncyA9IHsNCiAgICAgICAgLS0gUHJldmVudFJlbmFtaW5nID0gew0KICAgICAgICAtLSAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgLS0gICAgIExhYmVsID0gIk5vIHJlbmFtaW5nIiwNCiAgICAgICAgLS0gfSwNCiAgICAgICAgLS0gUHJldmVudFBhcmVudGluZyA9IHsNCiAgICAgICAgLS0gICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgIC0tICAgICBMYWJlbCA9ICJObyBwYXJlbnRpbmciLA0KICAgICAgICAtLSB9LA0KICAgICAgICBOb0NvbW1lbnRzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIGNvbW1lbnRzIiwNCiAgICAgICAgfSwNCiAgICAgICAgU2VsZWN0TmV3ZXN0ID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIkF1dG8gc2VsZWN0IG5ld2VzdCIsDQogICAgICAgIH0sDQogICAgICAgIERlY29tcGlsZVBvcG91dCA9IHsgLS0gTG92cmUgU0hVU0gNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJQb3Atb3V0IGRlY29tcGlsZXMiLA0KICAgICAgICB9LA0KICAgICAgICBJZ25vcmVOaWwgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJJZ25vcmUgbmlsIHBhcmVudHMiLA0KICAgICAgICB9LA0KICAgICAgICBMb2dFeHBsb2l0ID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTG9nIGV4cGxvaXQgY2FsbHMiLA0KICAgICAgICB9LA0KICAgICAgICBMb2dSZWNpdmVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTG9nIHJlY2VpdmVzIiwNCiAgICAgICAgfSwNCiAgICAgICAgUGF1c2VkID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIlBhdXNlZCIsDQogICAgICAgICAgICBLZXliaW5kID0gRW51bS5LZXlDb2RlLlENCiAgICAgICAgfSwNCiAgICAgICAgS2V5YmluZHNFbmFibGVkID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiS2V5YmluZHMgRW5hYmxlZCINCiAgICAgICAgfSwNCiAgICAgICAgRmluZFN0cmluZ0Zvck5hbWUgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJGaW5kIGFyZyBmb3IgbmFtZSINCiAgICAgICAgfSwNCiAgICAgICAgVWlWaXNpYmxlID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiVUkgVmlzaWJsZSIsDQogICAgICAgICAgICBLZXliaW5kID0gRW51bS5LZXlDb2RlLlANCiAgICAgICAgfSwNCiAgICAgICAgTm9UcmVlTm9kZXMgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTm8gZ3JvdXBpbmciDQogICAgICAgIH0sDQogICAgICAgIFRhYmxlQXJncyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJUYWJsZSBhcmdzIg0KICAgICAgICB9LA0KICAgICAgICBOb1ZhcmlhYmxlcyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJObyBjb21wcmVzc2lvbiINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWdWYWx1ZShOYW1lOiBzdHJpbmcpOiBGbGFnVmFsdWUNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgcmV0dXJuIEZsYWcuVmFsdWUNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ1ZhbHVlKE5hbWU6IHN0cmluZywgVmFsdWU6IEZsYWdWYWx1ZSkNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgRmxhZy5WYWx1ZSA9IFZhbHVlDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFjayhOYW1lOiBzdHJpbmcsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkpDQogICAgbG9jYWwgRmxhZyA9IHNlbGY6R2V0RmxhZyhOYW1lKQ0KICAgIEZsYWcuQ2FsbGJhY2sgPSBDYWxsYmFjaw0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnQ2FsbGJhY2tzKERpY3Q6IHt9KQ0KICAgIGZvciBOYW1lLCBDYWxsYmFjazogKC4uLmFueSkgLT4gLi4uYW55IGluIG5leHQsIERpY3QgZG8gDQogICAgICAgIHNlbGY6U2V0RmxhZ0NhbGxiYWNrKE5hbWUsIENhbGxiYWNrKQ0KICAgIGVuZA0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpHZXRGbGFnKE5hbWU6IHN0cmluZyk6IEZsYWcNCiAgICBsb2NhbCBBbGxGbGFncyA9IHNlbGY6R2V0RmxhZ3MoKQ0KICAgIGxvY2FsIEZsYWcgPSBBbGxGbGFnc1tOYW1lXQ0KICAgIGFzc2VydChGbGFnLCAiRmxhZyBkb2VzIG5vdCBleGlzdCEiKQ0KICAgIHJldHVybiBGbGFnDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkFkZEZsYWcoTmFtZTogc3RyaW5nLCBGbGFnOiBGbGFnKQ0KICAgIGxvY2FsIEFsbEZsYWdzID0gc2VsZjpHZXRGbGFncygpDQogICAgQWxsRmxhZ3NbTmFtZV0gPSBGbGFnDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWdzKCk6IEZsYWdzDQogICAgcmV0dXJuIHNlbGYuRmxhZ3MNCmVuZA0KDQpyZXR1cm4gTW9kdWxl]]
},Ui={'base64',
[[]]
},Generation={'base64',
[[]]
},Communication={'base64',
[[]]
}},d.Players local i=e:LoadLibraries(g)local j,k,l,m,n,o,p=i.Process,i.Hook,i.Ui
,i.Generation,i.Communication,i.Config,e:GetAsset('ProggyClean.ttf',true)local q
=e:CreateFont('ProggyClean',p)l:SetFontFile(q)j:CheckConfig(o)e:LoadModules(i,{
Modules=i,Services=d})local r,s=l:CreateMainWindow(),j:CheckIsSupported()if not
s then r:Close()return end local t,u=n:CreateChannel()n:AddCommCallback(
'QueueLog',function(...)l:QueueLog(...)end)n:AddCommCallback('Print',function(
...)l:ConsoleLog(...)end)local v=h.LocalPlayer m:SetSwapsCallback(function(w)w:
AddSwap(v,{String='LocalPlayer'})w:AddSwap(v.Character,{String='Character',
NextParent=v})end)l:CreateWindowContent(r)l:SetCommChannel(u)l:BeginLogService()
local w=e:MakeActorScript(g,t)k:LoadHooks(w,t)local x=l:AskUser{Title=
'Enable function patches?',Content={
[[On some executors, function patches can prevent common detections that executor has]]
,
[[By enabling this, it MAY trigger hook detections in some games, this is why you are asked.]]
,'','(This does not affect game functionality)'},Options={'Yes','No'}}=='Yes'u:
Fire('BeginHooks',{PatchFunctions=x})
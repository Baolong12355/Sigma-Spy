--[[
	⣿⣿⣿⣿⣿ SIGMA SPY ⣿⣿⣿⣿⣿
	⣿⣿⣯⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉
	⠉⠻⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠈⠻⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠀⠀⣉⣿⣿⣿⠆⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⣠⣾⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⢀⣴⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣀⣴⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣿⣿⣟⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
	⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

	@author depso (depthso)
	@repo https://github.com/depthso
	@license MIT
	@description Sigma Remote Spy for Roblox
    
	This file is COMPILED, check /src folder for the source
	Build scripts are available in /build
]]

local a,b={UseWorkspace=false,NoActors=false,RepoUrl=
[[https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main]],
ParserUrl=
[[https://raw.githubusercontent.com/depthso/Roblox-parser/refs/heads/main]]},{
...}local c=b[1]if typeof(c)=='table'then for d,e in c do a[d]=e end end local d
=setmetatable({},{__index=function(d,e)local f=game:GetService(e)return
cloneref(f)end})local e=(function()local e,f={UseWorkspace=false,Folder=
'Sigma spy',RepoUrl=nil,FolderStructure={['Sigma Spy']={'assets'}}}function e:
Init(g)local h,i=self.FolderStructure,g.Services f=i.HttpService self:
CheckFolders(h)end function e:PushConfig(g)for h,i in next,g do self[h]=i end
end function e:UrlFetch(g)local h={Url=g:gsub(' ','%%20'),Method='GET'}local i,j
=pcall(request,h)if not i then warn'[!] HTTP request error! Check console (F9)'
warn('> Url:',g)error(j)return''end local k,l=j.Body,j.StatusCode if l==404 then
warn'[!] The file requested has moved or been deleted.'warn(' >',g)return''end
return k,j end function e:MakePath(g)local h=self.Folder return`{h}/{g}`end
function e:LoadCustomasset(g)if not getcustomasset then return end local h,i=
pcall(getcustomasset,g)if not h then return end if not i or i==''then return end
return i end function e:GetFile(g,h)local i,j,k,l=self.RepoUrl,self.UseWorkspace
,self:MakePath(g),''if j then l=readfile(k)else l=self:UrlFetch(`{i}/{g}`)end if
h then self:FileCheck(k,function()return l end)return self:LoadCustomasset(k)end
return l end function e:GetTemplate(g)return self:GetFile(`templates/{g}.lua`)
end function e:FileCheck(g,h)if isfile(g)then return end local i=h()writefile(g,
i)end function e:FolderCheck(g)if isfolder(g)then return end makefolder(g)end
function e:CheckPath(g,h)return g and`{g}/{h}`or h end function e:CheckFolders(g
,h)for i,j in next,g do if typeof(j)=='table'then local k=self:CheckPath(h,i)
self:FolderCheck(k)self:CheckFolders(j,k)continue end local k=self:CheckPath(h,j
)self:FolderCheck(k)end end function e:TemplateCheck(g,h)self:FileCheck(g,
function()return self:GetTemplate(h)end)end function e:GetAsset(g,h)return self:
GetFile(`assets/{g}`,h)end function e:GetModule(g,h)local i=`{g}.lua`if h then
self:TemplateCheck(i,h)return readfile(i)end return self:GetFile(i)end function
e:LoadLibraries(g,...)local h={}for i,j in next,g do local k=typeof(j)=='table'
and j[1]=='base64'j=k and j[2]or j if typeof(j)~='string'and not k then h[i]=j
continue end if k then j=crypt.base64decode(j)g[i]=j end local l=loadstring(j,i)
assert(l,`Failed to load {i}`)h[i]=l(...)end return h end function e:LoadModules
(g,h)for i,j in next,g do local k=j.Init if not k then continue end j:Init(h)end
end function e:CreateFont(g,h)if not h then return end local i=`assets/{g}.json`
local j,k=self:MakePath(i),{name=g,faces={{name='Regular',weight=400,style=
'Normal',assetId=h}}}local l=f:JSONEncode(k)writefile(j,l)return j end function
e:CompileModule(g)local h='local Libraries = {'for i,j in g do if typeof(j)~=
'string'then continue end h..=`\t{i} = (function()\n{j}\nend)(),\n`end h..='}'
return h end function e:MakeActorScript(g,h)local i=e:CompileModule(g)i..=
'\r\n\tlocal ExtraData = {\r\n\t\tIsActor = true\r\n\t}\r\n\t'i..=`Libraries.Hook:BeginService(Libraries, ExtraData, {
h})`return i end return e end)()e:PushConfig(a)e:Init{Services=d}local f,g={
Config=e:GetModule('Sigma Spy/Config','Config'),ReturnSpoofs=e:GetModule(
'Sigma Spy/Return spoofs','Return Spoofs'),Configuration=a,Files=e,Process={
'base64',
[[]]
},Hook={'base64',
[[]]
},Flags={'base64',
[[dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkNCnR5cGUgRmxhZyA9IHsNCiAgICBWYWx1ZTogRmxhZ1ZhbHVlLA0KICAgIExhYmVsOiBzdHJpbmcsDQogICAgQ2F0ZWdvcnk6IHN0cmluZw0KfQ0KdHlwZSBGbGFncyA9IHsNCiAgICBbc3RyaW5nXTogRmxhZw0KfQ0KdHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCmxvY2FsIE1vZHVsZSA9IHsNCiAgICBGbGFncyA9IHsNCiAgICAgICAgUHJldmVudFJlbmFtaW5nID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIHJlbmFtaW5nIiwNCiAgICAgICAgfSwNCiAgICAgICAgUHJldmVudFBhcmVudGluZyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJObyBwYXJlbnRpbmciLA0KICAgICAgICB9LA0KICAgICAgICBTZWxlY3ROZXdlc3QgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiQXV0byBzZWxlY3QgbmV3ZXN0IiwNCiAgICAgICAgfSwNCiAgICAgICAgSWdub3JlTmlsID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiSWdub3JlIG5pbCBwYXJlbnRzIiwNCiAgICAgICAgfSwNCiAgICAgICAgTG9nRXhwbG9pdCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIkxvZyBleHBsb2l0IGNhbGxzIiwNCiAgICAgICAgfSwNCiAgICAgICAgTG9nUmVjaXZlcyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIkxvZyByZWNlaXZlcyIsDQogICAgICAgIH0sDQogICAgICAgIFBhdXNlZCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJQYXVzZWQiLA0KICAgICAgICAgICAgS2V5YmluZCA9IEVudW0uS2V5Q29kZS5RDQogICAgICAgIH0sDQogICAgICAgIEtleWJpbmRzRW5hYmxlZCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIktleWJpbmRzIEVuYWJsZWQiDQogICAgICAgIH0sDQogICAgICAgIEZpbmRTdHJpbmdGb3JOYW1lID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiRmluZCBhcmcgZm9yIG5hbWUiDQogICAgICAgIH0sDQogICAgICAgIFVpVmlzaWJsZSA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIlVJIFZpc2libGUiLA0KICAgICAgICAgICAgS2V5YmluZCA9IEVudW0uS2V5Q29kZS5QDQogICAgICAgIH0sDQogICAgICAgIE5vVHJlZU5vZGVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIGdyb3VwaW5nIg0KICAgICAgICB9LA0KICAgICAgICBUYWJsZUFyZ3MgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiVGFibGUgYXJncyINCiAgICAgICAgfSwNCiAgICAgICAgTm9WYXJpYWJsZXMgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTm8gY29tcHJlc3Npb24iDQogICAgICAgIH0sDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZ1ZhbHVlKE5hbWU6IHN0cmluZyk6IEZsYWdWYWx1ZQ0KICAgIGxvY2FsIEZsYWcgPSBzZWxmOkdldEZsYWcoTmFtZSkNCiAgICByZXR1cm4gRmxhZy5WYWx1ZQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnVmFsdWUoTmFtZTogc3RyaW5nLCBWYWx1ZTogRmxhZ1ZhbHVlKQ0KICAgIGxvY2FsIEZsYWcgPSBzZWxmOkdldEZsYWcoTmFtZSkNCiAgICBGbGFnLlZhbHVlID0gVmFsdWUNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ0NhbGxiYWNrKE5hbWU6IHN0cmluZywgQ2FsbGJhY2s6ICguLi5hbnkpIC0+IC4uLmFueSkNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgRmxhZy5DYWxsYmFjayA9IENhbGxiYWNrDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFja3MoRGljdDoge30pDQogICAgZm9yIE5hbWUsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkgaW4gbmV4dCwgRGljdCBkbyANCiAgICAgICAgc2VsZjpTZXRGbGFnQ2FsbGJhY2soTmFtZSwgQ2FsbGJhY2spDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWcoTmFtZTogc3RyaW5nKTogRmxhZw0KICAgIGxvY2FsIEFsbEZsYWdzID0gc2VsZjpHZXRGbGFncygpDQogICAgbG9jYWwgRmxhZyA9IEFsbEZsYWdzW05hbWVdDQogICAgYXNzZXJ0KEZsYWcsICJGbGFnIGRvZXMgbm90IGV4aXN0ISIpDQogICAgcmV0dXJuIEZsYWcNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6QWRkRmxhZyhOYW1lOiBzdHJpbmcsIEZsYWc6IEZsYWcpDQogICAgbG9jYWwgQWxsRmxhZ3MgPSBzZWxmOkdldEZsYWdzKCkNCiAgICBBbGxGbGFnc1tOYW1lXSA9IEZsYWcNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZ3MoKTogRmxhZ3MNCiAgICByZXR1cm4gc2VsZi5GbGFncw0KZW5kDQoNCnJldHVybiBNb2R1bGU=]]
},Ui={'base64',
[[bG9jYWwgVWkgPSB7DQoJRGVmYXVsdEVkaXRvckNvbnRlbnQgPSBbPVstLVtbIA0KCVdlbGNvbWUgdG8gU2lnbWEgU3B5DQoJQ3JlYXRlZCBieSBkZXBzbyENCl1dIF09XSwNCglMb2dMaW1pdCA9IDEwMCwNCiAgICBTZWFzb25MYWJlbHMgPSB7IA0KICAgICAgICBKYW51YXJ5ID0gIuKbhCVz4puEIiwgDQogICAgICAgIEZlYnJ1YXJ5ID0gIvCfjKjvuI8lc/Cfj4IiLCANCiAgICAgICAgTWFyY2ggPSAi8J+MuSVz8J+MuiIsIA0KICAgICAgICBBcHJpbCA9ICLwn5CjJXPinJ3vuI8iLCANCiAgICAgICAgTWF5ID0gIvCfkJ0lc/CfjJ4iLCANCiAgICAgICAgSnVuZSA9ICLwn4yyJXPwn6WVIiwgDQogICAgICAgIEp1bHkgPSAi8J+MiiVz8J+MhSIsIA0KICAgICAgICBBdWd1c3QgPSAi4piA77iPJXPwn4yeIiwgDQogICAgICAgIFNlcHRlbWJlciA9ICLwn42BJXPwn42BIiwgDQogICAgICAgIE9jdG9iZXIgPSAi8J+OgyVz8J+OgyIsIA0KICAgICAgICBOb3ZlbWJlciA9ICLwn42CJXPwn42CIiwgDQogICAgICAgIERlY2VtYmVyID0gIvCfjoQlc/CfjoEiDQogICAgfSwNCglTY2FsZXMgPSB7DQoJCVsiTW9iaWxlIl0gPSBVRGltMi5mcm9tT2Zmc2V0KDQ4MCwgMjgwKSwNCgkJWyJEZXNrdG9wIl0gPSBVRGltMi5mcm9tT2Zmc2V0KDYwMCwgNDAwKSwNCgl9LA0KICAgIEJhc2VDb25maWcgPSB7DQogICAgICAgIFRoZW1lID0gIlNpZ21hU3B5IiwNCiAgICAgICAgTm9TY3JvbGwgPSB0cnVlLA0KICAgIH0sDQoJT3B0aW9uVHlwZXMgPSB7DQoJCWJvb2xlYW4gPSAiQ2hlY2tib3giLA0KCX0sDQoJRGlzcGxheVJlbW90ZUluZm8gPSB7DQoJCSJNZXRhTWV0aG9kIiwNCgkJIk1ldGhvZCIsDQoJCSJSZW1vdGUiLA0KCQkiQ2FsbGluZ1NjcmlwdCIsDQoJCSJJc0FjdG9yIiwNCgkJIklkIg0KCX0sDQoNCiAgICBXaW5kb3cgPSBuaWwsDQogICAgUmFuZG9tU2VlZCA9IFJhbmRvbS5uZXcodGljaygpKSwNCglMb2dzID0gc2V0bWV0YXRhYmxlKHt9LCB7X19tb2RlID0gImsifSksDQoJTG9nUXVldWUgPSBzZXRtZXRhdGFibGUoe30sIHtfX21vZGUgPSAidiJ9KSwNCn0gDQoNCnR5cGUgdGFibGUgPSB7DQoJW2FueV06IGFueQ0KfQ0KDQp0eXBlIExvZyA9IHsNCglSZW1vdGU6IEluc3RhbmNlLA0KCU1ldGhvZDogc3RyaW5nLA0KCUFyZ3M6IHRhYmxlLA0KCUlzUmVjZWl2ZTogYm9vbGVhbj8sDQoJTWV0YU1ldGhvZDogc3RyaW5nPywNCglPcmlnbmFsRnVuYzogKCguLi5hbnkpIC0+IC4uLmFueSk/LA0KCUNhbGxpbmdTY3JpcHQ6IEluc3RhbmNlPywNCglDYWxsaW5nRnVuY3Rpb246ICgoLi4uYW55KSAtPiAuLi5hbnkpPywNCglDbGFzc0RhdGE6IHRhYmxlPywNCglSZXR1cm5WYWx1ZXM6IHRhYmxlPywNCglSZW1vdGVEYXRhOiB0YWJsZT8sDQoJSWQ6IHN0cmluZywNCglTZWxlY3RhYmxlOiB0YWJsZSwNCglIZWFkZXJEYXRhOiB0YWJsZSwNCglWYWx1ZVN3YXBzOiB0YWJsZSwNCglUaW1lc3RhbXA6IG51bWJlciwNCglJc0V4cGxvaXQ6IGJvb2xlYW4NCn0NCg0KLS0vLyBDb21wYXRpYmlsaXR5DQpsb2NhbCBTZXRDbGlwYm9hcmQgPSBzZXRjbGlwYm9hcmQgb3IgdG9jbGlwYm9hcmQgb3Igc2V0X2NsaXBib2FyZA0KDQotLS8vIExpYnJhcmllcw0KbG9jYWwgUmVHdWkgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2RlcHRoc28vRGVhci1SZUd1aS9yZWZzL2hlYWRzL21haW4vUmVHdWkubHVhJykpKCkNCg0KLS0vLyBTZXJ2aWNlcw0KbG9jYWwgSW5zZXJ0U2VydmljZTogSW5zZXJ0U2VydmljZQ0KDQotLS8vIE1vZHVsZXMNCmxvY2FsIEZsYWdzDQpsb2NhbCBHZW5lcmF0aW9uDQpsb2NhbCBQcm9jZXNzDQpsb2NhbCBIb29rIA0KbG9jYWwgQ29uZmlnDQpsb2NhbCBDb21tdW5pY2F0aW9uDQpsb2NhbCBGaWxlcw0KDQpsb2NhbCBBY3RpdmVEYXRhID0gbmlsDQpsb2NhbCBSZW1vdGVzQ291bnQgPSAwDQoNCmxvY2FsIFRleHRGb250ID0gRm9udC5mcm9tRW51bShFbnVtLkZvbnQuQ29kZSkNCmxvY2FsIEZvbnRTdWNjZXNzID0gZmFsc2UNCg0KZnVuY3Rpb24gVWk6SW5pdChEYXRhKQ0KICAgIGxvY2FsIE1vZHVsZXMgPSBEYXRhLk1vZHVsZXMNCglsb2NhbCBTZXJ2aWNlcyA9IERhdGEuU2VydmljZXMNCg0KCS0tLy8gU2VydmljZXMNCglJbnNlcnRTZXJ2aWNlID0gU2VydmljZXMuSW5zZXJ0U2VydmljZQ0KDQoJLS0vLyBNb2R1bGVzDQoJRmxhZ3MgPSBNb2R1bGVzLkZsYWdzDQoJR2VuZXJhdGlvbiA9IE1vZHVsZXMuR2VuZXJhdGlvbg0KCVByb2Nlc3MgPSBNb2R1bGVzLlByb2Nlc3MNCglIb29rID0gTW9kdWxlcy5Ib29rDQoJQ29uZmlnID0gTW9kdWxlcy5Db25maWcNCglDb21tdW5pY2F0aW9uID0gTW9kdWxlcy5Db21tdW5pY2F0aW9uDQoJRmlsZXMgPSBNb2R1bGVzLkZpbGVzDQoNCgktLS8vIFJlR3VpDQoJc2VsZjpDaGVja1NjYWxlKCkNCglzZWxmOkxvYWRGb250KCkNCglzZWxmOkxvYWRSZUd1aSgpDQplbmQNCg0KZnVuY3Rpb24gVWk6Q2hlY2tTY2FsZSgpDQoJbG9jYWwgQmFzZUNvbmZpZyA9IHNlbGYuQmFzZUNvbmZpZw0KCWxvY2FsIFNjYWxlcyA9IHNlbGYuU2NhbGVzDQoNCglsb2NhbCBJc01vYmlsZSA9IFJlR3VpOklzTW9iaWxlRGV2aWNlKCkNCglsb2NhbCBEZXZpY2UgPSBJc01vYmlsZSBhbmQgIk1vYmlsZSIgb3IgIkRlc2t0b3AiDQoNCglCYXNlQ29uZmlnLlNpemUgPSBTY2FsZXNbRGV2aWNlXQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNldENsaXBib2FyZChDb250ZW50OiBzdHJpbmcpDQoJU2V0Q2xpcGJvYXJkKENvbnRlbnQpDQplbmQNCg0KZnVuY3Rpb24gVWk6VHVyblNlYXNvbmFsKFRleHQ6IHN0cmluZyk6IHN0cmluZw0KICAgIGxvY2FsIFNlYXNvbkxhYmVscyA9IHNlbGYuU2Vhc29uTGFiZWxzDQogICAgbG9jYWwgTW9udGggPSBvcy5kYXRlKCIlQiIpDQogICAgbG9jYWwgQmFzZSA9IFNlYXNvbkxhYmVsc1tNb250aF0NCg0KICAgIHJldHVybiBCYXNlOmZvcm1hdChUZXh0KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkxvYWRGb250KCkNCglsb2NhbCBGb250RmlsZSA9IHNlbGYuRm9udEpzb25GaWxlDQoNCgktLS8vIEdldCBGb250RmFjZSBBc3NldElkDQoJbG9jYWwgQXNzZXRJZCA9IEZpbGVzOkxvYWRDdXN0b21hc3NldChGb250RmlsZSkNCglpZiBub3QgQXNzZXRJZCB0aGVuIHJldHVybiBlbmQNCg0KCS0tLy8gQ3JlYXRlIGN1c3RvbSBGb250RmFjZQ0KCWxvY2FsIE5ld0ZvbnQgPSBGb250Lm5ldyhBc3NldElkKQ0KCVRleHRGb250ID0gTmV3Rm9udA0KCUZvbnRTdWNjZXNzID0gdHJ1ZQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNldEZvbnRGaWxlKEZvbnRGaWxlOiBzdHJpbmcpDQoJc2VsZi5Gb250SnNvbkZpbGUgPSBGb250RmlsZQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkZvbnRXYXNTdWNjZXNzZnVsKCkNCglpZiBGb250U3VjY2VzcyB0aGVuIHJldHVybiBlbmQNCg0KCS0tLy8gRXJyb3IgbWVzc2FnZQ0KCXNlbGY6U2hvd01vZGFsKHsNCgkJIlVuZm9ydHVuYXRlbHkgeW91ciBleGVjdXRvciB3YXMgdW5hYmxlIHRvIGRvd25sb2FkIHRoZSBmb250IGFuZCB0aGVyZWZvcmUgc3dpdGNoZWQgdG8gdGhlIERhcmsgdGhlbWUiLA0KCQkiXG5JZiB5b3Ugd291bGQgbGlrZSB0byB1c2UgdGhlIEltR3VpIHRoZW1lLCBcbnBsZWFzZSBkb3dubG9hZCB0aGUgZm9udCAoYXNzZXRzL1Byb2dneUNsZWFuLnR0ZikiLA0KCQkiYW5kIHB1dCBwdXQgaXQgaW4geW91ciB3b3Jrc3BhY2UgZm9sZGVyXG4oU2lnbWEgU3B5L2Fzc2V0cykiDQoJfSkNCmVuZA0KDQpmdW5jdGlvbiBVaTpMb2FkUmVHdWkoKQ0KCWxvY2FsIFRoZW1lQ29uZmlnID0gQ29uZmlnLlRoZW1lQ29uZmlnDQoJVGhlbWVDb25maWcuVGV4dEZvbnQgPSBUZXh0Rm9udA0KDQoJLS0vLyBSZUd1aQ0KCWxvY2FsIFByZWZhYnNJZCA9ICJyYnhhc3NldGlkOi8vIiAuLiBSZUd1aS5QcmVmYWJzSWQNCglSZUd1aTpEZWZpbmVUaGVtZSgiU2lnbWFTcHkiLCBUaGVtZUNvbmZpZykNCglSZUd1aTpJbml0KHsNCgkJUHJlZmFicyA9IEluc2VydFNlcnZpY2U6TG9hZExvY2FsQXNzZXQoUHJlZmFic0lkKQ0KCX0pDQplbmQNCg0KdHlwZSBDcmVhdGVCdXR0b25zID0gew0KCUJhc2U6IHRhYmxlLA0KCUJ1dHRvbnM6IHRhYmxlLA0KCU5vVGFibGU6IGJvb2xlYW4/DQp9DQpmdW5jdGlvbiBVaTpDcmVhdGVCdXR0b25zKFBhcmVudCwgRGF0YTogQ3JlYXRlQnV0dG9ucykNCglsb2NhbCBCYXNlID0gRGF0YS5CYXNlDQoJbG9jYWwgQnV0dG9ucyA9IERhdGEuQnV0dG9ucw0KCWxvY2FsIE5vVGFibGUgPSBEYXRhLk5vVGFibGUNCg0KCS0tLy8gQ3JlYXRlIHRhYmxlIGxheW91dA0KCWlmIG5vdCBOb1RhYmxlIHRoZW4NCgkJUGFyZW50ID0gUGFyZW50OlRhYmxlKHsNCgkJCU1heENvbHVtbnMgPSAzDQoJCX0pOk5leHRSb3coKQ0KCWVuZA0KDQoJLS0vLyBDcmVhdGUgYnV0dG9ucw0KCWZvciBfLCBCdXR0b24gaW4gbmV4dCwgQnV0dG9ucyBkbw0KCQlsb2NhbCBDb250YWluZXIgPSBQYXJlbnQNCgkJaWYgbm90IE5vVGFibGUgdGhlbg0KCQkJQ29udGFpbmVyID0gUGFyZW50Ok5leHRDb2x1bW4oKQ0KCQllbmQNCg0KCQlSZUd1aTpDaGVja0NvbmZpZyhCdXR0b24sIEJhc2UpDQoJCUNvbnRhaW5lcjpCdXR0b24oQnV0dG9uKQ0KCWVuZA0KZW5kDQoNCmZ1bmN0aW9uIFVpOkNyZWF0ZVdpbmRvdyhPdmVyd3JpdGVzOiB0YWJsZSkNCiAgICBsb2NhbCBCYXNlQ29uZmlnID0gc2VsZi5CYXNlQ29uZmlnDQoJbG9jYWwgQ29uZmlnID0gUHJvY2VzczpEZWVwQ2xvbmVUYWJsZShCYXNlQ29uZmlnKQ0KDQoJLS0vLyBNZXJnZSBvdmVyd3JpdGVzDQoJaWYgT3ZlcndyaXRlcyB0aGVuDQoJCU1lcmdlKENvbmZpZywgT3ZlcndyaXRlcykNCgllbmQNCgkNCgktLS8vIENyZWF0ZSBXaW5kb3cNCglsb2NhbCBXaW5kb3cgPSBSZUd1aTpXaW5kb3coQ29uZmlnKQ0KDQoJLS0vLyBTd2l0Y2ggdG8gRGFya1RoZW1lIGluc3RlYWQgb2YgdGhlIEltR3VpIHRoZW1lIGlmIHRoZSBmb250IGNhbm5vdCBiZSBsb2FkZWQNCglpZiBub3QgRm9udFN1Y2Nlc3MgdGhlbiANCgkJV2luZG93OlNldFRoZW1lKCJEYXJrVGhlbWUiKQ0KCWVuZA0KCQ0KCS0tLy8gQ3JlYXRlIFdpbmRvdw0KCXJldHVybiBXaW5kb3cNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVNYWluV2luZG93KCkNCglsb2NhbCBXaW5kb3cgPSBzZWxmOkNyZWF0ZVdpbmRvdygpDQoJc2VsZi5XaW5kb3cgPSBXaW5kb3cNCg0KCS0tLy8gQ2hlY2sgaWYgdGhlIGZvbnQgd2FzIHN1Y2Nlc3NmdWxseSBkb3dubG9hZGVkDQoJc2VsZjpGb250V2FzU3VjY2Vzc2Z1bCgpDQoJc2VsZjpBdXJhQ291bnRlclNlcnZpY2UoKQ0KDQoJLS0vLyBVaVZpc2libGUgZmxhZyBjYWxsYmFjaw0KCUZsYWdzOlNldEZsYWdDYWxsYmFjaygiVWlWaXNpYmxlIiwgZnVuY3Rpb24oc2VsZiwgVmlzaWJsZSkNCgkJV2luZG93OlNldFZpc2libGUoVmlzaWJsZSkNCgllbmQpDQoNCglyZXR1cm4gV2luZG93DQplbmQNCg0KZnVuY3Rpb24gVWk6U2hvd01vZGFsKExpbmVzOiB0YWJsZSkNCglsb2NhbCBXaW5kb3cgPSBzZWxmLldpbmRvdw0KCWxvY2FsIE1lc3NhZ2UgPSB0YWJsZS5jb25jYXQoTGluZXMsICJcbiIpDQoNCgktLS8vIE1vZGFsIFdpbmRvdw0KCWxvY2FsIE1vZGFsV2luZG93ID0gV2luZG93OlBvcHVwTW9kYWwoew0KCQlUaXRsZSA9ICJTaWdtYSBTcHkiDQoJfSkNCglNb2RhbFdpbmRvdzpMYWJlbCh7DQoJCVRleHQgPSBNZXNzYWdlLA0KCQlSaWNoVGV4dCA9IHRydWUsDQoJCVRleHRXcmFwcGVkID0gdHJ1ZQ0KCX0pDQoJTW9kYWxXaW5kb3c6QnV0dG9uKHsNCgkJVGV4dCA9ICJPa2F5IiwNCgkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQlNb2RhbFdpbmRvdzpDbG9zZVBvcHVwKCkNCgkJZW5kLA0KCX0pDQplbmQNCg0KZnVuY3Rpb24gVWk6U2hvd1Vuc3VwcG9ydGVkRXhlY3V0b3IoTmFtZTogc3RyaW5nKQ0KCVVpOlNob3dNb2RhbCh7DQoJCSJVbmZvcnR1bmF0ZWx5IFNpZ21hIFNweSBpcyBub3Qgc3VwcG9ydGVkIG9uIHlvdXIgZXhlY3V0b3IiLA0KCQkiVGhlIGJlc3QgZnJlZSBvcHRpb24gaXMgU3dpZnQgKGRpc2NvcmQuZ2cvZ2V0c3dpZnRnZykiLA0KCQlgXG5Zb3VyIGV4ZWN1dG9yOiB7TmFtZX1gDQoJfSkNCmVuZA0KDQpmdW5jdGlvbiBVaTpTaG93VW5zdXBwb3J0ZWQoRnVuY05hbWU6IHN0cmluZykNCglVaTpTaG93TW9kYWwoew0KCQkiVW5mb3J0dW5hdGVseSBTaWdtYSBTcHkgaXMgbm90IHN1cHBvcnRlZCBvbiB5b3VyIGV4ZWN1dG9yIiwNCgkJYFxuTWlzc2luZyBmdW5jdGlvbjoge0Z1bmNOYW1lfWANCgl9KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkNyZWF0ZU9wdGlvbnNGb3JEaWN0KFBhcmVudCwgRGljdDogdGFibGUsIENhbGxiYWNrKQ0KCWxvY2FsIE9wdGlvbnMgPSB7fQ0KDQoJLS0vLyBEaWN0b25hcnkgd3JhcA0KCWZvciBLZXksIFZhbHVlIGluIG5leHQsIERpY3QgZG8NCgkJT3B0aW9uc1tLZXldID0gew0KCQkJVmFsdWUgPSBWYWx1ZSwNCgkJCUxhYmVsID0gS2V5LA0KCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbihfLCBWYWx1ZSkNCgkJCQlEaWN0W0tleV0gPSBWYWx1ZQ0KDQoJCQkJLS0vLyBJbnZva2UgY2FsbGJhY2sNCgkJCQlpZiBub3QgQ2FsbGJhY2sgdGhlbiByZXR1cm4gZW5kDQoJCQkJQ2FsbGJhY2soKQ0KCQkJZW5kDQoJCX0NCgllbmQNCg0KCS0tLy8gQ3JlYXRlIGVsZW1lbnRzDQoJc2VsZjpDcmVhdGVFbGVtZW50cyhQYXJlbnQsIE9wdGlvbnMpDQplbmQNCg0KZnVuY3Rpb24gVWk6Q2hlY2tLZXliaW5kTGF5b3V0KENvbnRhaW5lciwgS2V5Q29kZTogRW51bS5LZXlDb2RlLCBDYWxsYmFjaykNCglpZiBub3QgS2V5Q29kZSB0aGVuIHJldHVybiBDb250YWluZXIgZW5kDQoNCgktLS8vIENyZWF0ZSBSb3cgbGF5b3V0DQoJQ29udGFpbmVyID0gQ29udGFpbmVyOlJvdyh7DQoJCUhvcml6b250YWxGbGV4ID0gRW51bS5VSUZsZXhBbGlnbm1lbnQuU3BhY2VCZXR3ZWVuDQoJfSkNCg0KCS0tLy8gQWRkIEtleWJpbmQgZWxlbWVudA0KCUNvbnRhaW5lcjpLZXliaW5kKHsNCgkJTGFiZWwgPSAiIiwNCgkJVmFsdWUgPSBLZXlDb2RlLA0KCQlMYXlvdXRPcmRlciA9IDIsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJLS0vLyBDaGVjayBpZiBrZXliaW5kcyBhcmUgZW5hYmxlZA0KCQkJbG9jYWwgRW5hYmxlZCA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiS2V5YmluZHNFbmFibGVkIikNCgkJCWlmIG5vdCBFbmFibGVkIHRoZW4gcmV0dXJuIGVuZA0KDQoJCQktLS8vIEludm9rZSBjYWxsYmFjaw0KCQkJQ2FsbGJhY2soKQ0KCQllbmQsDQoJfSkNCg0KCXJldHVybiBDb250YWluZXINCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVFbGVtZW50cyhQYXJlbnQsIE9wdGlvbnMpDQoJbG9jYWwgT3B0aW9uVHlwZXMgPSBzZWxmLk9wdGlvblR5cGVzDQoJDQoJLS0vLyBDcmVhdGUgdGFibGUgbGF5b3V0DQoJbG9jYWwgVGFibGUgPSBQYXJlbnQ6VGFibGUoew0KCQlNYXhDb2x1bW5zID0gMw0KCX0pOk5leHRSb3coKQ0KDQoJZm9yIE5hbWUsIERhdGEgaW4gT3B0aW9ucyBkbw0KCQlsb2NhbCBWYWx1ZSA9IERhdGEuVmFsdWUNCgkJbG9jYWwgVHlwZSA9IHR5cGVvZihWYWx1ZSkNCg0KCQktLS8vIEFkZCBtaXNzaW5nIHZhbHVlcyBpbnRvIG9wdGlvbnMgdGFibGUNCgkJUmVHdWk6Q2hlY2tDb25maWcoRGF0YSwgew0KCQkJQ2xhc3MgPSBPcHRpb25UeXBlc1tUeXBlXSwNCgkJCUxhYmVsID0gTmFtZSwNCgkJfSkNCgkJDQoJCS0tLy8gQ2hlY2sgaWYgYSBlbGVtZW50IHR5cGUgZXhpc3RzIGZvciB2YWx1ZSB0eXBlDQoJCWxvY2FsIENsYXNzID0gRGF0YS5DbGFzcw0KCQlhc3NlcnQoQ2xhc3MsIGBObyB7VHlwZX0gdHlwZSBleGlzdHMgZm9yIG9wdGlvbmApDQoNCgkJbG9jYWwgQ29udGFpbmVyID0gVGFibGU6TmV4dENvbHVtbigpDQoJCWxvY2FsIENoZWNrYm94ID0gbmlsDQoNCgkJLS0vLyBDaGVjayBmb3IgYSBrZXliaW5kIGxheW91dA0KCQlsb2NhbCBLZXliaW5kID0gRGF0YS5LZXliaW5kDQoJCUNvbnRhaW5lciA9IHNlbGY6Q2hlY2tLZXliaW5kTGF5b3V0KENvbnRhaW5lciwgS2V5YmluZCwgZnVuY3Rpb24oKQ0KCQkJQ2hlY2tib3g6VG9nZ2xlKCkNCgkJZW5kKQ0KCQkNCgkJLS0vLyBDcmVhdGUgY29sdW1uIGFuZCBlbGVtZW50DQoJCUNoZWNrYm94ID0gQ29udGFpbmVyW0NsYXNzXShDb250YWluZXIsIERhdGEpDQoJZW5kDQplbmQNCg0KLS0vLyBCb2lpaWkgd2hhdCBkaWQgeW91IHNheSBhYm91dCBTaWdtYSBTcHkg8J+SgPCfkoANCmZ1bmN0aW9uIFVpOkRpc3BsYXlBdXJhKCkNCiAgICBsb2NhbCBXaW5kb3cgPSBzZWxmLldpbmRvdw0KICAgIGxvY2FsIFJhbmQgPSBzZWxmLlJhbmRvbVNlZWQNCg0KCS0tLy8gQXVyYSAoYm9paWlpaSkNCiAgICBsb2NhbCBBVVJBID0gUmFuZDpOZXh0SW50ZWdlcigxLCA5OTk5OTk5KQ0KICAgIGxvY2FsIEFVUkFERUxBWSA9IFJhbmQ6TmV4dEludGVnZXIoMSwgNSkNCg0KCS0tLy8gVGl0bGUNCglsb2NhbCBUaXRsZSA9IGAgU2lnbWEgU3B5IC0gRGVwc28gfCBBVVJBOiB7QVVSQX0gYA0KCWxvY2FsIFNlYXNvbmFsID0gc2VsZjpUdXJuU2Vhc29uYWwoVGl0bGUpDQogICAgV2luZG93OlNldFRpdGxlKFNlYXNvbmFsKQ0KDQogICAgd2FpdChBVVJBREVMQVkpDQplbmQNCg0KZnVuY3Rpb24gVWk6QXVyYUNvdW50ZXJTZXJ2aWNlKCkNCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkNCiAgICAgICAgd2hpbGUgdHJ1ZSBkbw0KICAgICAgICAgICAgc2VsZjpEaXNwbGF5QXVyYSgpDQogICAgICAgIGVuZA0KICAgIGVuZCkNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVXaW5kb3dDb250ZW50KFdpbmRvdykNCiAgICAtLS8vIFdpbmRvdyBncm91cA0KICAgIGxvY2FsIExheW91dCA9IFdpbmRvdzpMaXN0KHsNCiAgICAgICAgVWlQYWRkaW5nID0gMiwNCiAgICAgICAgSG9yaXpvbnRhbEZsZXggPSBFbnVtLlVJRmxleEFsaWdubWVudC5GaWxsLA0KICAgICAgICBWZXJ0aWNhbEZsZXggPSBFbnVtLlVJRmxleEFsaWdubWVudC5GaWxsLA0KICAgICAgICBGaWxsRGlyZWN0aW9uID0gRW51bS5GaWxsRGlyZWN0aW9uLlZlcnRpY2FsLA0KICAgICAgICBGaWxsID0gdHJ1ZQ0KICAgIH0pDQoNCgktLS8vIFJlbW90ZXMgbGlzdA0KICAgIHNlbGYuUmVtb3Rlc0xpc3QgPSBMYXlvdXQ6Q2FudmFzKHsNCiAgICAgICAgU2Nyb2xsID0gdHJ1ZSwNCiAgICAgICAgVWlQYWRkaW5nID0gNSwNCiAgICAgICAgQXV0b21hdGljU2l6ZSA9IEVudW0uQXV0b21hdGljU2l6ZS5Ob25lLA0KICAgICAgICBGbGV4TW9kZSA9IEVudW0uVUlGbGV4TW9kZS5Ob25lLA0KICAgICAgICBTaXplID0gVURpbTIubmV3KDAsIDEzMCwgMSwgMCkNCiAgICB9KQ0KDQoJLS0vLyBUYWIgYm94DQoJbG9jYWwgSW5mb1NlbGVjdG9yID0gTGF5b3V0OlRhYlNlbGVjdG9yKHsNCiAgICAgICAgTm9BbmltYXRpb24gPSB0cnVlLA0KICAgICAgICBTaXplID0gVURpbTIubmV3KDEsIC0xMzAsIDAuNCwgMCksDQogICAgfSkNCg0KCXNlbGYuSW5mb1NlbGVjdG9yID0gSW5mb1NlbGVjdG9yDQoJc2VsZi5DYW52YXNMYXlvdXQgPSBMYXlvdXQNCg0KCS0tLy8gTWFrZSB0YWJzDQoJc2VsZjpNYWtlRWRpdG9yVGFiKEluZm9TZWxlY3RvcikNCglzZWxmOk1ha2VPcHRpb25zVGFiKEluZm9TZWxlY3RvcikNCmVuZA0KDQpmdW5jdGlvbiBVaTpNYWtlT3B0aW9uc1RhYihJbmZvU2VsZWN0b3IpDQoJLS0vLyBUYWJTZWxlY3Rvcg0KCWxvY2FsIE9wdGlvbnNUYWIgPSBJbmZvU2VsZWN0b3I6Q3JlYXRlVGFiKHsNCgkJTmFtZSA9ICJPcHRpb25zIg0KCX0pDQoNCgktLS8vIEFkZCBnbG9iYWwgb3B0aW9ucw0KCU9wdGlvbnNUYWI6U2VwYXJhdG9yKHtUZXh0PSJMb2dzIn0pDQoJc2VsZjpDcmVhdGVCdXR0b25zKE9wdGlvbnNUYWIsIHsNCgkJQmFzZSA9IHsNCgkJCVNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjApLA0KCQkJQXV0b21hdGljU2l6ZSA9IEVudW0uQXV0b21hdGljU2l6ZS5ZLA0KCQl9LA0KCQlCdXR0b25zID0gew0KCQkJew0KCQkJCVRleHQgPSAiQ2xlYXIgbG9ncyIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIFRhYiA9IEFjdGl2ZURhdGEgYW5kIEFjdGl2ZURhdGEuVGFiIG9yIG5pbA0KDQoJCQkJCS0tLy8gUmVtb3ZlIHRoZSBSZW1vdGUgdGFiDQoJCQkJCWlmIFRhYiB0aGVuDQoJCQkJCQlJbmZvU2VsZWN0b3I6UmVtb3ZlVGFiKFRhYikNCgkJCQkJZW5kDQoNCgkJCQkJLS0vLyBDbGVhciBhbGwgbG9nIGVsZW1lbnRzDQoJCQkJCUFjdGl2ZURhdGEgPSBuaWwNCgkJCQkJc2VsZjpDbGVhckxvZ3MoKQ0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJDbGVhciBibG9ja3MiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlQcm9jZXNzOlVwZGF0ZUFsbFJlbW90ZURhdGEoIkJsb2NrZWQiLCBmYWxzZSkNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiQ2xlYXIgZXhjbHVkZXMiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlQcm9jZXNzOlVwZGF0ZUFsbFJlbW90ZURhdGEoIkV4Y2x1ZGVkIiwgZmFsc2UpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkNvcHkgRGlzY29yZCIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCXNlbGY6U2V0Q2xpcGJvYXJkKCJodHRwczovL2Rpc2NvcmQuZ2cvczluZ21VRFdnYiIpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkNvcHkgR2l0aHViIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJc2VsZjpTZXRDbGlwYm9hcmQoImh0dHBzOi8vZ2l0aHViLmNvbS9kZXB0aHNvL1NpZ21hLVNweSIpDQoJCQkJZW5kLA0KCQkJfQ0KCQl9DQoJfSkNCg0KCS0tLy8gRmxhZyBvcHRpb25zDQoJT3B0aW9uc1RhYjpTZXBhcmF0b3Ioe1RleHQ9IlNldHRpbmdzIn0pDQoJc2VsZjpDcmVhdGVFbGVtZW50cyhPcHRpb25zVGFiLCBGbGFnczpHZXRGbGFncygpKQ0KDQoJc2VsZjpBZGREZXRhaWxzU2VjdGlvbihPcHRpb25zVGFiKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkFkZERldGFpbHNTZWN0aW9uKE9wdGlvbnNUYWIpDQoJT3B0aW9uc1RhYjpTZXBhcmF0b3Ioe1RleHQ9IkluZm9ybWF0aW9uIn0pDQoJT3B0aW9uc1RhYjpCdWxsZXRUZXh0KHsNCgkJUm93cyA9IHsNCgkJCSJTaWdtYSBzcHkgLSBXcml0dGVuIGJ5IGRlcHNvISIsDQoJCQkiTGlicmFyaWVzOiBSb2Jsb3gtUGFyc2VyLCBEZWFyLVJlR3VpIiwNCgkJCSJUaGFuayB5b3UgdG8gc3luIGZvciB5b3VyIHN1Z2dlc3Rpb25zIGFuZCB0ZXN0aW5nIg0KCQl9DQoJfSkNCmVuZA0KDQpsb2NhbCBmdW5jdGlvbiBNYWtlQWN0aXZlRGF0YUNhbGxiYWNrKE5hbWU6IHN0cmluZykNCglyZXR1cm4gZnVuY3Rpb24oLi4uKQ0KCQlpZiBub3QgQWN0aXZlRGF0YSB0aGVuIHJldHVybiBlbmQNCgkJcmV0dXJuIEFjdGl2ZURhdGFbTmFtZV0oQWN0aXZlRGF0YSwgLi4uKQ0KCWVuZA0KZW5kDQoNCmZ1bmN0aW9uIFVpOk1ha2VFZGl0b3JUYWIoSW5mb1NlbGVjdG9yKQ0KCWxvY2FsIERlZmF1bHQgPSBzZWxmLkRlZmF1bHRFZGl0b3JDb250ZW50DQoJbG9jYWwgV2luZG93ID0gc2VsZi5XaW5kb3cNCg0KCWxvY2FsIFN5bnRheENvbG9ycyA9IENvbmZpZy5TeW50YXhDb2xvcnMNCg0KCS0tLy8gQ3JlYXRlIHRhYg0KCWxvY2FsIEVkaXRvclRhYiA9IEluZm9TZWxlY3RvcjpDcmVhdGVUYWIoew0KCQlOYW1lID0gIkVkaXRvciINCgl9KQ0KDQoJLS0vLyBJREUNCglsb2NhbCBDb2RlRWRpdG9yID0gRWRpdG9yVGFiOkNvZGVFZGl0b3Ioew0KCQlGaWxsID0gdHJ1ZSwNCgkJRWRpdGFibGUgPSB0cnVlLA0KCQlGb250U2l6ZSA9IDEzLA0KCQlDb2xvcnMgPSBTeW50YXhDb2xvcnMsDQoJCUZvbnRGYWNlID0gVGV4dEZvbnQsDQoJCVRleHQgPSBEZWZhdWx0DQoJfSkNCg0KCS0tLy8gQ29uZmlndXJlIElERSBmcmFtZQ0KCVJlR3VpOkFwcGx5RmxhZ3Moew0KCQlPYmplY3QgPSBDb2RlRWRpdG9yLkd1aSwNCgkJV2luZG93Q2xhc3MgPSBXaW5kb3csDQoJCUNsYXNzID0gew0KCQkJLS1Cb3JkZXIgPSB0cnVlLA0KCQkJRmlsbCA9IHRydWUsDQoJCQlBY3RpdmUgPSB0cnVlLA0KCQkJUGFyZW50ID0gRWRpdG9yVGFiOkdldE9iamVjdCgpLA0KCQkJQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsDQoJCX0NCgl9KQ0KDQoJLS0vLyBCdXR0b25zDQoJbG9jYWwgQnV0dG9uc1JvdyA9IEVkaXRvclRhYjpSb3coKQ0KCXNlbGY6Q3JlYXRlQnV0dG9ucyhCdXR0b25zUm93LCB7DQoJCUJhc2UgPSB7fSwNCgkJTm9UYWJsZSA9IHRydWUsDQoJCUJ1dHRvbnMgPSB7DQoJCQl7DQoJCQkJVGV4dCA9ICJDb3B5IiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJbG9jYWwgU2NyaXB0ID0gQ29kZUVkaXRvcjpHZXRUZXh0KCkNCgkJCQkJc2VsZjpTZXRDbGlwYm9hcmQoU2NyaXB0KQ0KCQkJCWVuZA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIlJ1biIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIFNjcmlwdCA9IENvZGVFZGl0b3I6R2V0VGV4dCgpDQoJCQkJCWxvYWRzdHJpbmcoU2NyaXB0LCAiU2lnbWFTcHktVVNFUlNDUklQVCIpKCkNCgkJCQllbmQNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJHZXQgcmV0dXJuIiwNCgkJCQlDYWxsYmFjayA9IE1ha2VBY3RpdmVEYXRhQ2FsbGJhY2soIkdldFJldHVybiIpDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiU2NyaXB0IiwNCgkJCQlDYWxsYmFjayA9IE1ha2VBY3RpdmVEYXRhQ2FsbGJhY2soIlNjcmlwdE9wdGlvbnMiKQ0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkJ1aWxkIiwNCgkJCQlDYWxsYmFjayA9IE1ha2VBY3RpdmVEYXRhQ2FsbGJhY2soIkJ1aWxkU2NyaXB0IikNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJQb3Atb3V0IiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJbG9jYWwgU2NyaXB0ID0gQ29kZUVkaXRvcjpHZXRUZXh0KCkNCgkJCQkJbG9jYWwgVGlsZSA9IEFjdGl2ZURhdGEgYW5kIEFjdGl2ZURhdGEuVGFzayBvciAiU2lnbWEgU3B5Ig0KCQkJCQlzZWxmOk1ha2VFZGl0b3JQb3BvdXRXaW5kb3coU2NyaXB0LCB7DQoJCQkJCQlUaXRsZSA9IFRpbGUNCgkJCQkJfSkNCgkJCQllbmQNCgkJCX0sDQoJCX0NCgl9KQ0KCQ0KCXNlbGYuQ29kZUVkaXRvciA9IENvZGVFZGl0b3INCmVuZA0KDQpmdW5jdGlvbiBVaTpTaG91bGRGb2N1cyhUYWIpOiBib29sZWFuDQoJbG9jYWwgSW5mb1NlbGVjdG9yID0gc2VsZi5JbmZvU2VsZWN0b3INCglsb2NhbCBBY3RpdmVUYWIgPSBJbmZvU2VsZWN0b3IuQWN0aXZlVGFiDQoNCgktLS8vIElmIHRoZXJlIGlzIGFuIGVtcHR5IHRhYg0KCWlmIG5vdCBBY3RpdmVUYWIgdGhlbg0KCQlyZXR1cm4gdHJ1ZQ0KCWVuZA0KDQoJcmV0dXJuIEluZm9TZWxlY3RvcjpDb21wYXJlVGFicyhBY3RpdmVUYWIsIFRhYikNCmVuZA0KDQpmdW5jdGlvbiBVaTpNYWtlRWRpdG9yUG9wb3V0V2luZG93KENvbnRlbnQ6IHN0cmluZywgV2luZG93Q29uZmlnOiB0YWJsZSkNCglsb2NhbCBXaW5kb3cgPSBzZWxmOkNyZWF0ZVdpbmRvdyhXaW5kb3dDb25maWcpDQoJbG9jYWwgQ29kZUVkaXRvciA9IFdpbmRvdzpDb2RlRWRpdG9yKHsNCgkJVGV4dCA9IENvbnRlbnQsDQoJCUVkaXRhYmxlID0gdHJ1ZSwNCgkJRm9udFNpemUgPSAxMywNCgkJQ29sb3JzID0gU3ludGF4Q29sb3JzLA0KCQlGb250RmFjZSA9IFRleHRGb250DQoJfSkNCg0KCVdpbmRvdzpDZW50ZXIoKQ0KCXJldHVybiBDb2RlRWRpdG9yDQplbmQNCg0KdHlwZSBNZW51T3B0aW9ucyA9IHsNCglbc3RyaW5nXTogKEd1aUJ1dHRvbiwgLi4uYW55KSAtPiBuaWwNCn0NCmZ1bmN0aW9uIFVpOk1ha2VCdXR0b25NZW51KEJ1dHRvbjogSW5zdGFuY2UsIFVucGFjazogdGFibGUsIE9wdGlvbnM6IE1lbnVPcHRpb25zKQ0KCWxvY2FsIFdpbmRvdyA9IHNlbGYuV2luZG93DQoJbG9jYWwgUG9wdXAgPSBXaW5kb3c6UG9wdXBDYW52YXMoew0KCQlSZWxhdGl2ZVRvID0gQnV0dG9uLA0KCQlNYXhTaXplWCA9IDUwMCwNCgl9KQ0KDQoJLS0vLyBDcmVhdGUgU2VsZWN0YWJsZXMgZm9yIHN0cmluZywgZnVuY3Rpb24NCglmb3IgTmFtZSwgRnVuYyBpbiBPcHRpb25zIGRvDQoJCSBQb3B1cDpTZWxlY3RhYmxlKHsNCgkJCVRleHQgPSBOYW1lLA0KCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJRnVuYyhQcm9jZXNzOlVucGFjayhVbnBhY2spKQ0KCQkJZW5kLA0KCQl9KQ0KCWVuZA0KZW5kDQoNCmZ1bmN0aW9uIFVpOlJlbW92ZVByZXZpb3VzVGFiKFRpdGxlOiBzdHJpbmcpOiBib29sZWFuDQoJLS0vLyBObyBwcmV2aW91cyB0YWJzDQoJaWYgbm90IEFjdGl2ZURhdGEgdGhlbiANCgkJcmV0dXJuIGZhbHNlIA0KCWVuZA0KDQoJLS0vLyBUYWJTZWxlY3Rvcg0KCWxvY2FsIEluZm9TZWxlY3RvciA9IHNlbGYuSW5mb1NlbGVjdG9yDQoNCgktLS8vIFByZXZpb3VzIGVsZW1lbnRzDQoJbG9jYWwgUHJldmlvdXNUYWIgPSBBY3RpdmVEYXRhLlRhYg0KCWxvY2FsIFByZXZpb3VzU2VsZWN0YWJsZSA9IEFjdGl2ZURhdGEuU2VsZWN0YWJsZQ0KDQoJLS0vLyBSZW1vdmUgcHJldmlvdXMgdGFiIGFuZCBzZXQgc2VsZWN0YWJsZSBmb2N1cw0KCWxvY2FsIFRhYkZvY3VzZWQgPSBzZWxmOlNob3VsZEZvY3VzKFByZXZpb3VzVGFiKQ0KCUluZm9TZWxlY3RvcjpSZW1vdmVUYWIoUHJldmlvdXNUYWIpDQoJUHJldmlvdXNTZWxlY3RhYmxlOlNldFNlbGVjdGVkKGZhbHNlKQ0KDQoJLS0vLyBDcmVhdGUgbmV3IHRhYg0KCXJldHVybiBUYWJGb2N1c2VkDQplbmQNCg0KZnVuY3Rpb24gVWk6U2V0Rm9jdXNlZFJlbW90ZShEYXRhKQ0KCS0tLy8gVW5wYWNrIHJlbW90ZSBkYXRhDQoJbG9jYWwgUmVtb3RlID0gRGF0YS5SZW1vdGUNCglsb2NhbCBNZXRob2QgPSBEYXRhLk1ldGhvZA0KCWxvY2FsIElzUmVjZWl2ZSA9IERhdGEuSXNSZWNlaXZlDQoJbG9jYWwgU2NyaXB0ID0gRGF0YS5DYWxsaW5nU2NyaXB0DQoJbG9jYWwgU291cmNlU2NyaXB0ID0gRGF0YS5Tb3VyY2VTY3JpcHQNCglsb2NhbCBDbGFzc0RhdGEgPSBEYXRhLkNsYXNzRGF0YQ0KCWxvY2FsIEhlYWRlckRhdGEgPSBEYXRhLkhlYWRlckRhdGENCglsb2NhbCBWYWx1ZVN3YXBzID0gRGF0YS5WYWx1ZVN3YXBzDQoJbG9jYWwgQXJncyA9IERhdGEuQXJncw0KCWxvY2FsIElkID0gRGF0YS5JZA0KDQoJLS0vLyBGbGFncw0KCWxvY2FsIFRhYmxlQXJncyA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiVGFibGVBcmdzIikNCglsb2NhbCBOb1ZhcmlhYmxlcyA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiTm9WYXJpYWJsZXMiKQ0KDQoJLS0vLyBVbnBhY2sgaW5mbw0KCWxvY2FsIFJlbW90ZURhdGEgPSBQcm9jZXNzOkdldFJlbW90ZURhdGEoSWQpDQoJbG9jYWwgSXNSZW1vdGVGdW5jdGlvbiA9IENsYXNzRGF0YS5Jc1JlbW90ZUZ1bmN0aW9uDQoNCgktLS8vIFVJIGRhdGENCglsb2NhbCBDb2RlRWRpdG9yID0gc2VsZi5Db2RlRWRpdG9yDQoJbG9jYWwgVG9EaXNwbGF5ID0gc2VsZi5EaXNwbGF5UmVtb3RlSW5mbw0KCWxvY2FsIEluZm9TZWxlY3RvciA9IHNlbGYuSW5mb1NlbGVjdG9yDQoNCglsb2NhbCBUYWJGb2N1c2VkID0gc2VsZjpSZW1vdmVQcmV2aW91c1RhYigpDQoJbG9jYWwgVGFiID0gSW5mb1NlbGVjdG9yOkNyZWF0ZVRhYih7DQoJCU5hbWUgPSBzZWxmOkZpbHRlck5hbWUoYFJlbW90ZToge1JlbW90ZX1gLCA1MCksDQoJCUZvY3VzZWQgPSBUYWJGb2N1c2VkDQoJfSkNCg0KCS0tLy8gQ3JlYXRlIG5ldyBwYXJzZXINCglsb2NhbCBNb2R1bGUgPSBHZW5lcmF0aW9uOk5ld1BhcnNlcih7DQoJCU5vVmFyaWFibGVzID0gTm9WYXJpYWJsZXMNCgl9KQ0KCWxvY2FsIFBhcnNlciA9IE1vZHVsZS5QYXJzZXINCglsb2NhbCBGb3JtYXR0ZXIgPSBNb2R1bGUuRm9ybWF0dGVyDQoJRm9ybWF0dGVyOlNldFZhbHVlU3dhcHMoVmFsdWVTd2FwcykNCg0KCS0tLy8gU2V0IHRoaXMgbG9nIHRvIGJlIHNlbGVjdGVkDQoJQWN0aXZlRGF0YSA9IERhdGENCglEYXRhLlRhYiA9IFRhYg0KCURhdGEuU2VsZWN0YWJsZTpTZXRTZWxlY3RlZCh0cnVlKQ0KDQoJbG9jYWwgZnVuY3Rpb24gU2V0SURFVGV4dChDb250ZW50OiBzdHJpbmcsIFRhc2s6IHN0cmluZykNCgkJRGF0YS5UYXNrID0gVGFzayBvciAiU2lnbWEgU3B5Ig0KCQlDb2RlRWRpdG9yOlNldFRleHQoQ29udGVudCkNCgllbmQNCglsb2NhbCBmdW5jdGlvbiBEYXRhQ29ubmVjdGlvbihOYW1lLCAuLi4pDQoJCWxvY2FsIEFyZ3MgPSB7Li4ufQ0KCQlyZXR1cm4gZnVuY3Rpb24oKQ0KCQkJcmV0dXJuIERhdGFbTmFtZV0oRGF0YSwgUHJvY2VzczpVbnBhY2soQXJncykpDQoJCWVuZA0KCWVuZA0KDQoJLS0vLyBGdW5jdGlvbnMNCglmdW5jdGlvbiBEYXRhOlNjcmlwdE9wdGlvbnMoQnV0dG9uOiBHdWlCdXR0b24pDQoJCVVpOk1ha2VCdXR0b25NZW51KEJ1dHRvbiwge3NlbGZ9LCB7DQoJCQlbIkNhbGxlciBJbmZvIl0gPSBEYXRhQ29ubmVjdGlvbigiR2VuZXJhdGVJbmZvIiksDQoJCQlbIkRlY29tcGlsZSJdID0gRGF0YUNvbm5lY3Rpb24oIkRlY29tcGlsZSIsICJTb3VyY2VTY3JpcHQiKSwNCgkJCVsiRGVjb21waWxlIENhbGxpbmciXSA9IERhdGFDb25uZWN0aW9uKCJEZWNvbXBpbGUiLCAiQ2FsbGluZ1NjcmlwdCIpDQoJCX0pDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpCdWlsZFNjcmlwdChCdXR0b246IEd1aUJ1dHRvbikNCgkJVWk6TWFrZUJ1dHRvbk1lbnUoQnV0dG9uLCB7c2VsZn0sIHsNCgkJCVsiQ2FsbCBSZW1vdGUiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIlJlbW90ZSIpLA0KCQkJWyJCbG9jayBSZW1vdGUiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIkJsb2NrIiksDQoJCQlbIlJlcGVhdCBGb3IiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIlJlcGVhdCIpLA0KCQkJWyJTcGFtIFJlbW90ZSJdID0gRGF0YUNvbm5lY3Rpb24oIk1ha2VTY3JpcHQiLCAiU3BhbSIpDQoJCX0pDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpNYWtlU2NyaXB0KFNjcmlwdFR5cGU6IHN0cmluZykNCgkJbG9jYWwgU2NyaXB0ID0gR2VuZXJhdGlvbjpSZW1vdGVTY3JpcHQoTW9kdWxlLCBzZWxmLCBTY3JpcHRUeXBlKQ0KCQlTZXRJREVUZXh0KFNjcmlwdCwgYEVkaXRpbmc6IHtSZW1vdGV9Lmx1YWApDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpSZXBlYXRDYWxsKCkNCgkJbG9jYWwgU2lnbmFsID0gSG9vazpJbmRleChSZW1vdGUsIE1ldGhvZCkNCg0KCQlpZiBJc1JlY2VpdmUgdGhlbg0KCQkJZmlyZXNpZ25hbChTaWduYWwsIFByb2Nlc3M6VW5wYWNrKEFyZ3MpKQ0KCQllbHNlDQoJCQlTaWduYWwoUmVtb3RlLCBQcm9jZXNzOlVucGFjayhBcmdzKSkNCgkJZW5kDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpHZXRSZXR1cm4oKQ0KCQlsb2NhbCBSZXR1cm5WYWx1ZXMgPSBzZWxmLlJldHVyblZhbHVlcw0KDQoJCWlmIG5vdCBJc1JlbW90ZUZ1bmN0aW9uIHRoZW4NCgkJCVNldElERVRleHQoIi0tIFJlbW90ZSBpcyBub3QgYSBmdW5jdGlvbiBib3pvICgtOTk5OTk5OSBBVVJBKSIpDQoJCQlyZXR1cm4NCgkJZW5kDQoJCWlmIG5vdCBSZXR1cm5WYWx1ZXMgdGhlbg0KCQkJU2V0SURFVGV4dCgiLS0gTm8gcmV0dXJuIHZhbHVlcyAoLTk5OTk5OTkgQVVSQSkiKQ0KCQkJcmV0dXJuDQoJCWVuZA0KDQoJCS0tLy8gR2VuZXJhdGUgc2NyaXB0DQoJCWxvY2FsIFNjcmlwdCA9IEdlbmVyYXRpb246VGFibGVTY3JpcHQoTW9kdWxlLCBSZXR1cm5WYWx1ZXMpDQoJCVNldElERVRleHQoU2NyaXB0LCBgUmV0dXJuIFZhbHVlcyBmb3I6IHtSZW1vdGV9YCkNCgllbmQNCglmdW5jdGlvbiBEYXRhOkdlbmVyYXRlSW5mbygpDQoJCS0tLy8gUmVqZWN0IGNsaWVudCBldmVudHMNCgkJaWYgSXNSZWNlaXZlIHRoZW4gDQoJCQlsb2NhbCBTY3JpcHQgPSAiLS0gQm9paWlpaSB3aGF0IGRpZCB5b3Ugc2F5IGFib3V0IElzUmVjZWl2ZSAoLTk5OTk5OTkgQVVSQSlcbiINCgkJCVNjcmlwdCAuLj0gIlxuLS0gVm9pY2UgbWVzc2FnZTog4pa2IC7EsWzEscSxbMSxxLFsxLHEsWzEscSxbMSxxLFsxLEuIDA6NjlcbiINCg0KCQkJU2V0SURFVGV4dChTY3JpcHQpDQoJCQlyZXR1cm4gDQoJCWVuZA0KDQoJCS0tLy8gR2VuZXJhdGUgc2NyaXB0DQoJCWxvY2FsIFNjcmlwdCA9IEdlbmVyYXRpb246QWR2YW5jZWRJbmZvKE1vZHVsZSwgc2VsZikNCgkJU2V0SURFVGV4dChTY3JpcHQsIGBBZHZhbmNlZCBJbmZvIGZvcjoge1JlbW90ZX1gKQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6RGVjb21waWxlKFdoaWNoU2NyaXB0OiBzdHJpbmcpDQoJCWxvY2FsIFRvRGVjb21waWxlID0gRGF0YVtXaGljaFNjcmlwdF0NCg0KCQktLS8vIFJlamVjdCBjbGllbnQgZXZlbnRzDQoJCWlmIElzUmVjZWl2ZSB0aGVuIA0KCQkJU2V0SURFVGV4dCgiLS0gQm9paWlpaSB3aGF0IGRpZCB5b3Ugc2F5IGFib3V0IElzUmVjZWl2ZSAoLTk5OTk5OTkgQVVSQSkiKQ0KCQkJcmV0dXJuIA0KCQllbmQNCg0KCQktLS8vIENoZWNrIGlmIHNjcmlwdCBleGlzdHMNCgkJaWYgbm90IFNjcmlwdCB0aGVuIA0KCQkJU2V0SURFVGV4dCgiLS1TY3JpcHQgaXMgbWlzc2luZyAoLTk5OTk5OTkgQVVSQSkiKQ0KCQkJcmV0dXJuDQoJCWVuZA0KDQoJCVNldElERVRleHQoIi0tRGVjb21waWxpbmcuLi4gKzk5OTk5OTkgQVVSQSAobWFuZ28gcGhvbmspIikNCg0KCQktLS8vIERlY29tcGlsZSBzY3JpcHQNCgkJbG9jYWwgRGVjb21waWxlZCwgSXNFcnJvciA9IFByb2Nlc3M6RGVjb21waWxlKFRvRGVjb21waWxlKQ0KCQlsb2NhbCBIZWFkZXIgPSAiLS1CT09JSUlJIFRISVMgSVMgU08gVFVGRiBGTElQUFkgU0tJQklESSBBVVJBIChTSUdNQSBTUFkpIg0KDQoJCS0tLy8gQWRkIGhlYWRlciBmb3Igc3VjY2Vzc2Z1bCBkZWNvbXBpbGF0aW9ucw0KCQlpZiBub3QgSXNFcnJvciB0aGVuDQoJCQlEZWNvbXBpbGVkID0gYHtIZWFkZXJ9XG57RGVjb21waWxlZH1gDQoJCWVuZA0KDQoJCVNldElERVRleHQoRGVjb21waWxlZCwgYFZpZXdpbmc6IHtUb0RlY29tcGlsZX0ubHVhYCkNCgllbmQNCgkNCgktLS8vIFJlbW90ZU9wdGlvbnMNCglzZWxmOkNyZWF0ZU9wdGlvbnNGb3JEaWN0KFRhYiwgUmVtb3RlRGF0YSwgZnVuY3Rpb24oKQ0KCQlQcm9jZXNzOlVwZGF0ZVJlbW90ZURhdGEoSWQsIFJlbW90ZURhdGEpDQoJZW5kKQ0KDQoJLS0vLyBJbnN0YW5jZSBvcHRpb25zDQoJc2VsZjpDcmVhdGVCdXR0b25zKFRhYiwgew0KCQlCYXNlID0gew0KCQkJU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyMCksDQoJCQlBdXRvbWF0aWNTaXplID0gRW51bS5BdXRvbWF0aWNTaXplLlksDQoJCX0sDQoJCUJ1dHRvbnMgPSB7DQoJCQl7DQoJCQkJVGV4dCA9ICJDb3B5IHNjcmlwdCBwYXRoIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJU2V0Q2xpcGJvYXJkKFBhcnNlcjpNYWtlUGF0aFN0cmluZyh7DQoJCQkJCQlPYmplY3QgPSBTY3JpcHQsDQoJCQkJCQlOb1ZhcmlhYmxlcyA9IHRydWUNCgkJCQkJfSkpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkNvcHkgcmVtb3RlIHBhdGgiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlTZXRDbGlwYm9hcmQoUGFyc2VyOk1ha2VQYXRoU3RyaW5nKHsNCgkJCQkJCU9iamVjdCA9IFJlbW90ZSwNCgkJCQkJCU5vVmFyaWFibGVzID0gdHJ1ZQ0KCQkJCQl9KSkNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiUmVtb3ZlIGxvZyIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCUluZm9TZWxlY3RvcjpSZW1vdmVUYWIoVGFiKQ0KCQkJCQlEYXRhLlNlbGVjdGFibGU6UmVtb3ZlKCkNCgkJCQkJSGVhZGVyRGF0YTpSZW1vdmUoKQ0KCQkJCQlBY3RpdmVEYXRhID0gbmlsDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkR1bXAgbG9ncyIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIExvZ3MgPSBIZWFkZXJEYXRhLkVudHJpZXMNCgkJCQkJbG9jYWwgRmlsZVBhdGggPSBHZW5lcmF0aW9uOkR1bXBMb2dzKExvZ3MpDQoJCQkJCXNlbGY6U2hvd01vZGFsKHsiU2F2ZWQgZHVtcCB0byIsIEZpbGVQYXRofSkNCgkJCQllbmQsDQoJCQl9DQoJCX0NCgl9KQ0KDQoJLS0vLyBSZW1vdGUgaW5mb3JtYXRpb24NCglsb2NhbCBSb3dzID0geyJOYW1lIiwgIlZhbHVlIn0NCglsb2NhbCBEYXRhVGFibGUgPSBUYWI6VGFibGUoew0KCQlCb3JkZXIgPSB0cnVlLA0KCQlSb3dCYWNrZ3JvdW5kID0gdHJ1ZSwNCgkJTWF4Q29sdW1ucyA9IDINCgl9KQ0KDQoJLS0vLyBUYWJsZSBoZWFkZXJzDQoJbG9jYWwgSGVhZGVyUm93ID0gRGF0YVRhYmxlOkhlYWRlclJvdygpDQoJZm9yIF8sIENhdGFnb3J5IGluIFJvd3MgZG8NCgkJbG9jYWwgQ29sdW1uID0gSGVhZGVyUm93Ok5leHRDb2x1bW4oKQ0KCQlDb2x1bW46TGFiZWwoe1RleHQ9Q2F0YWdvcnl9KQ0KCWVuZA0KDQoJLS0vLyBUYWJsZSBsYXlvdXQNCglmb3IgUm93SW5kZXgsIE5hbWUgaW4gVG9EaXNwbGF5IGRvDQoJCWxvY2FsIFJvdyA9IERhdGFUYWJsZTpSb3coKQ0KCQkNCgkJLS0vLyBDcmVhdGUgQ29sdW1ucw0KCQlmb3IgQ291bnQsIENhdGFnb3J5IGluIFJvd3MgZG8NCgkJCWxvY2FsIENvbHVtbiA9IFJvdzpOZXh0Q29sdW1uKCkNCgkJCQ0KCQkJLS0vLyBWYWx1ZSB0ZXh0DQoJCQlsb2NhbCBWYWx1ZSA9IENhdGFnb3J5ID09ICJOYW1lIiBhbmQgTmFtZSBvciBEYXRhW05hbWVdDQoJCQlpZiBub3QgVmFsdWUgdGhlbiBjb250aW51ZSBlbmQNCg0KCQkJQ29sdW1uOkxhYmVsKHtUZXh0PWB7VmFsdWV9YH0pDQoJCWVuZA0KCWVuZA0KCQ0KCS0tLy8gQXJndW1lbnRzIHRhYmxlIHNjcmlwdA0KCWlmIFRhYmxlQXJncyB0aGVuDQoJCWxvY2FsIFBhcnNlZCA9IEdlbmVyYXRpb246VGFibGVTY3JpcHQoTW9kdWxlLCBBcmdzKQ0KCQlTZXRJREVUZXh0KFBhcnNlZCkNCgkJcmV0dXJuDQoJZW5kDQoNCgktLS8vIFJlbW90ZSBjYWxsIHNjcmlwdA0KCURhdGE6TWFrZVNjcmlwdCgiUmVtb3RlIikNCmVuZA0KDQpmdW5jdGlvbiBVaTpHZXRSZW1vdGVIZWFkZXIoRGF0YTogTG9nKQ0KCWxvY2FsIExvZ0xpbWl0ID0gc2VsZi5Mb2dMaW1pdA0KCWxvY2FsIExvZ3MgPSBzZWxmLkxvZ3MNCglsb2NhbCBSZW1vdGVzTGlzdCA9IHNlbGYuUmVtb3Rlc0xpc3QNCg0KCS0tLy8gUmVtb3RlIGluZm8NCglsb2NhbCBJZCA9IERhdGEuSWQNCglsb2NhbCBSZW1vdGUgPSBEYXRhLlJlbW90ZQ0KDQoJLS0vLyBOb1RyZWVOb2Rlcw0KCWxvY2FsIE5vVHJlZU5vZGVzID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJOb1RyZWVOb2RlcyIpDQoNCgktLS8vIENoZWNrIGZvciBleGlzdGluZyBUcmVlTm9kZQ0KCWxvY2FsIEV4aXN0aW5nID0gTG9nc1tJZF0NCglpZiBFeGlzdGluZyB0aGVuIHJldHVybiBFeGlzdGluZyBlbmQNCg0KCS0tLy8gSGVhZGVyIGRhdGENCglsb2NhbCBIZWFkZXJEYXRhID0gewkNCgkJTG9nQ291bnQgPSAwLA0KCQlEYXRhID0gRGF0YSwNCgkJRW50cmllcyA9IHt9DQoJfQ0KDQoJLS0vLyBJbmNyZW1lbnQgdHJlZW5vZGUgY291bnQNCglSZW1vdGVzQ291bnQgKz0gMQ0KDQoJLS0vLyBDcmVhdGUgbmV3IHRyZWVub2RlIGVsZW1lbnQNCglpZiBub3QgTm9UcmVlTm9kZXMgdGhlbg0KCQlIZWFkZXJEYXRhLlRyZWVOb2RlID0gUmVtb3Rlc0xpc3Q6VHJlZU5vZGUoew0KCQkJTGF5b3V0T3JkZXIgPSAtMSAqIFJlbW90ZXNDb3VudCwNCgkJCVRpdGxlID0gYHtSZW1vdGV9YA0KCQl9KQ0KCWVuZA0KDQoJZnVuY3Rpb24gSGVhZGVyRGF0YTpDaGVja0xpbWl0KCkNCgkJbG9jYWwgRW50cmllcyA9IHNlbGYuRW50cmllcw0KCQlpZiAjRW50cmllcyA8IExvZ0xpbWl0IHRoZW4gcmV0dXJuIGVuZA0KCQkJDQoJCS0tLy8gR2V0IGFuZCByZW1vdmUgbGFzdCBlbGVtZW50DQoJCWxvY2FsIExvZyA9IHRhYmxlLnJlbW92ZShFbnRyaWVzLCAxKQ0KCQlMb2cuU2VsZWN0YWJsZTpSZW1vdmUoKQ0KCWVuZA0KDQoJZnVuY3Rpb24gSGVhZGVyRGF0YTpMb2dBZGRlZChEYXRhKQ0KCQktLS8vIEluY3JlbWVudCBsb2cgY291bnQNCgkJc2VsZi5Mb2dDb3VudCArPSAxDQoJCXNlbGY6Q2hlY2tMaW1pdCgpDQoNCgkJLS0vLyBBZGQgZW50cnkNCgkJbG9jYWwgRW50cmllcyA9IHNlbGYuRW50cmllcw0KCQl0YWJsZS5pbnNlcnQoRW50cmllcywgRGF0YSkNCgkJDQoJCXJldHVybiBzZWxmDQoJZW5kDQoNCglmdW5jdGlvbiBIZWFkZXJEYXRhOlJlbW92ZSgpDQoJCS0tLy8gUmVtb3ZlIFRyZWVOb2RlDQoJCWxvY2FsIFRyZWVOb2RlID0gc2VsZi5UcmVlTm9kZQ0KCQlpZiBUcmVlTm9kZSB0aGVuDQoJCQlUcmVlTm9kZTpSZW1vdmUoKQ0KCQllbmQNCg0KCQktLS8vIENsZWFyIHRhYmxlcyBmcm9tIG1lbW9yeQ0KCQlMb2dzW0lkXSA9IG5pbA0KCQl0YWJsZS5jbGVhcihIZWFkZXJEYXRhKQ0KCWVuZA0KDQoJTG9nc1tJZF0gPSBIZWFkZXJEYXRhDQoJcmV0dXJuIEhlYWRlckRhdGENCmVuZA0KDQpmdW5jdGlvbiBVaTpDbGVhckxvZ3MoKQ0KCWxvY2FsIExvZ3MgPSBzZWxmLkxvZ3MNCglsb2NhbCBSZW1vdGVzTGlzdCA9IHNlbGYuUmVtb3Rlc0xpc3QNCg0KCS0tLy8gQ2xlYXIgYWxsIGVsZW1lbnRzDQoJUmVtb3Rlc0NvdW50ID0gMA0KCVJlbW90ZXNMaXN0OkNsZWFyQ2hpbGRFbGVtZW50cygpDQoNCgktLS8vIENsZWFyIGxvZ3MgZnJvbSBtZW1vcnkNCgl0YWJsZS5jbGVhcihMb2dzKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlF1ZXVlTG9nKERhdGEpDQoJbG9jYWwgTG9nUXVldWUgPSBzZWxmLkxvZ1F1ZXVlDQogICAgdGFibGUuaW5zZXJ0KExvZ1F1ZXVlLCBEYXRhKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlByb2Nlc3NMb2dRdWV1ZSgpDQoJbG9jYWwgUXVldWUgPSBzZWxmLkxvZ1F1ZXVlDQogICAgaWYgI1F1ZXVlIDw9IDAgdGhlbiByZXR1cm4gZW5kDQoNCgktLS8vIENyZWF0ZSBhIGxvZyBlbGVtZW50IGZvciBlYWNoIGluIHRoZSBRdWV1ZQ0KICAgIGZvciBJbmRleCwgRGF0YSBpbiBuZXh0LCBRdWV1ZSBkbw0KICAgICAgICBzZWxmOkNyZWF0ZUxvZyhEYXRhKQ0KICAgICAgICB0YWJsZS5yZW1vdmUoUXVldWUsIEluZGV4KQ0KICAgIGVuZA0KZW5kDQoNCmZ1bmN0aW9uIFVpOkJlZ2luTG9nU2VydmljZSgpDQoJY29yb3V0aW5lLndyYXAoZnVuY3Rpb24oKQ0KCQl3aGlsZSB0cnVlIGRvDQoJCQlzZWxmOlByb2Nlc3NMb2dRdWV1ZSgpDQoJCQl0YXNrLndhaXQoKQ0KCQllbmQNCgllbmQpKCkNCmVuZA0KDQpmdW5jdGlvbiBVaTpGaWx0ZXJOYW1lKE5hbWU6IHN0cmluZywgQ2hhcmFjdGVyTGltaXQ6IG51bWJlcj8pOiBzdHJpbmcNCglsb2NhbCBUcmltbWVkID0gTmFtZTpzdWIoMSwgQ2hhcmFjdGVyTGltaXQgb3IgMjApDQoJbG9jYWwgRmlsdHJlZCA9IFRyaW1tZWQ6Z3N1YigiW1xuXHJdIiwgIiIpDQoJRmlsdHJlZCA9IEdlbmVyYXRpb246TWFrZVByaW50YWJsZShGaWx0cmVkKQ0KDQoJcmV0dXJuIEZpbHRyZWQNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVMb2coRGF0YTogTG9nKQ0KCS0tLy8gVW5wYWNrIGxvZyBkYXRhDQogICAgbG9jYWwgUmVtb3RlID0gRGF0YS5SZW1vdGUNCglsb2NhbCBNZXRob2QgPSBEYXRhLk1ldGhvZA0KICAgIGxvY2FsIEFyZ3MgPSBEYXRhLkFyZ3MNCiAgICBsb2NhbCBJc1JlY2VpdmUgPSBEYXRhLklzUmVjZWl2ZQ0KCWxvY2FsIElkID0gRGF0YS5JZA0KCWxvY2FsIFRpbWVzdGFtcCA9IERhdGEuVGltZXN0YW1wDQoJbG9jYWwgSXNFeHBsb2l0ID0gRGF0YS5Jc0V4cGxvaXQNCgkNCglsb2NhbCBJc05pbFBhcmVudCA9IEhvb2s6SW5kZXgoUmVtb3RlLCAiUGFyZW50IikgPT0gbmlsDQoJbG9jYWwgUmVtb3RlRGF0YSA9IFByb2Nlc3M6R2V0UmVtb3RlRGF0YShJZCkNCg0KCS0tLy8gUGF1c2VkDQoJbG9jYWwgUGF1c2VkID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJQYXVzZWQiKQ0KCWlmIFBhdXNlZCB0aGVuIHJldHVybiBlbmQNCg0KCS0tLy8gQ2hlY2sgY2FsbGVyIChJZ25vcmUgZXhwbG9pdCBjYWxscykNCglsb2NhbCBMb2dFeHBsb2l0ID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJMb2dFeHBsb2l0IikNCglpZiBub3QgTG9nRXhwbG9pdCBhbmQgSXNFeHBsb2l0IHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBJZ25vcmVOaWwNCglsb2NhbCBJZ25vcmVOaWwgPSBGbGFnczpHZXRGbGFnVmFsdWUoIklnbm9yZU5pbCIpDQoJaWYgSWdub3JlTmlsIGFuZCBJc05pbFBhcmVudCB0aGVuIHJldHVybiBlbmQNCg0KICAgIC0tLy8gTG9nUmVjaXZlcyBjaGVjaw0KCWxvY2FsIExvZ1JlY2l2ZXMgPSBGbGFnczpHZXRGbGFnVmFsdWUoIkxvZ1JlY2l2ZXMiKQ0KCWlmIG5vdCBMb2dSZWNpdmVzIGFuZCBJc1JlY2VpdmUgdGhlbiByZXR1cm4gZW5kDQoNCglsb2NhbCBTZWxlY3ROZXdlc3QgPSBGbGFnczpHZXRGbGFnVmFsdWUoIlNlbGVjdE5ld2VzdCIpDQoJbG9jYWwgTm9UcmVlTm9kZXMgPSBGbGFnczpHZXRGbGFnVmFsdWUoIk5vVHJlZU5vZGVzIikNCg0KICAgIC0tLy8gRXhjbHVkZWQgY2hlY2sNCiAgICBpZiBSZW1vdGVEYXRhLkV4Y2x1ZGVkIHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBEZXNlcmlhbGl6ZSBhcmd1bWVudHMNCglBcmdzID0gQ29tbXVuaWNhdGlvbjpEZXNlcmlhbGl6ZVRhYmxlKEFyZ3MpDQoNCgktLS8vIERlZXAgY2xvbmUgZGF0YQ0KCWxvY2FsIENsb25lZEFyZ3MgPSBQcm9jZXNzOkRlZXBDbG9uZVRhYmxlKEFyZ3MpDQoJRGF0YS5BcmdzID0gQ2xvbmVkQXJncw0KCURhdGEuVmFsdWVTd2FwcyA9IEdlbmVyYXRpb246TWFrZVZhbHVlU3dhcHNUYWJsZShUaW1lc3RhbXApDQoNCgktLS8vIEdlbmVyYXRlIGxvZyB0aXRsZQ0KCWxvY2FsIENvbG9yID0gQ29uZmlnLk1ldGhvZENvbG9yc1tNZXRob2Q6bG93ZXIoKV0NCglsb2NhbCBUZXh0ID0gTm9UcmVlTm9kZXMgYW5kIGB7UmVtb3RlfSB8IHtNZXRob2R9YCBvciBNZXRob2QNCg0KCS0tLy8gRmluZFN0cmluZ0Zvck5hbWUgY2hlY2sNCglsb2NhbCBGaW5kU3RyaW5nID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJGaW5kU3RyaW5nRm9yTmFtZSIpDQoJaWYgRmluZFN0cmluZyB0aGVuDQoJCWZvciBfLCBBcmcgaW4gbmV4dCwgQ2xvbmVkQXJncyBkbw0KCQkJaWYgdHlwZW9mKEFyZykgPT0gInN0cmluZyIgdGhlbg0KCQkJCWxvY2FsIEZpbHRyZWQgPSBzZWxmOkZpbHRlck5hbWUoQXJnKQ0KCQkJCVRleHQgPSBge0ZpbHRyZWR9IHwge1RleHR9YA0KCQkJCWJyZWFrDQoJCQllbmQNCgkJZW5kDQoJZW5kDQoNCgktLS8vIEZldGNoIEhlYWRlckRhdGEgYnkgdGhlIFJlbW90ZUlEIHVzZWQgZm9yIHN0YWNraW5nDQoJbG9jYWwgSGVhZGVyID0gc2VsZjpHZXRSZW1vdGVIZWFkZXIoRGF0YSkNCglsb2NhbCBSZW1vdGVzTGlzdCA9IHNlbGYuUmVtb3Rlc0xpc3QNCg0KCWxvY2FsIExvZ0NvdW50ID0gSGVhZGVyLkxvZ0NvdW50DQoJbG9jYWwgVHJlZU5vZGUgPSBIZWFkZXIuVHJlZU5vZGUgDQoJbG9jYWwgUGFyZW50ID0gVHJlZU5vZGUgb3IgUmVtb3Rlc0xpc3QNCg0KCS0tLy8gSW5jcmVhc2UgbG9nIGNvdW50IC0gVHJlZU5vZGVzIGFyZSBpbiBHZXRSZW1vdGVIZWFkZXIgZnVuY3Rpb24NCglpZiBOb1RyZWVOb2RlcyB0aGVuDQoJCVJlbW90ZXNDb3VudCArPSAxDQoJCUxvZ0NvdW50ID0gUmVtb3Rlc0NvdW50DQoJZW5kDQoNCiAgICAtLS8vIENyZWF0ZSBmb2N1cyBidXR0b24NCglEYXRhLkhlYWRlckRhdGEgPSBIZWFkZXINCglEYXRhLlNlbGVjdGFibGUgPSBQYXJlbnQ6U2VsZWN0YWJsZSh7DQoJCVRleHQgPSBUZXh0LA0KICAgICAgICBMYXlvdXRPcmRlciA9IC0xICogTG9nQ291bnQsDQoJCVRleHRDb2xvcjMgPSBDb2xvciwNCgkJVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJc2VsZjpTZXRGb2N1c2VkUmVtb3RlKERhdGEpDQoJCWVuZCwNCiAgICB9KQ0KDQoJSGVhZGVyOkxvZ0FkZGVkKERhdGEpDQoNCgktLS8vIEF1dG8gc2VsZWN0IGNoZWNrDQoJbG9jYWwgR3JvdXBTZWxlY3RlZCA9IEFjdGl2ZURhdGEgYW5kIEFjdGl2ZURhdGEuSGVhZGVyRGF0YSA9PSBIZWFkZXINCglpZiBTZWxlY3ROZXdlc3QgYW5kIEdyb3VwU2VsZWN0ZWQgdGhlbg0KCQlzZWxmOlNldEZvY3VzZWRSZW1vdGUoRGF0YSkNCgllbmQNCmVuZA0KDQpyZXR1cm4gVWk=]]
},Generation={'base64',
[[dHlwZSB0YWJsZSA9IHsNCglbYW55XTogYW55DQp9DQoNCnR5cGUgUmVtb3RlRGF0YSA9IHsNCglSZW1vdGU6IEluc3RhbmNlLA0KCUlzUmVjZWl2ZTogYm9vbGVhbj8sDQoJQXJnczogdGFibGUsDQoJTWV0aG9kOiBzdHJpbmcsDQogICAgVHJhbnNmZXJUeXBlOiBzdHJpbmcsDQoJVmFsdWVSZXBsYWNlbWVudHM6IHRhYmxlLA0KCU5vVmFyaWFibGVzOiBib29sZWFuPw0KfQ0KDQotLS8vIE1vZHVsZQ0KbG9jYWwgR2VuZXJhdGlvbiA9IHsNCglEdW1wQmFzZU5hbWUgPSAiU2lnbWFTcHktRHVtcCAlcy5sdWEiLA0KCVNjcmlwdFRlbXBsYXRlcyA9IHsNCgkJWyJSZW1vdGUiXSA9IHsNCgkJCXsiJVJlbW90ZUNhbGwlIn0NCgkJfSwNCgkJWyJTcGFtIl0gPSB7DQoJCQl7IndoaWxlIHdhaXQoKSBkbyJ9LA0KCQkJeyIlUmVtb3RlQ2FsbCUiLCAyfSwNCgkJCXsiZW5kIn0NCgkJfSwNCgkJWyJSZXBlYXQiXSA9IHsNCgkJCXsiZm9yIEluZGV4ID0gMSwgMTAgZG8ifSwNCgkJCXsiJVJlbW90ZUNhbGwlIiwgMn0sDQoJCQl7ImVuZCJ9DQoJCX0sDQoJCVsiQmxvY2siXSA9IHsNCgkJCVsiX19pbmRleCJdID0gew0KCQkJCXsibG9jYWwgT2xkOyBPbGQgPSBob29rZnVuY3Rpb24oJVNpZ25hbCUsIGZ1bmN0aW9uKHNlbGYsIC4uLikifSwNCgkJCQl7ImlmIHNlbGYgPT0gJVJlbW90ZSUgdGhlbiIsIDJ9LA0KCQkJCXsicmV0dXJuIiwgM30sDQoJCQkJeyJlbmQiLCAyfSwNCgkJCQl7InJldHVybiBPbGQoc2VsZiwgLi4uKSIsIDJ9LA0KCQkJCXsiZW5kKSJ9DQoJCQl9LA0KCQkJWyJfX25hbWVjYWxsIl0gPSB7DQoJCQkJeyJsb2NhbCBPbGQ7IE9sZCA9IGhvb2ttZXRhbWV0aG9kKGdhbWUsIFwiX19uYW1lY2FsbFwiLCBmdW5jdGlvbihzZWxmLCAuLi4pIn0sDQoJCQkJeyJsb2NhbCBNZXRob2QgPSBnZXRuYW1lY2FsbG1ldGhvZCgpIiwgMn0sDQoJCQkJeyJpZiBzZWxmID09ICVSZW1vdGUlIGFuZCBNZXRob2QgPT0gXCIlTWV0aG9kJVwiIHRoZW4iLCAyfSwNCgkJCQl7InJldHVybiIsIDN9LA0KCQkJCXsiZW5kIiwgMn0sDQoJCQkJeyJyZXR1cm4gT2xkKHNlbGYsIC4uLikiLCAyfSwNCgkJCQl7ImVuZCkifQ0KCQkJfSwNCgkJCVsiQ29ubmVjdCJdID0gew0KCQkJCXsiZm9yIF8sIENvbm5lY3Rpb24gaW4gZ2V0Y29ubmVjdGlvbnMoJVNpZ25hbCUpIGRvIn0sDQoJCQkJeyJDb25uZWN0aW9uOkRpc2FibGUoKSIsIDJ9LA0KCQkJCXsiZW5kIn0NCgkJCX0NCgkJfQ0KCX0NCn0NCg0KLS0vLyBNb2R1bGVzDQpsb2NhbCBDb25maWcNCmxvY2FsIEhvb2sNCmxvY2FsIFBhcnNlck1vZHVsZQ0KbG9jYWwgVGhpc1NjcmlwdCA9IHNjcmlwdA0KDQpsb2NhbCBmdW5jdGlvbiBNZXJnZShCYXNlOiB0YWJsZSwgTmV3OiB0YWJsZSkNCglmb3IgS2V5LCBWYWx1ZSBpbiBuZXh0LCBOZXcgZG8NCgkJQmFzZVtLZXldID0gVmFsdWUNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBHZW5lcmF0aW9uOkluaXQoRGF0YTogdGFibGUpDQogICAgbG9jYWwgTW9kdWxlcyA9IERhdGEuTW9kdWxlcw0KCWxvY2FsIENvbmZpZ3VyYXRpb24gPSBNb2R1bGVzLkNvbmZpZ3VyYXRpb24NCg0KCS0tLy8gTW9kdWxlcw0KCUNvbmZpZyA9IE1vZHVsZXMuQ29uZmlnDQoJSG9vayA9IE1vZHVsZXMuSG9vaw0KCQ0KCS0tLy8gSW1wb3J0IHBhcnNlcg0KCWxvY2FsIFBhcnNlclVybCA9IENvbmZpZ3VyYXRpb24uUGFyc2VyVXJsDQoJc2VsZjpMb2FkUGFyc2VyKFBhcnNlclVybCkNCmVuZA0KDQpmdW5jdGlvbiBHZW5lcmF0aW9uOk1ha2VQcmludGFibGUoU3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcNCglsb2NhbCBGb3JtYXR0ZXIgPSBQYXJzZXJNb2R1bGUuTW9kdWxlcy5Gb3JtYXR0ZXINCglyZXR1cm4gRm9ybWF0dGVyOk1ha2VQcmludGFibGUoU3RyaW5nKQ0KZW5kDQoNCmZ1bmN0aW9uIEdlbmVyYXRpb246V3JpdGVEdW1wKENvbnRlbnQ6IHN0cmluZyk6IHN0cmluZw0KCWxvY2FsIER1bXBCYXNlTmFtZSA9IHNlbGYuRHVtcEJhc2VOYW1lDQoNCglsb2NhbCBUaW1lU3RhbXAgPSBvcy5kYXRlKCIlWS0lbS0lZF8lSC0lTS0lUyIpDQoJbG9jYWwgRmlsZVBhdGggPSBEdW1wQmFzZU5hbWU6Zm9ybWF0KFRpbWVTdGFtcCkNCg0KCS0tLy8gV3JpdGUgdG8gZmlsZQ0KCXdyaXRlZmlsZShGaWxlUGF0aCwgQ29udGVudCkNCg0KCXJldHVybiBGaWxlUGF0aA0KZW5kDQoNCmZ1bmN0aW9uIEdlbmVyYXRpb246TG9hZFBhcnNlcihJbXBvcnRVcmw6IHN0cmluZykNCglsb2NhbCBNYWluUGF0aCA9IGB7SW1wb3J0VXJsfS9tYWluLmx1YWANCglsb2NhbCBNYWluQ29udGVudCA9IGdhbWU6SHR0cEdldChNYWluUGF0aCkNCglQYXJzZXJNb2R1bGUgPSBsb2Fkc3RyaW5nKE1haW5Db250ZW50LCAiUGFyc2VyIikoKQ0KCQ0KCS0tLy8gQ29uZmlndXJlIFBhcnNlciBpbXBvcnRzIHRvIHVzZSBnYW1lOkh0dHBHZXQNCglmdW5jdGlvbiBQYXJzZXJNb2R1bGU6SW1wb3J0KE5hbWU6IHN0cmluZykNCgkJbG9jYWwgVXJsID0gYHtJbXBvcnRVcmx9L3tOYW1lfS5sdWFgDQoJCWxvY2FsIENvbnRlbnQgPSBnYW1lOkh0dHBHZXQoVXJsKQ0KCQlsb2NhbCBDbG9zdXJlID0gbG9hZHN0cmluZyhDb250ZW50LCBOYW1lKQ0KCQlyZXR1cm4gQ2xvc3VyZSgpDQoJZW5kDQoNCgktLS8vIExvYWQgcGFyc2VyIG1vZHVsZQ0KCVBhcnNlck1vZHVsZTpMb2FkKCkNCmVuZA0KDQpmdW5jdGlvbiBHZW5lcmF0aW9uOk1ha2VWYWx1ZVN3YXBzVGFibGUoKTogdGFibGUNCglsb2NhbCBGb3JtYXR0ZXIgPSBQYXJzZXJNb2R1bGUuTW9kdWxlcy5Gb3JtYXR0ZXINCglyZXR1cm4gRm9ybWF0dGVyOk1ha2VSZXBsYWNlbWVudHMoKQ0KZW5kDQoNCmZ1bmN0aW9uIEdlbmVyYXRpb246U2V0U3dhcHNDYWxsYmFjayhDYWxsYmFjazogKEludGVyZmFjZTogdGFibGUpIC0+ICgpKQ0KCXNlbGYuU3dhcHNDYWxsYmFjayA9IENhbGxiYWNrDQplbmQNCg0KZnVuY3Rpb24gR2VuZXJhdGlvbjpHZXRCYXNlKE1vZHVsZSk6IChzdHJpbmcsIGJvb2xlYW4pDQoJLS1sb2NhbCBDb2RlID0gIi0tIEdlbmVyYXRlZCB3aXRoIHNpZ21hIHNweSBCT0lJSUlJSUlJSSAoKzk5OTk5OTkgQVVSQSlcbiINCglsb2NhbCBDb2RlID0gIi0tIEdlbmVyYXRlZCB3aXRoIFNpZ21hIFNweSBHaXRodWI6IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXB0aHNvL1NpZ21hLVNweVxuIg0KDQoJLS0vLyBHZW5lcmF0ZSB2YXJpYWJsZXMgY29kZQ0KCWxvY2FsIFZhcmlhYmxlcyA9IE1vZHVsZS5QYXJzZXI6TWFrZVZhcmlhYmxlQ29kZSh7DQoJCSJTZXJ2aWNlcyIsICJSZW1vdGUiLCAiVmFyaWFibGVzIg0KCX0pDQoNCglsb2NhbCBOb1ZhcmlhYmxlcyA9IFZhcmlhYmxlcyA9PSAiIg0KCUNvZGUgLi49IFZhcmlhYmxlcw0KDQoJcmV0dXJuIENvZGUsIE5vVmFyaWFibGVzDQplbmQNCg0KZnVuY3Rpb24gR2VuZXJhdGlvbjpHZXRTd2FwcygpDQoJbG9jYWwgRnVuYyA9IHNlbGYuU3dhcHNDYWxsYmFjaw0KCWxvY2FsIFN3YXBzID0ge30NCg0KCWxvY2FsIEludGVyZmFjZSA9IHt9DQoJZnVuY3Rpb24gSW50ZXJmYWNlOkFkZFN3YXAoT2JqZWN0OiBJbnN0YW5jZSwgRGF0YTogdGFibGUpDQoJCWlmIG5vdCBPYmplY3QgdGhlbiByZXR1cm4gZW5kDQoJCVN3YXBzW09iamVjdF0gPSBEYXRhDQoJZW5kDQoNCgktLS8vIEludm9rZSBHZXRTd2FwcyBmdW5jdGlvbg0KCUZ1bmMoSW50ZXJmYWNlKQ0KDQoJcmV0dXJuIFN3YXBzDQplbmQNCg0KZnVuY3Rpb24gR2VuZXJhdGlvbjpQaWNrVmFyaWFibGVOYW1lKCk6IHN0cmluZw0KCWxvY2FsIE5hbWVzID0gQ29uZmlnLlZhcmlhYmxlTmFtZXMNCglyZXR1cm4gTmFtZXNbbWF0aC5yYW5kb20oMSwgI05hbWVzKV0NCmVuZA0KDQpmdW5jdGlvbiBHZW5lcmF0aW9uOk5ld1BhcnNlcihFeHRyYTogdGFibGUpDQoJbG9jYWwgVmFyaWFibGVOYW1lID0gc2VsZjpQaWNrVmFyaWFibGVOYW1lKCkNCglsb2NhbCBTd2FwcyA9IHNlbGY6R2V0U3dhcHMoKQ0KDQoJbG9jYWwgQ29uZmlndXJhdGlvbiA9IHsNCgkJVmFyaWFibGVCYXNlID0gVmFyaWFibGVOYW1lLA0KCQlTd2FwcyA9IFN3YXBzLA0KCQlJbmRleEZ1bmMgPSBmdW5jdGlvbiguLi4pDQoJCQlyZXR1cm4gSG9vazpJbmRleCguLi4pDQoJCWVuZCwNCgl9DQoNCgktLS8vIE1lcmdlIGV4dHJhIGNvbmZpZ3VyYXRpb24NCglNZXJnZShDb25maWd1cmF0aW9uLCBFeHRyYSkNCg0KCS0tLy8gQ3JlYXRlIG5ldyBwYXJzZXIgaW5zdGFuY2UNCglyZXR1cm4gUGFyc2VyTW9kdWxlOk5ldyhDb25maWd1cmF0aW9uKQ0KZW5kDQoNCmZ1bmN0aW9uIEdlbmVyYXRpb246SW5kZW50KEluZGVudFN0cmluZzogc3RyaW5nLCBMaW5lOiBzdHJpbmcpDQoJcmV0dXJuIGB7SW5kZW50U3RyaW5nfXtMaW5lfWANCmVuZA0KDQp0eXBlIENhbGxJbmZvID0gew0KCUFyZ3VtZW50czogdGFibGUsDQoJSW5kZW50OiBudW1iZXIsDQoJUmVtb3RlVmFyaWFibGU6IHN0cmluZw0KfQ0KZnVuY3Rpb24gR2VuZXJhdGlvbjpDYWxsUmVtb3RlU2NyaXB0KERhdGEsIEluZm86IENhbGxJbmZvKTogc3RyaW5nDQoJbG9jYWwgSXNSZWNlaXZlID0gRGF0YS5Jc1JlY2VpdmUNCglsb2NhbCBNZXRob2QgPSBEYXRhLk1ldGhvZA0KCWxvY2FsIEFyZ3MgPSBEYXRhLkFyZ3MNCg0KCWxvY2FsIFJlbW90ZVZhcmlhYmxlID0gSW5mby5SZW1vdGVWYXJpYWJsZQ0KCWxvY2FsIEluZGVudCA9IEluZm8uSW5kZW50IG9yIDANCglsb2NhbCBNb2R1bGUgPSBJbmZvLk1vZHVsZQ0KDQoJbG9jYWwgVmFyaWFibGVzID0gTW9kdWxlLlZhcmlhYmxlcw0KCWxvY2FsIFBhcnNlciA9IE1vZHVsZS5QYXJzZXINCglsb2NhbCBOb1ZhcmlhYmxlcyA9IERhdGEuTm9WYXJpYWJsZXMNCg0KCWxvY2FsIEluZGVudFN0cmluZyA9IHNlbGY6TWFrZUluZGVudChJbmRlbnQpDQoNCgktLS8vIFBhcnNlIGFyZ3VtZW50cw0KCWxvY2FsIFBhcnNlZEFyZ3MsIEl0ZW1zQ291bnQsIElzQXJyYXkgPSBQYXJzZXI6UGFyc2VUYWJsZUludG9TdHJpbmcoew0KCQlOb0JyYWNrZXRzID0gdHJ1ZSwNCgkJTm9WYXJpYWJsZXMgPSBOb1ZhcmlhYmxlcywNCgkJVGFibGUgPSBBcmdzLA0KCQlJbmRlbnQgPSBJbmRlbnQNCgl9KQ0KDQoJLS0vLyBDcmVhdGUgdGFibGUgdmFyaWFibGUgaWYgbm90IGFuIGFycmF5DQoJaWYgbm90IElzQXJyYXkgb3IgTm9WYXJpYWJsZXMgdGhlbg0KCQlQYXJzZWRBcmdzID0gVmFyaWFibGVzOk1ha2VWYXJpYWJsZSh7DQoJCQlWYWx1ZSA9ICgieyVzfSIpOmZvcm1hdChQYXJzZWRBcmdzKSwNCgkJCUNvbW1lbnQgPSBub3QgSXNBcnJheSBhbmQgIkFyZ3VtZW50cyBhcmVuJ3Qgb3JkZXJlZCIgb3IgbmlsLA0KCQkJTmFtZSA9ICJSZW1vdGVBcmdzIiwNCgkJCUNsYXNzID0gIlJlbW90ZSINCgkJfSkNCgllbmQNCg0KCS0tLy8gV3JhcCBpbiBhIHVucGFjayBpZiB0aGUgdGFibGUgaXMgYSBkaWN0DQoJaWYgSXRlbXNDb3VudCA+IDAgYW5kIG5vdCBJc0FycmF5IHRoZW4NCgkJUGFyc2VkQXJncyA9IGB1bnBhY2soe1BhcnNlZEFyZ3N9LCAxLCB0YWJsZS5tYXhuKHtQYXJzZWRBcmdzfSkpYA0KCWVuZA0KDQoJLS0vLyBGaXJlc2lnbmFsIHNjcmlwdCBmb3IgY2xpZW50IHJlY2lldmVzDQoJaWYgSXNSZWNlaXZlIHRoZW4NCgkJbG9jYWwgU2Vjb25kID0gSXRlbXNDb3VudCA8PSAwIGFuZCAiIiBvciBgLCB7UGFyc2VkQXJnc31gDQoJCWxvY2FsIFNpZ25hbCA9IGB7UmVtb3RlVmFyaWFibGV9LntNZXRob2R9YA0KDQoJCWxvY2FsIENvZGUgPSBgLS0gVGhpcyBkYXRhIHdhcyByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXJgDQoJCVBhcnNlZEFyZ3MgPSBzZWxmOkluZGVudChJbmRlbnRTdHJpbmcsIENvZGUpDQoJCUNvZGUgLi49IGBcbntJbmRlbnRTdHJpbmd9ZmlyZXNpZ25hbCh7U2lnbmFsfXtTZWNvbmR9KWANCgkJDQoJCXJldHVybiBDb2RlDQoJZW5kDQoJDQoJLS0vLyBSZW1vdGUgaW52b2tlIHNjcmlwdA0KCXJldHVybiBge1JlbW90ZVZhcmlhYmxlfTp7TWV0aG9kfSh7UGFyc2VkQXJnc30pYA0KZW5kDQoNCi0tLy8gVmFyaWFibGVzOiAlVmFyaWFibGVOYW1lJQ0KZnVuY3Rpb24gR2VuZXJhdGlvbjpBcHBseVZhcmlhYmxlcyhTdHJpbmc6IHN0cmluZywgVmFyaWFibGVzOiB0YWJsZSwgLi4uKTogc3RyaW5nDQoJZm9yIFZhcmlhYmxlLCBWYWx1ZSBpbiBWYXJpYWJsZXMgZG8NCgkJLS0vLyBJbnZva2UgdmFsdWUgZnVuY3Rpb24NCgkJaWYgdHlwZW9mKFZhbHVlKSA9PSAiZnVuY3Rpb24iIHRoZW4NCgkJCVZhbHVlID0gVmFsdWUoLi4uKQ0KCQllbmQNCg0KCQlTdHJpbmcgPSBTdHJpbmc6Z3N1YihgJSV7VmFyaWFibGV9JSVgLCBWYWx1ZSkNCgllbmQNCglyZXR1cm4gU3RyaW5nDQplbmQNCg0KZnVuY3Rpb24gR2VuZXJhdGlvbjpNYWtlSW5kZW50KEluZGVudDogbnVtYmVyKQ0KCXJldHVybiBzdHJpbmcucmVwKCIJIiwgSW5kZW50KQ0KZW5kDQoNCnR5cGUgU2NyaXB0RGF0YSA9IHsNCglWYXJpYWJsZXM6IHRhYmxlLA0KCU1ldGFNZXRob2Q6IHN0cmluZw0KfQ0KZnVuY3Rpb24gR2VuZXJhdGlvbjpNYWtlQ2FsbENvZGUoU2NyaXB0VHlwZTogc3RyaW5nLCBEYXRhOiBTY3JpcHREYXRhKTogc3RyaW5nDQoJbG9jYWwgU2NyaXB0VGVtcGxhdGVzID0gc2VsZi5TY3JpcHRUZW1wbGF0ZXMNCglsb2NhbCBUZW1wbGF0ZSA9IFNjcmlwdFRlbXBsYXRlc1tTY3JpcHRUeXBlXQ0KDQoJYXNzZXJ0KFRlbXBsYXRlLCBge1NjcmlwdFR5cGV9IGlzIG5vdCBhIHZhbGlkIHNjcmlwdCB0eXBlIWApDQoNCglsb2NhbCBWYXJpYWJsZXMgPSBEYXRhLlZhcmlhYmxlcw0KCWxvY2FsIE1ldGFNZXRob2QgPSBEYXRhLk1ldGFNZXRob2QNCglsb2NhbCBNZXRhTWV0aG9kcyA9IHsiX19pbmRleCIsICJfX25hbWVjYWxsIiwgIkNvbm5lY3QifQ0KDQoJbG9jYWwgZnVuY3Rpb24gQ29tcGlsZShUZW1wbGF0ZTogdGFibGUpOiBzdHJpbmcNCgkJbG9jYWwgT3V0ID0gIiINCg0KCQlmb3IgS2V5LCBWYWx1ZSBpbiBuZXh0LCBUZW1wbGF0ZSBkbw0KCQkJLS0vLyBNZXRhTWV0aG9kIGNoZWNrDQoJCQlsb2NhbCBJc01ldGFUeXBlT25seSA9IHRhYmxlLmZpbmQoTWV0YU1ldGhvZHMsIEtleSkNCgkJCWlmIElzTWV0YVR5cGVPbmx5IHRoZW4NCgkJCQlpZiBLZXkgPT0gTWV0YU1ldGhvZCB0aGVuDQoJCQkJCWxvY2FsIExpbmUgPSBDb21waWxlKFZhbHVlKQ0KCQkJCQlPdXQgLi49IExpbmUNCgkJCQllbmQNCgkJCQljb250aW51ZQ0KCQkJZW5kDQoNCgkJCS0tLy8gSW5mb3JtYXRpb24NCgkJCWxvY2FsIENvbnRlbnQsIEluZGVudCA9IFZhbHVlWzFdLCBWYWx1ZVsyXSBvciAwDQoJCQlJbmRlbnQgPSBtYXRoLmNsYW1wKEluZGVudC0xLCAwLCA5OTk5KQ0KDQoJCQktLS8vIE1ha2UgbGluZQ0KCQkJbG9jYWwgTGluZSA9IHNlbGY6QXBwbHlWYXJpYWJsZXMoQ29udGVudCwgVmFyaWFibGVzLCBJbmRlbnQpDQoJCQlsb2NhbCBJbmRlbnRTdHJpbmcgPSBzZWxmOk1ha2VJbmRlbnQoSW5kZW50KQ0KDQoJCQktLS8vIEFwcGVuZCB0byBjb2RlDQoJCQlPdXQgLi49IGB7SW5kZW50U3RyaW5nfXtMaW5lfVxuYA0KCQllbmQNCg0KCQlyZXR1cm4gT3V0DQoJZW5kDQoJDQoJcmV0dXJuIENvbXBpbGUoVGVtcGxhdGUpDQplbmQNCg0KZnVuY3Rpb24gR2VuZXJhdGlvbjpSZW1vdGVTY3JpcHQoTW9kdWxlLCBEYXRhOiBSZW1vdGVEYXRhLCBTY3JpcHRUeXBlOiBzdHJpbmcpOiBzdHJpbmcNCgktLS8vIFVucGFjayBkYXRhDQoJbG9jYWwgUmVtb3RlID0gRGF0YS5SZW1vdGUNCglsb2NhbCBBcmdzID0gRGF0YS5BcmdzDQoJbG9jYWwgTWV0aG9kID0gRGF0YS5NZXRob2QNCglsb2NhbCBNZXRhTWV0aG9kID0gRGF0YS5NZXRhTWV0aG9kDQoNCgktLS8vIFJlbW90ZSBpbmZvDQoJbG9jYWwgQ2xhc3NOYW1lID0gSG9vazpJbmRleChSZW1vdGUsICJDbGFzc05hbWUiKQ0KCWxvY2FsIElzTmlsUGFyZW50ID0gSG9vazpJbmRleChSZW1vdGUsICJQYXJlbnQiKSA9PSBuaWwNCgkNCglsb2NhbCBWYXJpYWJsZXMgPSBNb2R1bGUuVmFyaWFibGVzDQoJbG9jYWwgRm9ybWF0dGVyID0gTW9kdWxlLkZvcm1hdHRlcg0KCQ0KCS0tLy8gUHJlLXJlbmRlciB2YXJpYWJsZXMNCglWYXJpYWJsZXM6UHJlcmVuZGVyVmFyaWFibGVzKEFyZ3MsIHsiSW5zdGFuY2UifSkNCg0KCS0tLy8gQ3JlYXRlIHJlbW90ZSB2YXJpYWJsZQ0KCWxvY2FsIFJlbW90ZVZhcmlhYmxlID0gVmFyaWFibGVzOk1ha2VWYXJpYWJsZSh7DQoJCVZhbHVlID0gRm9ybWF0dGVyOkZvcm1hdChSZW1vdGUsIHsNCgkJCU5vVmFyaWFibGVzID0gdHJ1ZQ0KCQl9KSwNCgkJQ29tbWVudCA9IGB7Q2xhc3NOYW1lfSB7SXNOaWxQYXJlbnQgYW5kICJ8IFJlbW90ZSBwYXJlbnQgaXMgbmlsIiBvciAiIn1gLA0KCQlOYW1lID0gRm9ybWF0dGVyOk1ha2VOYW1lKFJlbW90ZSksDQoJCUxvb2t1cCA9IFJlbW90ZSwNCgkJQ2xhc3MgPSAiUmVtb3RlIg0KCX0pDQoNCgktLS8vIEdlbmVyYXRlIGNhbGwgc2NyaXB0DQoJbG9jYWwgQ2FsbENvZGUgPSBzZWxmOk1ha2VDYWxsQ29kZShTY3JpcHRUeXBlLCB7DQoJCVZhcmlhYmxlcyA9IHsNCgkJCVsiUmVtb3RlQ2FsbCJdID0gZnVuY3Rpb24oSW5kZW50OiBudW1iZXIpDQoJCQkJcmV0dXJuIHNlbGY6Q2FsbFJlbW90ZVNjcmlwdChEYXRhLCB7DQoJCQkJCVJlbW90ZVZhcmlhYmxlID0gUmVtb3RlVmFyaWFibGUsDQoJCQkJCUluZGVudCA9IEluZGVudCwNCgkJCQkJTW9kdWxlID0gTW9kdWxlDQoJCQkJfSkNCgkJCWVuZCwNCgkJCVsiUmVtb3RlIl0gPSBSZW1vdGVWYXJpYWJsZSwNCgkJCVsiTWV0aG9kIl0gPSBNZXRob2QsDQoJCQlbIlNpZ25hbCJdID0gYHtSZW1vdGVWYXJpYWJsZX0ue01ldGhvZH1gDQoJCX0sDQoJCU1ldGFNZXRob2QgPSBNZXRhTWV0aG9kDQoJfSkNCgkNCgktLS8vIE1ha2UgY29kZQ0KCWxvY2FsIENvZGUgPSBzZWxmOkdldEJhc2UoTW9kdWxlKQ0KCXJldHVybiBge0NvZGV9XG57Q2FsbENvZGV9YA0KZW5kDQoNCmZ1bmN0aW9uIEdlbmVyYXRpb246Q29ubmVjdGlvbnNUYWJsZShTaWduYWw6IFJCWFNjcmlwdFNpZ25hbCk6IHRhYmxlDQoJbG9jYWwgQ29ubmVjdGlvbnMgPSBnZXRjb25uZWN0aW9ucyhTaWduYWwpDQoJbG9jYWwgRGF0YUFycmF5ID0ge30NCg0KCWZvciBfLCBDb25uZWN0aW9uIGluIG5leHQsIENvbm5lY3Rpb25zIGRvDQoJCWxvY2FsIEZ1bmN0aW9uID0gQ29ubmVjdGlvbi5GdW5jdGlvbg0KCQlsb2NhbCBTY3JpcHQgPSByYXdnZXQoZ2V0ZmVudihGdW5jdGlvbiksICJzY3JpcHQiKQ0KDQoJCS0tLy8gU2tpcCBpZiBzZWxmDQoJCWlmIFNjcmlwdCA9PSBUaGlzU2NyaXB0IHRoZW4gY29udGludWUgZW5kDQoNCgkJLS0vLyBDb25uZWN0aW9uIGRhdGENCgkJbG9jYWwgRGF0YSA9IHsNCgkJCUZ1bmN0aW9uID0gRnVuY3Rpb24sDQoJCQlTdGF0ZSA9IENvbm5lY3Rpb24uU3RhdGUsDQoJCQlTY3JpcHQgPSBTY3JpcHQNCgkJfQ0KDQoJCXRhYmxlLmluc2VydChEYXRhQXJyYXksIERhdGEpDQoJZW5kDQoNCglyZXR1cm4gRGF0YUFycmF5DQplbmQNCg0KZnVuY3Rpb24gR2VuZXJhdGlvbjpUYWJsZVNjcmlwdChNb2R1bGUsIFRhYmxlOiB0YWJsZSk6IHN0cmluZw0KCS0tLy8gUHJlLXJlbmRlciB2YXJpYWJsZXMNCglNb2R1bGUuVmFyaWFibGVzOlByZXJlbmRlclZhcmlhYmxlcyhUYWJsZSwgeyJJbnN0YW5jZSJ9KQ0KDQoJLS0vLyBQYXJzZSBhcmd1bWVudHMNCglsb2NhbCBQYXJzZWRUYWJsZSA9IE1vZHVsZS5QYXJzZXI6UGFyc2VUYWJsZUludG9TdHJpbmcoew0KCQlUYWJsZSA9IFRhYmxlDQoJfSkNCg0KCS0tLy8gR2VuZXJhdGUgc2NyaXB0DQoJbG9jYWwgQ29kZSwgTm9WYXJpYWJsZXMgPSBzZWxmOkdldEJhc2UoTW9kdWxlKQ0KCWxvY2FsIFNlcGVyYXRvciA9IE5vVmFyaWFibGVzIGFuZCAiIiBvciAiXG4iDQoJQ29kZSAuLj0gYHtTZXBlcmF0b3J9cmV0dXJuIHtQYXJzZWRUYWJsZX1gDQoNCglyZXR1cm4gQ29kZQ0KZW5kDQoNCmZ1bmN0aW9uIEdlbmVyYXRpb246TWFrZVR5cGVzVGFibGUoVGFibGU6IHRhYmxlKTogdGFibGUNCglsb2NhbCBUeXBlcyA9IHt9DQoNCglmb3IgS2V5LCBWYWx1ZSBpbiBuZXh0LCBUYWJsZSBkbw0KCQlsb2NhbCBUeXBlID0gdHlwZW9mKFZhbHVlKQ0KCQlpZiBUeXBlID09ICJ0YWJsZSIgdGhlbg0KCQkJVHlwZSA9IHNlbGY6TWFrZVR5cGVzVGFibGUoVmFsdWUpDQoJCWVuZA0KDQoJCVR5cGVzW0tleV0gPSBUeXBlDQoJZW5kDQoNCglyZXR1cm4gVHlwZXMNCmVuZA0KDQpmdW5jdGlvbiBHZW5lcmF0aW9uOkNvbm5lY3Rpb25JbmZvKFJlbW90ZTogSW5zdGFuY2UsIENsYXNzRGF0YTogdGFibGUpOiB0YWJsZT8NCglsb2NhbCBSZWNlaXZlTWV0aG9kcyA9IENsYXNzRGF0YS5SZWNlaXZlDQoJaWYgbm90IFJlY2VpdmVNZXRob2RzIHRoZW4gcmV0dXJuIGVuZA0KDQoJbG9jYWwgQ29ubmVjdGlvbnMgPSB7fQ0KCWZvciBfLCBNZXRob2Q6IHN0cmluZyBpbiBuZXh0LCBSZWNlaXZlTWV0aG9kcyBkbw0KCQlwY2FsbChmdW5jdGlvbigpIC0tIFRPRE86IEdFVENBTExCQUNLVkFMVUUNCgkJCWxvY2FsIFNpZ25hbCA9IEhvb2s6SW5kZXgoUmVtb3RlLCBNZXRob2QpDQoJCQlDb25uZWN0aW9uc1tNZXRob2RdID0gc2VsZjpDb25uZWN0aW9uc1RhYmxlKFNpZ25hbCkNCgkJZW5kKQ0KCWVuZA0KDQoJcmV0dXJuIENvbm5lY3Rpb25zDQplbmQNCg0KZnVuY3Rpb24gR2VuZXJhdGlvbjpBZHZhbmNlZEluZm8oTW9kdWxlLCBEYXRhOiB0YWJsZSk6IHN0cmluZw0KCS0tLy8gVW5wYWNrIHJlbW90ZSBkYXRhDQoJbG9jYWwgTWV0YU1ldGhvZCA9IERhdGEuTWV0YU1ldGhvZA0KCWxvY2FsIEZ1bmN0aW9uID0gRGF0YS5DYWxsaW5nRnVuY3Rpb24NCglsb2NhbCBDbGFzc0RhdGEgPSBEYXRhLkNsYXNzRGF0YQ0KCWxvY2FsIE1ldGhvZCA9IERhdGEuTWV0aG9kDQoJbG9jYWwgUmVtb3RlID0gRGF0YS5SZW1vdGUNCglsb2NhbCBTY3JpcHQgPSBEYXRhLkNhbGxpbmdTY3JpcHQNCglsb2NhbCBTb3VyY2VTY3JpcHQgPSBEYXRhLlNvdXJjZVNjcmlwdA0KCWxvY2FsIElkID0gRGF0YS5JZA0KCWxvY2FsIEFyZ3MgPSBEYXRhLkFyZ3MNCgkNCgktLS8vIEFkdmFuY2VkIGluZm8gdGFibGUgYmFzZQ0KCWxvY2FsIEZ1bmN0aW9uSW5mbyA9IHsNCgkJWyJDYWxsZXIiXSA9IHsNCgkJCVsiU291cmNlU2NyaXB0Il0gPSBTb3VyY2VTY3JpcHQsDQoJCQlbIkNhbGxpbmdTY3JpcHQiXSA9IFNjcmlwdCwNCgkJCVsiQ2FsbGluZ0Z1bmN0aW9uIl0gPSBGdW5jdGlvbg0KCQl9LA0KCQlbIlJlbW90ZSJdID0gew0KCQkJWyJSZW1vdGUiXSA9IFJlbW90ZSwNCgkJCVsiUmVtb3RlSUQiXSA9IElkLA0KCQkJWyJNZXRob2QiXSA9IE1ldGhvZCwNCgkJCVsiQ29ubmVjdGlvbnMiXSA9IHNlbGY6Q29ubmVjdGlvbkluZm8oUmVtb3RlLCBDbGFzc0RhdGEpDQoJCX0sDQoJCVsiQXJndW1lbnRzIl0gPSB7DQoJCQlbIkxlbmd0aCJdID0gI0FyZ3MsDQoJCQlbIlR5cGVzIl0gPSBzZWxmOk1ha2VUeXBlc1RhYmxlKEFyZ3MpLA0KCQl9LA0KCQlbIk1ldGFNZXRob2QiXSA9IE1ldGFNZXRob2QsDQoJCVsiSXNBY3RvciJdID0gRGF0YS5Jc0FjdG9yLA0KCX0NCg0KCS0tLy8gU29tZSBjbG9zdXJlcyBtYXkgbm90IGJlIGx1YQ0KCWlmIGlzbGNsb3N1cmUoRnVuY3Rpb24pIHRoZW4NCgkJRnVuY3Rpb25JbmZvWyJVcFZhbHVlcyJdID0gZGVidWcuZ2V0dXB2YWx1ZXMoRnVuY3Rpb24pDQoJCUZ1bmN0aW9uSW5mb1siQ29uc3RhbnRzIl0gPSBkZWJ1Zy5nZXRjb25zdGFudHMoRnVuY3Rpb24pDQoJZW5kDQoNCgktLS8vIEdlbmVyYXRlIHNjcmlwdA0KCXJldHVybiBzZWxmOlRhYmxlU2NyaXB0KE1vZHVsZSwgRnVuY3Rpb25JbmZvKQ0KZW5kDQoNCmZ1bmN0aW9uIEdlbmVyYXRpb246RHVtcExvZ3MoTG9nczogdGFibGUpOiBzdHJpbmcNCglsb2NhbCBCYXNlRGF0YQ0KCWxvY2FsIFBhcnNlZCA9IHsNCgkJUmVtb3RlID0gbmlsLA0KCQlDYWxscyA9IHt9DQoJfQ0KDQoJLS0vLyBDcmVhdGUgbmV3IHBhcnNlciBpbnN0YW5jZQ0KCWxvY2FsIE1vZHVsZSA9IEdlbmVyYXRpb246TmV3UGFyc2VyKCkNCg0KCWZvciBfLCBEYXRhIGluIExvZ3MgZG8NCgkJbG9jYWwgQ2FsbHMgPSBQYXJzZWQuQ2FsbHMNCgkJbG9jYWwgVGFibGUgPSB7DQoJCQlBcmdzID0gRGF0YS5BcmdzLA0KCQkJVGltZXN0YW1wID0gRGF0YS5UaW1lc3RhbXAsDQoJCQlSZXR1cm5WYWx1ZXMgPSBEYXRhLlJldHVyblZhbHVlcywNCgkJCU1ldGhvZCA9IERhdGEuTWV0aG9kLA0KCQkJTWV0YU1ldGhvZCA9IERhdGEuTWV0YU1ldGhvZCwNCgkJCUNhbGxpbmdTY3JpcHQgPSBEYXRhLkNhbGxpbmdTY3JpcHQsDQoJCX0NCg0KCQktLS8vIEFwcGVuZA0KCQl0YWJsZS5pbnNlcnQoQ2FsbHMsIFRhYmxlKQ0KDQoJCS0tLy8gU2V0IEJhc2VEYXRhDQoJCWlmIG5vdCBCYXNlRGF0YSB0aGVuDQoJCQlCYXNlRGF0YSA9IERhdGENCgkJZW5kDQoJZW5kDQoNCgktLS8vIEJhc2VkYXRhIG1lcmdlDQoJUGFyc2VkLlJlbW90ZSA9IEJhc2VEYXRhLlJlbW90ZQ0KDQoJLS0vLyBDb21waWxlIGFuZCBzYXZlDQoJbG9jYWwgT3V0cHV0ID0gc2VsZjpUYWJsZVNjcmlwdChNb2R1bGUsIFBhcnNlZCkNCglsb2NhbCBGaWxlUGF0aCA9IHNlbGY6V3JpdGVEdW1wKE91dHB1dCkNCgkNCglyZXR1cm4gRmlsZVBhdGgNCmVuZA0KDQpyZXR1cm4gR2VuZXJhdGlvbg0K]]
},Communication={'base64',
[[]]
}},d.Players local h=e:LoadLibraries(f)local i,j,k,l,m,n,o=h.Process,h.Hook,h.Ui
,h.Generation,h.Communication,h.Config,e:GetAsset('ProggyClean.ttf',true)local p
=e:CreateFont('ProggyClean',o)k:SetFontFile(p)i:CheckConfig(n)e:LoadModules(h,{
Modules=h,Services=d})local q,r=k:CreateMainWindow(),i:CheckIsSupported()if not
r then q:Close()return end local s=m:CreateChannel()m:AddCommCallback('QueueLog'
,function(...)k:QueueLog(...)end)local t=g.LocalPlayer l:SetSwapsCallback(
function(u)u:AddSwap(t,{String='LocalPlayer'})u:AddSwap(t.Character,{String=
'Character',NextParent=t})end)k:CreateWindowContent(q)k:BeginLogService()local u
=e:MakeActorScript(f,s)j:LoadHooks(u,s)
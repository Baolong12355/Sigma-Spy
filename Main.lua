--[[
	⣿⣿⣿⣿⣿ SIGMA SPY ⣿⣿⣿⣿⣿
	⣿⣿⣯⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉
	⠉⠻⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠈⠻⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠀⠀⣉⣿⣿⣿⠆⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⣠⣾⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⢀⣴⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣀⣴⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣿⣿⣟⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
	⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

	@author depso (depthso)
	@repo https://github.com/depthso
	@license MIT
	@description Sigma Remote Spy for Roblox
    
	This file is COMPILED, check /src folder for the source
	Build scripts are available in /build
]]

local a,b={UseWorkspace=false,NoActors=false,RepoUrl=
[[https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main]],
ParserUrl=
[[https://raw.githubusercontent.com/depthso/Roblox-parser/refs/heads/main]]},{
...}local c=b[1]if typeof(c)=='table'then for d,e in c do a[d]=e end end local d
=setmetatable({},{__index=function(d,e)local f=game:GetService(e)return
cloneref(f)end})local e=(function()local e,f={UseWorkspace=false,Folder=
'Sigma spy',RepoUrl=nil,FolderStructure={['Sigma Spy']={'assets'}}}function e:
Init(g)local h,i=self.FolderStructure,g.Services f=i.HttpService self:
CheckFolders(h)end function e:PushConfig(g)for h,i in next,g do self[h]=i end
end function e:UrlFetch(g)local h={Url=g:gsub(' ','%%20'),Method='GET'}local i,j
=pcall(request,h)if not i then warn'[!] HTTP request error! Check console (F9)'
warn('> Url:',g)error(j)return''end local k,l=j.Body,j.StatusCode if l==404 then
warn'[!] The file requested has moved or been deleted.'warn(' >',g)return''end
return k,j end function e:MakePath(g)local h=self.Folder return`{h}/{g}`end
function e:LoadCustomasset(g)if not getcustomasset then return end local h,i=
pcall(getcustomasset,g)if not h then return end if not i or i==''then return end
return i end function e:GetFile(g,h)local i,j,k,l=self.RepoUrl,self.UseWorkspace
,self:MakePath(g),''if j then l=readfile(k)else l=self:UrlFetch(`{i}/{g}`)end if
h then self:FileCheck(k,function()return l end)return self:LoadCustomasset(k)end
return l end function e:GetTemplate(g)return self:GetFile(`templates/{g}.lua`)
end function e:FileCheck(g,h)if isfile(g)then return end local i=h()writefile(g,
i)end function e:FolderCheck(g)if isfolder(g)then return end makefolder(g)end
function e:CheckPath(g,h)return g and`{g}/{h}`or h end function e:CheckFolders(g
,h)for i,j in next,g do if typeof(j)=='table'then local k=self:CheckPath(h,i)
self:FolderCheck(k)self:CheckFolders(j,k)continue end local k=self:CheckPath(h,j
)self:FolderCheck(k)end end function e:TemplateCheck(g,h)self:FileCheck(g,
function()return self:GetTemplate(h)end)end function e:GetAsset(g,h)return self:
GetFile(`assets/{g}`,h)end function e:GetModule(g,h)local i=`{g}.lua`if h then
self:TemplateCheck(i,h)return readfile(i)end return self:GetFile(i)end function
e:LoadLibraries(g,...)local h={}for i,j in next,g do local k=typeof(j)=='table'
and j[1]=='base64'j=k and j[2]or j if typeof(j)~='string'and not k then h[i]=j
continue end if k then j=crypt.base64decode(j)g[i]=j end local l=loadstring(j,i)
assert(l,`Failed to load {i}`)h[i]=l(...)end return h end function e:LoadModules
(g,h)for i,j in next,g do local k=j.Init if not k then continue end j:Init(h)end
end function e:CreateFont(g,h)if not h then return end local i=`assets/{g}.json`
local j,k=self:MakePath(i),{name=g,faces={{name='Regular',weight=400,style=
'Normal',assetId=h}}}local l=f:JSONEncode(k)writefile(j,l)return j end function
e:CompileModule(g)local h='local Libraries = {'for i,j in g do if typeof(j)~=
'string'then continue end h..=`\t{i} = (function()\n{j}\nend)(),\n`end h..='}'
return h end function e:MakeActorScript(g,h)local i=e:CompileModule(g)i..=
'\r\n\tlocal ExtraData = {\r\n\t\tIsActor = true\r\n\t}\r\n\t'i..=`Libraries.Hook:BeginService(Libraries, ExtraData, {
h})`return i end return e end)()e:PushConfig(a)e:Init{Services=d}local f,g={
Config=e:GetModule('Sigma Spy/Config','Config'),ReturnSpoofs=e:GetModule(
'Sigma Spy/Return spoofs','Return Spoofs'),Configuration=a,Files=e,Process={
'base64',
[[]]
},Hook={'base64',
[[]]
},Flags={'base64',
[[dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkNCnR5cGUgRmxhZyA9IHsNCiAgICBWYWx1ZTogRmxhZ1ZhbHVlLA0KICAgIExhYmVsOiBzdHJpbmcsDQogICAgQ2F0ZWdvcnk6IHN0cmluZw0KfQ0KdHlwZSBGbGFncyA9IHsNCiAgICBbc3RyaW5nXTogRmxhZw0KfQ0KdHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCmxvY2FsIE1vZHVsZSA9IHsNCiAgICBGbGFncyA9IHsNCiAgICAgICAgUHJldmVudFJlbmFtaW5nID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIHJlbmFtaW5nIiwNCiAgICAgICAgfSwNCiAgICAgICAgUHJldmVudFBhcmVudGluZyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJObyBwYXJlbnRpbmciLA0KICAgICAgICB9LA0KICAgICAgICBTZWxlY3ROZXdlc3QgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiQXV0byBzZWxlY3QgbmV3ZXN0IiwNCiAgICAgICAgfSwNCiAgICAgICAgSWdub3JlTmlsID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiSWdub3JlIG5pbCBwYXJlbnRzIiwNCiAgICAgICAgfSwNCiAgICAgICAgTG9nRXhwbG9pdCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIkxvZyBleHBsb2l0IGNhbGxzIiwNCiAgICAgICAgfSwNCiAgICAgICAgTG9nUmVjaXZlcyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIkxvZyByZWNlaXZlcyIsDQogICAgICAgIH0sDQogICAgICAgIFBhdXNlZCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJQYXVzZWQiLA0KICAgICAgICAgICAgS2V5YmluZCA9IEVudW0uS2V5Q29kZS5RDQogICAgICAgIH0sDQogICAgICAgIEtleWJpbmRzRW5hYmxlZCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIktleWJpbmRzIEVuYWJsZWQiDQogICAgICAgIH0sDQogICAgICAgIEZpbmRTdHJpbmdGb3JOYW1lID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiRmluZCBhcmcgZm9yIG5hbWUiDQogICAgICAgIH0sDQogICAgICAgIFVpVmlzaWJsZSA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIlVJIFZpc2libGUiLA0KICAgICAgICAgICAgS2V5YmluZCA9IEVudW0uS2V5Q29kZS5QDQogICAgICAgIH0sDQogICAgICAgIE5vVHJlZU5vZGVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIGdyb3VwaW5nIg0KICAgICAgICB9LA0KICAgICAgICBUYWJsZUFyZ3MgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiVGFibGUgYXJncyINCiAgICAgICAgfSwNCiAgICAgICAgTm9WYXJpYWJsZXMgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTm8gY29tcHJlc3Npb24iDQogICAgICAgIH0sDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZ1ZhbHVlKE5hbWU6IHN0cmluZyk6IEZsYWdWYWx1ZQ0KICAgIGxvY2FsIEZsYWcgPSBzZWxmOkdldEZsYWcoTmFtZSkNCiAgICByZXR1cm4gRmxhZy5WYWx1ZQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnVmFsdWUoTmFtZTogc3RyaW5nLCBWYWx1ZTogRmxhZ1ZhbHVlKQ0KICAgIGxvY2FsIEZsYWcgPSBzZWxmOkdldEZsYWcoTmFtZSkNCiAgICBGbGFnLlZhbHVlID0gVmFsdWUNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ0NhbGxiYWNrKE5hbWU6IHN0cmluZywgQ2FsbGJhY2s6ICguLi5hbnkpIC0+IC4uLmFueSkNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgRmxhZy5DYWxsYmFjayA9IENhbGxiYWNrDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFja3MoRGljdDoge30pDQogICAgZm9yIE5hbWUsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkgaW4gbmV4dCwgRGljdCBkbyANCiAgICAgICAgc2VsZjpTZXRGbGFnQ2FsbGJhY2soTmFtZSwgQ2FsbGJhY2spDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWcoTmFtZTogc3RyaW5nKTogRmxhZw0KICAgIGxvY2FsIEFsbEZsYWdzID0gc2VsZjpHZXRGbGFncygpDQogICAgbG9jYWwgRmxhZyA9IEFsbEZsYWdzW05hbWVdDQogICAgYXNzZXJ0KEZsYWcsICJGbGFnIGRvZXMgbm90IGV4aXN0ISIpDQogICAgcmV0dXJuIEZsYWcNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6QWRkRmxhZyhOYW1lOiBzdHJpbmcsIEZsYWc6IEZsYWcpDQogICAgbG9jYWwgQWxsRmxhZ3MgPSBzZWxmOkdldEZsYWdzKCkNCiAgICBBbGxGbGFnc1tOYW1lXSA9IEZsYWcNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZ3MoKTogRmxhZ3MNCiAgICByZXR1cm4gc2VsZi5GbGFncw0KZW5kDQoNCnJldHVybiBNb2R1bGU=]]
},Ui={'base64',
[[bG9jYWwgVWkgPSB7DQoJRGVmYXVsdEVkaXRvckNvbnRlbnQgPSBbPVstLVtbIA0KCVdlbGNvbWUgdG8gU2lnbWEgU3B5DQoJQ3JlYXRlZCBieSBkZXBzbyENCl1dIF09XSwNCglMb2dMaW1pdCA9IDEwMCwNCiAgICBTZWFzb25MYWJlbHMgPSB7IA0KICAgICAgICBKYW51YXJ5ID0gIuKbhCVz4puEIiwgDQogICAgICAgIEZlYnJ1YXJ5ID0gIvCfjKjvuI8lc/Cfj4IiLCANCiAgICAgICAgTWFyY2ggPSAi8J+MuSVz8J+MuiIsIA0KICAgICAgICBBcHJpbCA9ICLwn5CjJXPinJ3vuI8iLCANCiAgICAgICAgTWF5ID0gIvCfkJ0lc/CfjJ4iLCANCiAgICAgICAgSnVuZSA9ICLwn4yyJXPwn6WVIiwgDQogICAgICAgIEp1bHkgPSAi8J+MiiVz8J+MhSIsIA0KICAgICAgICBBdWd1c3QgPSAi4piA77iPJXPwn4yeIiwgDQogICAgICAgIFNlcHRlbWJlciA9ICLwn42BJXPwn42BIiwgDQogICAgICAgIE9jdG9iZXIgPSAi8J+OgyVz8J+OgyIsIA0KICAgICAgICBOb3ZlbWJlciA9ICLwn42CJXPwn42CIiwgDQogICAgICAgIERlY2VtYmVyID0gIvCfjoQlc/CfjoEiDQogICAgfSwNCglTY2FsZXMgPSB7DQoJCVsiTW9iaWxlIl0gPSBVRGltMi5mcm9tT2Zmc2V0KDQ4MCwgMjgwKSwNCgkJWyJEZXNrdG9wIl0gPSBVRGltMi5mcm9tT2Zmc2V0KDYwMCwgNDAwKSwNCgl9LA0KICAgIEJhc2VDb25maWcgPSB7DQogICAgICAgIFRoZW1lID0gIlNpZ21hU3B5IiwNCiAgICAgICAgTm9TY3JvbGwgPSB0cnVlLA0KICAgIH0sDQoJT3B0aW9uVHlwZXMgPSB7DQoJCWJvb2xlYW4gPSAiQ2hlY2tib3giLA0KCX0sDQoJRGlzcGxheVJlbW90ZUluZm8gPSB7DQoJCSJNZXRhTWV0aG9kIiwNCgkJIk1ldGhvZCIsDQoJCSJSZW1vdGUiLA0KCQkiQ2FsbGluZ1NjcmlwdCIsDQoJCSJJc0FjdG9yIiwNCgkJIklkIg0KCX0sDQoNCiAgICBXaW5kb3cgPSBuaWwsDQogICAgUmFuZG9tU2VlZCA9IFJhbmRvbS5uZXcodGljaygpKSwNCglMb2dzID0gc2V0bWV0YXRhYmxlKHt9LCB7X19tb2RlID0gImsifSksDQoJTG9nUXVldWUgPSBzZXRtZXRhdGFibGUoe30sIHtfX21vZGUgPSAidiJ9KSwNCn0gDQoNCnR5cGUgdGFibGUgPSB7DQoJW2FueV06IGFueQ0KfQ0KDQp0eXBlIExvZyA9IHsNCglSZW1vdGU6IEluc3RhbmNlLA0KCU1ldGhvZDogc3RyaW5nLA0KCUFyZ3M6IHRhYmxlLA0KCUlzUmVjZWl2ZTogYm9vbGVhbj8sDQoJTWV0YU1ldGhvZDogc3RyaW5nPywNCglPcmlnbmFsRnVuYzogKCguLi5hbnkpIC0+IC4uLmFueSk/LA0KCUNhbGxpbmdTY3JpcHQ6IEluc3RhbmNlPywNCglDYWxsaW5nRnVuY3Rpb246ICgoLi4uYW55KSAtPiAuLi5hbnkpPywNCglDbGFzc0RhdGE6IHRhYmxlPywNCglSZXR1cm5WYWx1ZXM6IHRhYmxlPywNCglSZW1vdGVEYXRhOiB0YWJsZT8sDQoJSWQ6IHN0cmluZywNCglTZWxlY3RhYmxlOiB0YWJsZSwNCglIZWFkZXJEYXRhOiB0YWJsZSwNCglWYWx1ZVN3YXBzOiB0YWJsZSwNCglUaW1lc3RhbXA6IG51bWJlciwNCglJc0V4cGxvaXQ6IGJvb2xlYW4NCn0NCg0KLS0vLyBDb21wYXRpYmlsaXR5DQpsb2NhbCBTZXRDbGlwYm9hcmQgPSBzZXRjbGlwYm9hcmQgb3IgdG9jbGlwYm9hcmQgb3Igc2V0X2NsaXBib2FyZA0KDQotLS8vIExpYnJhcmllcw0KbG9jYWwgUmVHdWkgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgnaHR0cDovLzEyNy4wLjAuMTozMDAwL1JlR3VpLmx1YScpKSgpDQoNCi0tLy8gU2VydmljZXMNCmxvY2FsIEluc2VydFNlcnZpY2U6IEluc2VydFNlcnZpY2UNCg0KLS0vLyBNb2R1bGVzDQpsb2NhbCBGbGFncw0KbG9jYWwgR2VuZXJhdGlvbg0KbG9jYWwgUHJvY2Vzcw0KbG9jYWwgSG9vayANCmxvY2FsIENvbmZpZw0KbG9jYWwgQ29tbXVuaWNhdGlvbg0KbG9jYWwgRmlsZXMNCg0KbG9jYWwgQWN0aXZlRGF0YSA9IG5pbA0KbG9jYWwgUmVtb3Rlc0NvdW50ID0gMA0KDQpsb2NhbCBUZXh0Rm9udCA9IEZvbnQuZnJvbUVudW0oRW51bS5Gb250LkNvZGUpDQpsb2NhbCBGb250U3VjY2VzcyA9IGZhbHNlDQoNCmZ1bmN0aW9uIFVpOkluaXQoRGF0YSkNCiAgICBsb2NhbCBNb2R1bGVzID0gRGF0YS5Nb2R1bGVzDQoJbG9jYWwgU2VydmljZXMgPSBEYXRhLlNlcnZpY2VzDQoNCgktLS8vIFNlcnZpY2VzDQoJSW5zZXJ0U2VydmljZSA9IFNlcnZpY2VzLkluc2VydFNlcnZpY2UNCg0KCS0tLy8gTW9kdWxlcw0KCUZsYWdzID0gTW9kdWxlcy5GbGFncw0KCUdlbmVyYXRpb24gPSBNb2R1bGVzLkdlbmVyYXRpb24NCglQcm9jZXNzID0gTW9kdWxlcy5Qcm9jZXNzDQoJSG9vayA9IE1vZHVsZXMuSG9vaw0KCUNvbmZpZyA9IE1vZHVsZXMuQ29uZmlnDQoJQ29tbXVuaWNhdGlvbiA9IE1vZHVsZXMuQ29tbXVuaWNhdGlvbg0KCUZpbGVzID0gTW9kdWxlcy5GaWxlcw0KDQoJLS0vLyBSZUd1aQ0KCXNlbGY6Q2hlY2tTY2FsZSgpDQoJc2VsZjpMb2FkRm9udCgpDQoJc2VsZjpMb2FkUmVHdWkoKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkNoZWNrU2NhbGUoKQ0KCWxvY2FsIEJhc2VDb25maWcgPSBzZWxmLkJhc2VDb25maWcNCglsb2NhbCBTY2FsZXMgPSBzZWxmLlNjYWxlcw0KDQoJbG9jYWwgSXNNb2JpbGUgPSBSZUd1aTpJc01vYmlsZURldmljZSgpDQoJbG9jYWwgRGV2aWNlID0gSXNNb2JpbGUgYW5kICJNb2JpbGUiIG9yICJEZXNrdG9wIg0KDQoJQmFzZUNvbmZpZy5TaXplID0gU2NhbGVzW0RldmljZV0NCmVuZA0KDQpmdW5jdGlvbiBVaTpTZXRDbGlwYm9hcmQoQ29udGVudDogc3RyaW5nKQ0KCVNldENsaXBib2FyZChDb250ZW50KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlR1cm5TZWFzb25hbChUZXh0OiBzdHJpbmcpOiBzdHJpbmcNCiAgICBsb2NhbCBTZWFzb25MYWJlbHMgPSBzZWxmLlNlYXNvbkxhYmVscw0KICAgIGxvY2FsIE1vbnRoID0gb3MuZGF0ZSgiJUIiKQ0KICAgIGxvY2FsIEJhc2UgPSBTZWFzb25MYWJlbHNbTW9udGhdDQoNCiAgICByZXR1cm4gQmFzZTpmb3JtYXQoVGV4dCkNCmVuZA0KDQpmdW5jdGlvbiBVaTpMb2FkRm9udCgpDQoJbG9jYWwgRm9udEZpbGUgPSBzZWxmLkZvbnRKc29uRmlsZQ0KDQoJLS0vLyBHZXQgRm9udEZhY2UgQXNzZXRJZA0KCWxvY2FsIEFzc2V0SWQgPSBGaWxlczpMb2FkQ3VzdG9tYXNzZXQoRm9udEZpbGUpDQoJaWYgbm90IEFzc2V0SWQgdGhlbiByZXR1cm4gZW5kDQoNCgktLS8vIENyZWF0ZSBjdXN0b20gRm9udEZhY2UNCglsb2NhbCBOZXdGb250ID0gRm9udC5uZXcoQXNzZXRJZCkNCglUZXh0Rm9udCA9IE5ld0ZvbnQNCglGb250U3VjY2VzcyA9IHRydWUNCmVuZA0KDQpmdW5jdGlvbiBVaTpTZXRGb250RmlsZShGb250RmlsZTogc3RyaW5nKQ0KCXNlbGYuRm9udEpzb25GaWxlID0gRm9udEZpbGUNCmVuZA0KDQpmdW5jdGlvbiBVaTpGb250V2FzU3VjY2Vzc2Z1bCgpDQoJaWYgRm9udFN1Y2Nlc3MgdGhlbiByZXR1cm4gZW5kDQoNCgktLS8vIEVycm9yIG1lc3NhZ2UNCglzZWxmOlNob3dNb2RhbCh7DQoJCSJVbmZvcnR1bmF0ZWx5IHlvdXIgZXhlY3V0b3Igd2FzIHVuYWJsZSB0byBkb3dubG9hZCB0aGUgZm9udCBhbmQgdGhlcmVmb3JlIHN3aXRjaGVkIHRvIHRoZSBEYXJrIHRoZW1lIiwNCgkJIlxuSWYgeW91IHdvdWxkIGxpa2UgdG8gdXNlIHRoZSBJbUd1aSB0aGVtZSwgXG5wbGVhc2UgZG93bmxvYWQgdGhlIGZvbnQgKGFzc2V0cy9Qcm9nZ3lDbGVhbi50dGYpIiwNCgkJImFuZCBwdXQgcHV0IGl0IGluIHlvdXIgd29ya3NwYWNlIGZvbGRlclxuKFNpZ21hIFNweS9hc3NldHMpIg0KCX0pDQplbmQNCg0KZnVuY3Rpb24gVWk6TG9hZFJlR3VpKCkNCglsb2NhbCBUaGVtZUNvbmZpZyA9IENvbmZpZy5UaGVtZUNvbmZpZw0KCVRoZW1lQ29uZmlnLlRleHRGb250ID0gVGV4dEZvbnQNCg0KCS0tLy8gUmVHdWkNCglsb2NhbCBQcmVmYWJzSWQgPSAicmJ4YXNzZXRpZDovLyIgLi4gUmVHdWkuUHJlZmFic0lkDQoJUmVHdWk6RGVmaW5lVGhlbWUoIlNpZ21hU3B5IiwgVGhlbWVDb25maWcpDQoJUmVHdWk6SW5pdCh7DQoJCVByZWZhYnMgPSBJbnNlcnRTZXJ2aWNlOkxvYWRMb2NhbEFzc2V0KFByZWZhYnNJZCkNCgl9KQ0KZW5kDQoNCnR5cGUgQ3JlYXRlQnV0dG9ucyA9IHsNCglCYXNlOiB0YWJsZSwNCglCdXR0b25zOiB0YWJsZSwNCglOb1RhYmxlOiBib29sZWFuPw0KfQ0KZnVuY3Rpb24gVWk6Q3JlYXRlQnV0dG9ucyhQYXJlbnQsIERhdGE6IENyZWF0ZUJ1dHRvbnMpDQoJbG9jYWwgQmFzZSA9IERhdGEuQmFzZQ0KCWxvY2FsIEJ1dHRvbnMgPSBEYXRhLkJ1dHRvbnMNCglsb2NhbCBOb1RhYmxlID0gRGF0YS5Ob1RhYmxlDQoNCgktLS8vIENyZWF0ZSB0YWJsZSBsYXlvdXQNCglpZiBub3QgTm9UYWJsZSB0aGVuDQoJCVBhcmVudCA9IFBhcmVudDpUYWJsZSh7DQoJCQlNYXhDb2x1bW5zID0gMw0KCQl9KTpOZXh0Um93KCkNCgllbmQNCg0KCS0tLy8gQ3JlYXRlIGJ1dHRvbnMNCglmb3IgXywgQnV0dG9uIGluIG5leHQsIEJ1dHRvbnMgZG8NCgkJbG9jYWwgQ29udGFpbmVyID0gUGFyZW50DQoJCWlmIG5vdCBOb1RhYmxlIHRoZW4NCgkJCUNvbnRhaW5lciA9IFBhcmVudDpOZXh0Q29sdW1uKCkNCgkJZW5kDQoNCgkJUmVHdWk6Q2hlY2tDb25maWcoQnV0dG9uLCBCYXNlKQ0KCQlDb250YWluZXI6QnV0dG9uKEJ1dHRvbikNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVXaW5kb3coT3ZlcndyaXRlczogdGFibGUpDQogICAgbG9jYWwgQmFzZUNvbmZpZyA9IHNlbGYuQmFzZUNvbmZpZw0KCWxvY2FsIENvbmZpZyA9IFByb2Nlc3M6RGVlcENsb25lVGFibGUoQmFzZUNvbmZpZykNCg0KCS0tLy8gTWVyZ2Ugb3ZlcndyaXRlcw0KCWlmIE92ZXJ3cml0ZXMgdGhlbg0KCQlNZXJnZShDb25maWcsIE92ZXJ3cml0ZXMpDQoJZW5kDQoJDQoJLS0vLyBDcmVhdGUgV2luZG93DQoJbG9jYWwgV2luZG93ID0gUmVHdWk6V2luZG93KENvbmZpZykNCg0KCS0tLy8gU3dpdGNoIHRvIERhcmtUaGVtZSBpbnN0ZWFkIG9mIHRoZSBJbUd1aSB0aGVtZSBpZiB0aGUgZm9udCBjYW5ub3QgYmUgbG9hZGVkDQoJaWYgbm90IEZvbnRTdWNjZXNzIHRoZW4gDQoJCVdpbmRvdzpTZXRUaGVtZSgiRGFya1RoZW1lIikNCgllbmQNCgkNCgktLS8vIENyZWF0ZSBXaW5kb3cNCglyZXR1cm4gV2luZG93DQplbmQNCg0KZnVuY3Rpb24gVWk6Q3JlYXRlTWFpbldpbmRvdygpDQoJbG9jYWwgV2luZG93ID0gc2VsZjpDcmVhdGVXaW5kb3coKQ0KCXNlbGYuV2luZG93ID0gV2luZG93DQoNCgktLS8vIENoZWNrIGlmIHRoZSBmb250IHdhcyBzdWNjZXNzZnVsbHkgZG93bmxvYWRlZA0KCXNlbGY6Rm9udFdhc1N1Y2Nlc3NmdWwoKQ0KCXNlbGY6QXVyYUNvdW50ZXJTZXJ2aWNlKCkNCg0KCS0tLy8gVWlWaXNpYmxlIGZsYWcgY2FsbGJhY2sNCglGbGFnczpTZXRGbGFnQ2FsbGJhY2soIlVpVmlzaWJsZSIsIGZ1bmN0aW9uKHNlbGYsIFZpc2libGUpDQoJCVdpbmRvdzpTZXRWaXNpYmxlKFZpc2libGUpDQoJZW5kKQ0KDQoJcmV0dXJuIFdpbmRvdw0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNob3dNb2RhbChMaW5lczogdGFibGUpDQoJbG9jYWwgV2luZG93ID0gc2VsZi5XaW5kb3cNCglsb2NhbCBNZXNzYWdlID0gdGFibGUuY29uY2F0KExpbmVzLCAiXG4iKQ0KDQoJLS0vLyBNb2RhbCBXaW5kb3cNCglsb2NhbCBNb2RhbFdpbmRvdyA9IFdpbmRvdzpQb3B1cE1vZGFsKHsNCgkJVGl0bGUgPSAiU2lnbWEgU3B5Ig0KCX0pDQoJTW9kYWxXaW5kb3c6TGFiZWwoew0KCQlUZXh0ID0gTWVzc2FnZSwNCgkJUmljaFRleHQgPSB0cnVlLA0KCQlUZXh0V3JhcHBlZCA9IHRydWUNCgl9KQ0KCU1vZGFsV2luZG93OkJ1dHRvbih7DQoJCVRleHQgPSAiT2theSIsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJTW9kYWxXaW5kb3c6Q2xvc2VQb3B1cCgpDQoJCWVuZCwNCgl9KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNob3dVbnN1cHBvcnRlZEV4ZWN1dG9yKE5hbWU6IHN0cmluZykNCglVaTpTaG93TW9kYWwoew0KCQkiVW5mb3J0dW5hdGVseSBTaWdtYSBTcHkgaXMgbm90IHN1cHBvcnRlZCBvbiB5b3VyIGV4ZWN1dG9yIiwNCgkJIlRoZSBiZXN0IGZyZWUgb3B0aW9uIGlzIFN3aWZ0IChkaXNjb3JkLmdnL2dldHN3aWZ0Z2cpIiwNCgkJYFxuWW91ciBleGVjdXRvcjoge05hbWV9YA0KCX0pDQplbmQNCg0KZnVuY3Rpb24gVWk6U2hvd1Vuc3VwcG9ydGVkKEZ1bmNOYW1lOiBzdHJpbmcpDQoJVWk6U2hvd01vZGFsKHsNCgkJIlVuZm9ydHVuYXRlbHkgU2lnbWEgU3B5IGlzIG5vdCBzdXBwb3J0ZWQgb24geW91ciBleGVjdXRvciIsDQoJCWBcbk1pc3NpbmcgZnVuY3Rpb246IHtGdW5jTmFtZX1gDQoJfSkNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVPcHRpb25zRm9yRGljdChQYXJlbnQsIERpY3Q6IHRhYmxlLCBDYWxsYmFjaykNCglsb2NhbCBPcHRpb25zID0ge30NCg0KCS0tLy8gRGljdG9uYXJ5IHdyYXANCglmb3IgS2V5LCBWYWx1ZSBpbiBuZXh0LCBEaWN0IGRvDQoJCU9wdGlvbnNbS2V5XSA9IHsNCgkJCVZhbHVlID0gVmFsdWUsDQoJCQlMYWJlbCA9IEtleSwNCgkJCUNhbGxiYWNrID0gZnVuY3Rpb24oXywgVmFsdWUpDQoJCQkJRGljdFtLZXldID0gVmFsdWUNCg0KCQkJCS0tLy8gSW52b2tlIGNhbGxiYWNrDQoJCQkJaWYgbm90IENhbGxiYWNrIHRoZW4gcmV0dXJuIGVuZA0KCQkJCUNhbGxiYWNrKCkNCgkJCWVuZA0KCQl9DQoJZW5kDQoNCgktLS8vIENyZWF0ZSBlbGVtZW50cw0KCXNlbGY6Q3JlYXRlRWxlbWVudHMoUGFyZW50LCBPcHRpb25zKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkNoZWNrS2V5YmluZExheW91dChDb250YWluZXIsIEtleUNvZGU6IEVudW0uS2V5Q29kZSwgQ2FsbGJhY2spDQoJaWYgbm90IEtleUNvZGUgdGhlbiByZXR1cm4gQ29udGFpbmVyIGVuZA0KDQoJLS0vLyBDcmVhdGUgUm93IGxheW91dA0KCUNvbnRhaW5lciA9IENvbnRhaW5lcjpSb3coew0KCQlIb3Jpem9udGFsRmxleCA9IEVudW0uVUlGbGV4QWxpZ25tZW50LlNwYWNlQmV0d2Vlbg0KCX0pDQoNCgktLS8vIEFkZCBLZXliaW5kIGVsZW1lbnQNCglDb250YWluZXI6S2V5YmluZCh7DQoJCUxhYmVsID0gIiIsDQoJCVZhbHVlID0gS2V5Q29kZSwNCgkJTGF5b3V0T3JkZXIgPSAyLA0KCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCS0tLy8gQ2hlY2sgaWYga2V5YmluZHMgYXJlIGVuYWJsZWQNCgkJCWxvY2FsIEVuYWJsZWQgPSBGbGFnczpHZXRGbGFnVmFsdWUoIktleWJpbmRzRW5hYmxlZCIpDQoJCQlpZiBub3QgRW5hYmxlZCB0aGVuIHJldHVybiBlbmQNCg0KCQkJLS0vLyBJbnZva2UgY2FsbGJhY2sNCgkJCUNhbGxiYWNrKCkNCgkJZW5kLA0KCX0pDQoNCglyZXR1cm4gQ29udGFpbmVyDQplbmQNCg0KZnVuY3Rpb24gVWk6Q3JlYXRlRWxlbWVudHMoUGFyZW50LCBPcHRpb25zKQ0KCWxvY2FsIE9wdGlvblR5cGVzID0gc2VsZi5PcHRpb25UeXBlcw0KCQ0KCS0tLy8gQ3JlYXRlIHRhYmxlIGxheW91dA0KCWxvY2FsIFRhYmxlID0gUGFyZW50OlRhYmxlKHsNCgkJTWF4Q29sdW1ucyA9IDMNCgl9KTpOZXh0Um93KCkNCg0KCWZvciBOYW1lLCBEYXRhIGluIE9wdGlvbnMgZG8NCgkJbG9jYWwgVmFsdWUgPSBEYXRhLlZhbHVlDQoJCWxvY2FsIFR5cGUgPSB0eXBlb2YoVmFsdWUpDQoNCgkJLS0vLyBBZGQgbWlzc2luZyB2YWx1ZXMgaW50byBvcHRpb25zIHRhYmxlDQoJCVJlR3VpOkNoZWNrQ29uZmlnKERhdGEsIHsNCgkJCUNsYXNzID0gT3B0aW9uVHlwZXNbVHlwZV0sDQoJCQlMYWJlbCA9IE5hbWUsDQoJCX0pDQoJCQ0KCQktLS8vIENoZWNrIGlmIGEgZWxlbWVudCB0eXBlIGV4aXN0cyBmb3IgdmFsdWUgdHlwZQ0KCQlsb2NhbCBDbGFzcyA9IERhdGEuQ2xhc3MNCgkJYXNzZXJ0KENsYXNzLCBgTm8ge1R5cGV9IHR5cGUgZXhpc3RzIGZvciBvcHRpb25gKQ0KDQoJCWxvY2FsIENvbnRhaW5lciA9IFRhYmxlOk5leHRDb2x1bW4oKQ0KCQlsb2NhbCBDaGVja2JveCA9IG5pbA0KDQoJCS0tLy8gQ2hlY2sgZm9yIGEga2V5YmluZCBsYXlvdXQNCgkJbG9jYWwgS2V5YmluZCA9IERhdGEuS2V5YmluZA0KCQlDb250YWluZXIgPSBzZWxmOkNoZWNrS2V5YmluZExheW91dChDb250YWluZXIsIEtleWJpbmQsIGZ1bmN0aW9uKCkNCgkJCUNoZWNrYm94OlRvZ2dsZSgpDQoJCWVuZCkNCgkJDQoJCS0tLy8gQ3JlYXRlIGNvbHVtbiBhbmQgZWxlbWVudA0KCQlDaGVja2JveCA9IENvbnRhaW5lcltDbGFzc10oQ29udGFpbmVyLCBEYXRhKQ0KCWVuZA0KZW5kDQoNCi0tLy8gQm9paWlpIHdoYXQgZGlkIHlvdSBzYXkgYWJvdXQgU2lnbWEgU3B5IPCfkoDwn5KADQpmdW5jdGlvbiBVaTpEaXNwbGF5QXVyYSgpDQogICAgbG9jYWwgV2luZG93ID0gc2VsZi5XaW5kb3cNCiAgICBsb2NhbCBSYW5kID0gc2VsZi5SYW5kb21TZWVkDQoNCgktLS8vIEF1cmEgKGJvaWlpaWkpDQogICAgbG9jYWwgQVVSQSA9IFJhbmQ6TmV4dEludGVnZXIoMSwgOTk5OTk5OSkNCiAgICBsb2NhbCBBVVJBREVMQVkgPSBSYW5kOk5leHRJbnRlZ2VyKDEsIDUpDQoNCgktLS8vIFRpdGxlDQoJbG9jYWwgVGl0bGUgPSBgIFNpZ21hIFNweSAtIERlcHNvIHwgQVVSQToge0FVUkF9IGANCglsb2NhbCBTZWFzb25hbCA9IHNlbGY6VHVyblNlYXNvbmFsKFRpdGxlKQ0KICAgIFdpbmRvdzpTZXRUaXRsZShTZWFzb25hbCkNCg0KICAgIHdhaXQoQVVSQURFTEFZKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkF1cmFDb3VudGVyU2VydmljZSgpDQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpDQogICAgICAgIHdoaWxlIHRydWUgZG8NCiAgICAgICAgICAgIHNlbGY6RGlzcGxheUF1cmEoKQ0KICAgICAgICBlbmQNCiAgICBlbmQpDQplbmQNCg0KZnVuY3Rpb24gVWk6Q3JlYXRlV2luZG93Q29udGVudChXaW5kb3cpDQogICAgLS0vLyBXaW5kb3cgZ3JvdXANCiAgICBsb2NhbCBMYXlvdXQgPSBXaW5kb3c6TGlzdCh7DQogICAgICAgIFVpUGFkZGluZyA9IDIsDQogICAgICAgIEhvcml6b250YWxGbGV4ID0gRW51bS5VSUZsZXhBbGlnbm1lbnQuRmlsbCwNCiAgICAgICAgVmVydGljYWxGbGV4ID0gRW51bS5VSUZsZXhBbGlnbm1lbnQuRmlsbCwNCiAgICAgICAgRmlsbERpcmVjdGlvbiA9IEVudW0uRmlsbERpcmVjdGlvbi5WZXJ0aWNhbCwNCiAgICAgICAgRmlsbCA9IHRydWUNCiAgICB9KQ0KDQoJLS0vLyBSZW1vdGVzIGxpc3QNCiAgICBzZWxmLlJlbW90ZXNMaXN0ID0gTGF5b3V0OkNhbnZhcyh7DQogICAgICAgIFNjcm9sbCA9IHRydWUsDQogICAgICAgIFVpUGFkZGluZyA9IDUsDQogICAgICAgIEF1dG9tYXRpY1NpemUgPSBFbnVtLkF1dG9tYXRpY1NpemUuTm9uZSwNCiAgICAgICAgRmxleE1vZGUgPSBFbnVtLlVJRmxleE1vZGUuTm9uZSwNCiAgICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCAxMzAsIDEsIDApDQogICAgfSkNCg0KCS0tLy8gVGFiIGJveA0KCWxvY2FsIEluZm9TZWxlY3RvciA9IExheW91dDpUYWJTZWxlY3Rvcih7DQogICAgICAgIE5vQW5pbWF0aW9uID0gdHJ1ZSwNCiAgICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAtMTMwLCAwLjQsIDApLA0KICAgIH0pDQoNCglzZWxmLkluZm9TZWxlY3RvciA9IEluZm9TZWxlY3Rvcg0KCXNlbGYuQ2FudmFzTGF5b3V0ID0gTGF5b3V0DQoNCgktLS8vIE1ha2UgdGFicw0KCXNlbGY6TWFrZUVkaXRvclRhYihJbmZvU2VsZWN0b3IpDQoJc2VsZjpNYWtlT3B0aW9uc1RhYihJbmZvU2VsZWN0b3IpDQplbmQNCg0KZnVuY3Rpb24gVWk6TWFrZU9wdGlvbnNUYWIoSW5mb1NlbGVjdG9yKQ0KCS0tLy8gVGFiU2VsZWN0b3INCglsb2NhbCBPcHRpb25zVGFiID0gSW5mb1NlbGVjdG9yOkNyZWF0ZVRhYih7DQoJCU5hbWUgPSAiT3B0aW9ucyINCgl9KQ0KDQoJLS0vLyBBZGQgZ2xvYmFsIG9wdGlvbnMNCglPcHRpb25zVGFiOlNlcGFyYXRvcih7VGV4dD0iTG9ncyJ9KQ0KCXNlbGY6Q3JlYXRlQnV0dG9ucyhPcHRpb25zVGFiLCB7DQoJCUJhc2UgPSB7DQoJCQlTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDIwKSwNCgkJCUF1dG9tYXRpY1NpemUgPSBFbnVtLkF1dG9tYXRpY1NpemUuWSwNCgkJfSwNCgkJQnV0dG9ucyA9IHsNCgkJCXsNCgkJCQlUZXh0ID0gIkNsZWFyIGxvZ3MiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBUYWIgPSBBY3RpdmVEYXRhIGFuZCBBY3RpdmVEYXRhLlRhYiBvciBuaWwNCg0KCQkJCQktLS8vIFJlbW92ZSB0aGUgUmVtb3RlIHRhYg0KCQkJCQlpZiBUYWIgdGhlbg0KCQkJCQkJSW5mb1NlbGVjdG9yOlJlbW92ZVRhYihUYWIpDQoJCQkJCWVuZA0KDQoJCQkJCS0tLy8gQ2xlYXIgYWxsIGxvZyBlbGVtZW50cw0KCQkJCQlBY3RpdmVEYXRhID0gbmlsDQoJCQkJCXNlbGY6Q2xlYXJMb2dzKCkNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiQ2xlYXIgYmxvY2tzIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJUHJvY2VzczpVcGRhdGVBbGxSZW1vdGVEYXRhKCJCbG9ja2VkIiwgZmFsc2UpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkNsZWFyIGV4Y2x1ZGVzIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJUHJvY2VzczpVcGRhdGVBbGxSZW1vdGVEYXRhKCJFeGNsdWRlZCIsIGZhbHNlKQ0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJDb3B5IERpc2NvcmQiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlzZWxmOlNldENsaXBib2FyZCgiaHR0cHM6Ly9kaXNjb3JkLmdnL3M5bmdtVURXZ2IiKQ0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJDb3B5IEdpdGh1YiIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCXNlbGY6U2V0Q2xpcGJvYXJkKCJodHRwczovL2dpdGh1Yi5jb20vZGVwdGhzby9TaWdtYS1TcHkiKQ0KCQkJCWVuZCwNCgkJCX0NCgkJfQ0KCX0pDQoNCgktLS8vIEZsYWcgb3B0aW9ucw0KCU9wdGlvbnNUYWI6U2VwYXJhdG9yKHtUZXh0PSJTZXR0aW5ncyJ9KQ0KCXNlbGY6Q3JlYXRlRWxlbWVudHMoT3B0aW9uc1RhYiwgRmxhZ3M6R2V0RmxhZ3MoKSkNCg0KCXNlbGY6QWRkRGV0YWlsc1NlY3Rpb24oT3B0aW9uc1RhYikNCmVuZA0KDQpmdW5jdGlvbiBVaTpBZGREZXRhaWxzU2VjdGlvbihPcHRpb25zVGFiKQ0KCU9wdGlvbnNUYWI6U2VwYXJhdG9yKHtUZXh0PSJJbmZvcm1hdGlvbiJ9KQ0KCU9wdGlvbnNUYWI6QnVsbGV0VGV4dCh7DQoJCVJvd3MgPSB7DQoJCQkiU2lnbWEgc3B5IC0gV3JpdHRlbiBieSBkZXBzbyEiLA0KCQkJIkxpYnJhcmllczogUm9ibG94LVBhcnNlciwgRGVhci1SZUd1aSIsDQoJCQkiVGhhbmsgeW91IHRvIHN5biBmb3IgeW91ciBzdWdnZXN0aW9ucyBhbmQgdGVzdGluZyINCgkJfQ0KCX0pDQplbmQNCg0KbG9jYWwgZnVuY3Rpb24gTWFrZUFjdGl2ZURhdGFDYWxsYmFjayhOYW1lOiBzdHJpbmcpDQoJcmV0dXJuIGZ1bmN0aW9uKC4uLikNCgkJaWYgbm90IEFjdGl2ZURhdGEgdGhlbiByZXR1cm4gZW5kDQoJCXJldHVybiBBY3RpdmVEYXRhW05hbWVdKEFjdGl2ZURhdGEsIC4uLikNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpNYWtlRWRpdG9yVGFiKEluZm9TZWxlY3RvcikNCglsb2NhbCBEZWZhdWx0ID0gc2VsZi5EZWZhdWx0RWRpdG9yQ29udGVudA0KCWxvY2FsIFdpbmRvdyA9IHNlbGYuV2luZG93DQoNCglsb2NhbCBTeW50YXhDb2xvcnMgPSBDb25maWcuU3ludGF4Q29sb3JzDQoNCgktLS8vIENyZWF0ZSB0YWINCglsb2NhbCBFZGl0b3JUYWIgPSBJbmZvU2VsZWN0b3I6Q3JlYXRlVGFiKHsNCgkJTmFtZSA9ICJFZGl0b3IiDQoJfSkNCg0KCS0tLy8gSURFDQoJbG9jYWwgQ29kZUVkaXRvciA9IEVkaXRvclRhYjpDb2RlRWRpdG9yKHsNCgkJRmlsbCA9IHRydWUsDQoJCUVkaXRhYmxlID0gdHJ1ZSwNCgkJRm9udFNpemUgPSAxMywNCgkJQ29sb3JzID0gU3ludGF4Q29sb3JzLA0KCQlGb250RmFjZSA9IFRleHRGb250LA0KCQlUZXh0ID0gRGVmYXVsdA0KCX0pDQoNCgktLS8vIENvbmZpZ3VyZSBJREUgZnJhbWUNCglSZUd1aTpBcHBseUZsYWdzKHsNCgkJT2JqZWN0ID0gQ29kZUVkaXRvci5HdWksDQoJCVdpbmRvd0NsYXNzID0gV2luZG93LA0KCQlDbGFzcyA9IHsNCgkJCS0tQm9yZGVyID0gdHJ1ZSwNCgkJCUZpbGwgPSB0cnVlLA0KCQkJQWN0aXZlID0gdHJ1ZSwNCgkJCVBhcmVudCA9IEVkaXRvclRhYjpHZXRPYmplY3QoKSwNCgkJCUJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLA0KCQl9DQoJfSkNCg0KCS0tLy8gQnV0dG9ucw0KCWxvY2FsIEJ1dHRvbnNSb3cgPSBFZGl0b3JUYWI6Um93KCkNCglzZWxmOkNyZWF0ZUJ1dHRvbnMoQnV0dG9uc1Jvdywgew0KCQlCYXNlID0ge30sDQoJCU5vVGFibGUgPSB0cnVlLA0KCQlCdXR0b25zID0gew0KCQkJew0KCQkJCVRleHQgPSAiQ29weSIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIFNjcmlwdCA9IENvZGVFZGl0b3I6R2V0VGV4dCgpDQoJCQkJCXNlbGY6U2V0Q2xpcGJvYXJkKFNjcmlwdCkNCgkJCQllbmQNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJSdW4iLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBTY3JpcHQgPSBDb2RlRWRpdG9yOkdldFRleHQoKQ0KCQkJCQlsb2Fkc3RyaW5nKFNjcmlwdCwgIlNpZ21hU3B5LVVTRVJTQ1JJUFQiKSgpDQoJCQkJZW5kDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiR2V0IHJldHVybiIsDQoJCQkJQ2FsbGJhY2sgPSBNYWtlQWN0aXZlRGF0YUNhbGxiYWNrKCJHZXRSZXR1cm4iKQ0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIlNjcmlwdCIsDQoJCQkJQ2FsbGJhY2sgPSBNYWtlQWN0aXZlRGF0YUNhbGxiYWNrKCJTY3JpcHRPcHRpb25zIikNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJCdWlsZCIsDQoJCQkJQ2FsbGJhY2sgPSBNYWtlQWN0aXZlRGF0YUNhbGxiYWNrKCJCdWlsZFNjcmlwdCIpDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiUG9wLW91dCIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIFNjcmlwdCA9IENvZGVFZGl0b3I6R2V0VGV4dCgpDQoJCQkJCWxvY2FsIFRpbGUgPSBBY3RpdmVEYXRhIGFuZCBBY3RpdmVEYXRhLlRhc2sgb3IgIlNpZ21hIFNweSINCgkJCQkJc2VsZjpNYWtlRWRpdG9yUG9wb3V0V2luZG93KFNjcmlwdCwgew0KCQkJCQkJVGl0bGUgPSBUaWxlDQoJCQkJCX0pDQoJCQkJZW5kDQoJCQl9LA0KCQl9DQoJfSkNCgkNCglzZWxmLkNvZGVFZGl0b3IgPSBDb2RlRWRpdG9yDQplbmQNCg0KZnVuY3Rpb24gVWk6U2hvdWxkRm9jdXMoVGFiKTogYm9vbGVhbg0KCWxvY2FsIEluZm9TZWxlY3RvciA9IHNlbGYuSW5mb1NlbGVjdG9yDQoJbG9jYWwgQWN0aXZlVGFiID0gSW5mb1NlbGVjdG9yLkFjdGl2ZVRhYg0KDQoJLS0vLyBJZiB0aGVyZSBpcyBhbiBlbXB0eSB0YWINCglpZiBub3QgQWN0aXZlVGFiIHRoZW4NCgkJcmV0dXJuIHRydWUNCgllbmQNCg0KCXJldHVybiBJbmZvU2VsZWN0b3I6Q29tcGFyZVRhYnMoQWN0aXZlVGFiLCBUYWIpDQplbmQNCg0KZnVuY3Rpb24gVWk6TWFrZUVkaXRvclBvcG91dFdpbmRvdyhDb250ZW50OiBzdHJpbmcsIFdpbmRvd0NvbmZpZzogdGFibGUpDQoJbG9jYWwgV2luZG93ID0gc2VsZjpDcmVhdGVXaW5kb3coV2luZG93Q29uZmlnKQ0KCWxvY2FsIENvZGVFZGl0b3IgPSBXaW5kb3c6Q29kZUVkaXRvcih7DQoJCVRleHQgPSBDb250ZW50LA0KCQlFZGl0YWJsZSA9IHRydWUsDQoJCUZvbnRTaXplID0gMTMsDQoJCUNvbG9ycyA9IFN5bnRheENvbG9ycywNCgkJRm9udEZhY2UgPSBUZXh0Rm9udA0KCX0pDQoNCglXaW5kb3c6Q2VudGVyKCkNCglyZXR1cm4gQ29kZUVkaXRvcg0KZW5kDQoNCnR5cGUgTWVudU9wdGlvbnMgPSB7DQoJW3N0cmluZ106IChHdWlCdXR0b24sIC4uLmFueSkgLT4gbmlsDQp9DQpmdW5jdGlvbiBVaTpNYWtlQnV0dG9uTWVudShCdXR0b246IEluc3RhbmNlLCBVbnBhY2s6IHRhYmxlLCBPcHRpb25zOiBNZW51T3B0aW9ucykNCglsb2NhbCBXaW5kb3cgPSBzZWxmLldpbmRvdw0KCWxvY2FsIFBvcHVwID0gV2luZG93OlBvcHVwQ2FudmFzKHsNCgkJUmVsYXRpdmVUbyA9IEJ1dHRvbiwNCgkJTWF4U2l6ZVggPSA1MDAsDQoJfSkNCg0KCS0tLy8gQ3JlYXRlIFNlbGVjdGFibGVzIGZvciBzdHJpbmcsIGZ1bmN0aW9uDQoJZm9yIE5hbWUsIEZ1bmMgaW4gT3B0aW9ucyBkbw0KCQkgUG9wdXA6U2VsZWN0YWJsZSh7DQoJCQlUZXh0ID0gTmFtZSwNCgkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCUZ1bmMoUHJvY2VzczpVbnBhY2soVW5wYWNrKSkNCgkJCWVuZCwNCgkJfSkNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpSZW1vdmVQcmV2aW91c1RhYihUaXRsZTogc3RyaW5nKTogYm9vbGVhbg0KCS0tLy8gTm8gcHJldmlvdXMgdGFicw0KCWlmIG5vdCBBY3RpdmVEYXRhIHRoZW4gDQoJCXJldHVybiBmYWxzZSANCgllbmQNCg0KCS0tLy8gVGFiU2VsZWN0b3INCglsb2NhbCBJbmZvU2VsZWN0b3IgPSBzZWxmLkluZm9TZWxlY3Rvcg0KDQoJLS0vLyBQcmV2aW91cyBlbGVtZW50cw0KCWxvY2FsIFByZXZpb3VzVGFiID0gQWN0aXZlRGF0YS5UYWINCglsb2NhbCBQcmV2aW91c1NlbGVjdGFibGUgPSBBY3RpdmVEYXRhLlNlbGVjdGFibGUNCg0KCS0tLy8gUmVtb3ZlIHByZXZpb3VzIHRhYiBhbmQgc2V0IHNlbGVjdGFibGUgZm9jdXMNCglsb2NhbCBUYWJGb2N1c2VkID0gc2VsZjpTaG91bGRGb2N1cyhQcmV2aW91c1RhYikNCglJbmZvU2VsZWN0b3I6UmVtb3ZlVGFiKFByZXZpb3VzVGFiKQ0KCVByZXZpb3VzU2VsZWN0YWJsZTpTZXRTZWxlY3RlZChmYWxzZSkNCg0KCS0tLy8gQ3JlYXRlIG5ldyB0YWINCglyZXR1cm4gVGFiRm9jdXNlZA0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNldEZvY3VzZWRSZW1vdGUoRGF0YSkNCgktLS8vIFVucGFjayByZW1vdGUgZGF0YQ0KCWxvY2FsIFJlbW90ZSA9IERhdGEuUmVtb3RlDQoJbG9jYWwgTWV0aG9kID0gRGF0YS5NZXRob2QNCglsb2NhbCBJc1JlY2VpdmUgPSBEYXRhLklzUmVjZWl2ZQ0KCWxvY2FsIFNjcmlwdCA9IERhdGEuQ2FsbGluZ1NjcmlwdA0KCWxvY2FsIFNvdXJjZVNjcmlwdCA9IERhdGEuU291cmNlU2NyaXB0DQoJbG9jYWwgQ2xhc3NEYXRhID0gRGF0YS5DbGFzc0RhdGENCglsb2NhbCBIZWFkZXJEYXRhID0gRGF0YS5IZWFkZXJEYXRhDQoJbG9jYWwgVmFsdWVTd2FwcyA9IERhdGEuVmFsdWVTd2Fwcw0KCWxvY2FsIEFyZ3MgPSBEYXRhLkFyZ3MNCglsb2NhbCBJZCA9IERhdGEuSWQNCg0KCS0tLy8gRmxhZ3MNCglsb2NhbCBUYWJsZUFyZ3MgPSBGbGFnczpHZXRGbGFnVmFsdWUoIlRhYmxlQXJncyIpDQoJbG9jYWwgTm9WYXJpYWJsZXMgPSBGbGFnczpHZXRGbGFnVmFsdWUoIk5vVmFyaWFibGVzIikNCg0KCS0tLy8gVW5wYWNrIGluZm8NCglsb2NhbCBSZW1vdGVEYXRhID0gUHJvY2VzczpHZXRSZW1vdGVEYXRhKElkKQ0KCWxvY2FsIElzUmVtb3RlRnVuY3Rpb24gPSBDbGFzc0RhdGEuSXNSZW1vdGVGdW5jdGlvbg0KDQoJLS0vLyBVSSBkYXRhDQoJbG9jYWwgQ29kZUVkaXRvciA9IHNlbGYuQ29kZUVkaXRvcg0KCWxvY2FsIFRvRGlzcGxheSA9IHNlbGYuRGlzcGxheVJlbW90ZUluZm8NCglsb2NhbCBJbmZvU2VsZWN0b3IgPSBzZWxmLkluZm9TZWxlY3Rvcg0KDQoJbG9jYWwgVGFiRm9jdXNlZCA9IHNlbGY6UmVtb3ZlUHJldmlvdXNUYWIoKQ0KCWxvY2FsIFRhYiA9IEluZm9TZWxlY3RvcjpDcmVhdGVUYWIoew0KCQlOYW1lID0gc2VsZjpGaWx0ZXJOYW1lKGBSZW1vdGU6IHtSZW1vdGV9YCwgNTApLA0KCQlGb2N1c2VkID0gVGFiRm9jdXNlZA0KCX0pDQoNCgktLS8vIENyZWF0ZSBuZXcgcGFyc2VyDQoJbG9jYWwgTW9kdWxlID0gR2VuZXJhdGlvbjpOZXdQYXJzZXIoew0KCQlOb1ZhcmlhYmxlcyA9IE5vVmFyaWFibGVzDQoJfSkNCglsb2NhbCBQYXJzZXIgPSBNb2R1bGUuUGFyc2VyDQoJbG9jYWwgRm9ybWF0dGVyID0gTW9kdWxlLkZvcm1hdHRlcg0KCUZvcm1hdHRlcjpTZXRWYWx1ZVN3YXBzKFZhbHVlU3dhcHMpDQoNCgktLS8vIFNldCB0aGlzIGxvZyB0byBiZSBzZWxlY3RlZA0KCUFjdGl2ZURhdGEgPSBEYXRhDQoJRGF0YS5UYWIgPSBUYWINCglEYXRhLlNlbGVjdGFibGU6U2V0U2VsZWN0ZWQodHJ1ZSkNCg0KCWxvY2FsIGZ1bmN0aW9uIFNldElERVRleHQoQ29udGVudDogc3RyaW5nLCBUYXNrOiBzdHJpbmcpDQoJCURhdGEuVGFzayA9IFRhc2sgb3IgIlNpZ21hIFNweSINCgkJQ29kZUVkaXRvcjpTZXRUZXh0KENvbnRlbnQpDQoJZW5kDQoJbG9jYWwgZnVuY3Rpb24gRGF0YUNvbm5lY3Rpb24oTmFtZSwgLi4uKQ0KCQlsb2NhbCBBcmdzID0gey4uLn0NCgkJcmV0dXJuIGZ1bmN0aW9uKCkNCgkJCXJldHVybiBEYXRhW05hbWVdKERhdGEsIFByb2Nlc3M6VW5wYWNrKEFyZ3MpKQ0KCQllbmQNCgllbmQNCg0KCS0tLy8gRnVuY3Rpb25zDQoJZnVuY3Rpb24gRGF0YTpTY3JpcHRPcHRpb25zKEJ1dHRvbjogR3VpQnV0dG9uKQ0KCQlVaTpNYWtlQnV0dG9uTWVudShCdXR0b24sIHtzZWxmfSwgew0KCQkJWyJDYWxsZXIgSW5mbyJdID0gRGF0YUNvbm5lY3Rpb24oIkdlbmVyYXRlSW5mbyIpLA0KCQkJWyJEZWNvbXBpbGUiXSA9IERhdGFDb25uZWN0aW9uKCJEZWNvbXBpbGUiLCAiU291cmNlU2NyaXB0IiksDQoJCQlbIkRlY29tcGlsZSBDYWxsaW5nIl0gPSBEYXRhQ29ubmVjdGlvbigiRGVjb21waWxlIiwgIkNhbGxpbmdTY3JpcHQiKQ0KCQl9KQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6QnVpbGRTY3JpcHQoQnV0dG9uOiBHdWlCdXR0b24pDQoJCVVpOk1ha2VCdXR0b25NZW51KEJ1dHRvbiwge3NlbGZ9LCB7DQoJCQlbIkNhbGwgUmVtb3RlIl0gPSBEYXRhQ29ubmVjdGlvbigiTWFrZVNjcmlwdCIsICJSZW1vdGUiKSwNCgkJCVsiQmxvY2sgUmVtb3RlIl0gPSBEYXRhQ29ubmVjdGlvbigiTWFrZVNjcmlwdCIsICJCbG9jayIpLA0KCQkJWyJSZXBlYXQgRm9yIl0gPSBEYXRhQ29ubmVjdGlvbigiTWFrZVNjcmlwdCIsICJSZXBlYXQiKSwNCgkJCVsiU3BhbSBSZW1vdGUiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIlNwYW0iKQ0KCQl9KQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6TWFrZVNjcmlwdChTY3JpcHRUeXBlOiBzdHJpbmcpDQoJCWxvY2FsIFNjcmlwdCA9IEdlbmVyYXRpb246UmVtb3RlU2NyaXB0KE1vZHVsZSwgc2VsZiwgU2NyaXB0VHlwZSkNCgkJU2V0SURFVGV4dChTY3JpcHQsIGBFZGl0aW5nOiB7UmVtb3RlfS5sdWFgKQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6UmVwZWF0Q2FsbCgpDQoJCWxvY2FsIFNpZ25hbCA9IEhvb2s6SW5kZXgoUmVtb3RlLCBNZXRob2QpDQoNCgkJaWYgSXNSZWNlaXZlIHRoZW4NCgkJCWZpcmVzaWduYWwoU2lnbmFsLCBQcm9jZXNzOlVucGFjayhBcmdzKSkNCgkJZWxzZQ0KCQkJU2lnbmFsKFJlbW90ZSwgUHJvY2VzczpVbnBhY2soQXJncykpDQoJCWVuZA0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6R2V0UmV0dXJuKCkNCgkJbG9jYWwgUmV0dXJuVmFsdWVzID0gc2VsZi5SZXR1cm5WYWx1ZXMNCg0KCQlpZiBub3QgSXNSZW1vdGVGdW5jdGlvbiB0aGVuDQoJCQlTZXRJREVUZXh0KCItLSBSZW1vdGUgaXMgbm90IGEgZnVuY3Rpb24gYm96byAoLTk5OTk5OTkgQVVSQSkiKQ0KCQkJcmV0dXJuDQoJCWVuZA0KCQlpZiBub3QgUmV0dXJuVmFsdWVzIHRoZW4NCgkJCVNldElERVRleHQoIi0tIE5vIHJldHVybiB2YWx1ZXMgKC05OTk5OTk5IEFVUkEpIikNCgkJCXJldHVybg0KCQllbmQNCg0KCQktLS8vIEdlbmVyYXRlIHNjcmlwdA0KCQlsb2NhbCBTY3JpcHQgPSBHZW5lcmF0aW9uOlRhYmxlU2NyaXB0KE1vZHVsZSwgUmV0dXJuVmFsdWVzKQ0KCQlTZXRJREVUZXh0KFNjcmlwdCwgYFJldHVybiBWYWx1ZXMgZm9yOiB7UmVtb3RlfWApDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpHZW5lcmF0ZUluZm8oKQ0KCQktLS8vIFJlamVjdCBjbGllbnQgZXZlbnRzDQoJCWlmIElzUmVjZWl2ZSB0aGVuIA0KCQkJbG9jYWwgU2NyaXB0ID0gIi0tIEJvaWlpaWkgd2hhdCBkaWQgeW91IHNheSBhYm91dCBJc1JlY2VpdmUgKC05OTk5OTk5IEFVUkEpXG4iDQoJCQlTY3JpcHQgLi49ICJcbi0tIFZvaWNlIG1lc3NhZ2U6IOKWtiAuxLFsxLHEsWzEscSxbMSxxLFsxLHEsWzEscSxbMSxLiAwOjY5XG4iDQoNCgkJCVNldElERVRleHQoU2NyaXB0KQ0KCQkJcmV0dXJuIA0KCQllbmQNCg0KCQktLS8vIEdlbmVyYXRlIHNjcmlwdA0KCQlsb2NhbCBTY3JpcHQgPSBHZW5lcmF0aW9uOkFkdmFuY2VkSW5mbyhNb2R1bGUsIHNlbGYpDQoJCVNldElERVRleHQoU2NyaXB0LCBgQWR2YW5jZWQgSW5mbyBmb3I6IHtSZW1vdGV9YCkNCgllbmQNCglmdW5jdGlvbiBEYXRhOkRlY29tcGlsZShXaGljaFNjcmlwdDogc3RyaW5nKQ0KCQlsb2NhbCBUb0RlY29tcGlsZSA9IERhdGFbV2hpY2hTY3JpcHRdDQoNCgkJLS0vLyBDaGVjayBpZiBzY3JpcHQgZXhpc3RzDQoJCWlmIG5vdCBTY3JpcHQgdGhlbiANCgkJCVNldElERVRleHQoIi0tU2NyaXB0IGlzIG1pc3NpbmcgKC05OTk5OTk5IEFVUkEpIikNCgkJCXJldHVybg0KCQllbmQNCg0KCQlTZXRJREVUZXh0KCItLURlY29tcGlsaW5nLi4uICs5OTk5OTk5IEFVUkEgKG1hbmdvIHBob25rKSIpDQoNCgkJLS0vLyBEZWNvbXBpbGUgc2NyaXB0DQoJCWxvY2FsIERlY29tcGlsZWQgPSBQcm9jZXNzOkRlY29tcGlsZShUb0RlY29tcGlsZSkNCgkJbG9jYWwgU291cmNlID0gIi0tQk9PSUlJSSBUSElTIElTIFNPIFRVRkYgRkxJUFBZIFNLSUJJREkgQVVSQSAoU0lHTUEgU1BZKVxuIg0KCQlTb3VyY2UgLi49ICBEZWNvbXBpbGVkDQoNCgkJU2V0SURFVGV4dChTb3VyY2UsIGBWaWV3aW5nOiB7VG9EZWNvbXBpbGV9Lmx1YWApDQoJZW5kDQoJDQoJLS0vLyBSZW1vdGVPcHRpb25zDQoJc2VsZjpDcmVhdGVPcHRpb25zRm9yRGljdChUYWIsIFJlbW90ZURhdGEsIGZ1bmN0aW9uKCkNCgkJUHJvY2VzczpVcGRhdGVSZW1vdGVEYXRhKElkLCBSZW1vdGVEYXRhKQ0KCWVuZCkNCg0KCS0tLy8gSW5zdGFuY2Ugb3B0aW9ucw0KCXNlbGY6Q3JlYXRlQnV0dG9ucyhUYWIsIHsNCgkJQmFzZSA9IHsNCgkJCVNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjApLA0KCQkJQXV0b21hdGljU2l6ZSA9IEVudW0uQXV0b21hdGljU2l6ZS5ZLA0KCQl9LA0KCQlCdXR0b25zID0gew0KCQkJew0KCQkJCVRleHQgPSAiQ29weSBzY3JpcHQgcGF0aCIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCVNldENsaXBib2FyZChQYXJzZXI6TWFrZVBhdGhTdHJpbmcoew0KCQkJCQkJT2JqZWN0ID0gU2NyaXB0LA0KCQkJCQkJTm9WYXJpYWJsZXMgPSB0cnVlDQoJCQkJCX0pKQ0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJDb3B5IHJlbW90ZSBwYXRoIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJU2V0Q2xpcGJvYXJkKFBhcnNlcjpNYWtlUGF0aFN0cmluZyh7DQoJCQkJCQlPYmplY3QgPSBSZW1vdGUsDQoJCQkJCQlOb1ZhcmlhYmxlcyA9IHRydWUNCgkJCQkJfSkpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIlJlbW92ZSBsb2ciLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlJbmZvU2VsZWN0b3I6UmVtb3ZlVGFiKFRhYikNCgkJCQkJRGF0YS5TZWxlY3RhYmxlOlJlbW92ZSgpDQoJCQkJCUhlYWRlckRhdGE6UmVtb3ZlKCkNCgkJCQkJQWN0aXZlRGF0YSA9IG5pbA0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJEdW1wIGxvZ3MiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBMb2dzID0gSGVhZGVyRGF0YS5FbnRyaWVzDQoJCQkJCWxvY2FsIEZpbGVQYXRoID0gR2VuZXJhdGlvbjpEdW1wTG9ncyhMb2dzKQ0KCQkJCQlzZWxmOlNob3dNb2RhbCh7IlNhdmVkIGR1bXAgdG8iLCBGaWxlUGF0aH0pDQoJCQkJZW5kLA0KCQkJfQ0KCQl9DQoJfSkNCg0KCS0tLy8gUmVtb3RlIGluZm9ybWF0aW9uDQoJbG9jYWwgUm93cyA9IHsiTmFtZSIsICJWYWx1ZSJ9DQoJbG9jYWwgRGF0YVRhYmxlID0gVGFiOlRhYmxlKHsNCgkJQm9yZGVyID0gdHJ1ZSwNCgkJUm93QmFja2dyb3VuZCA9IHRydWUsDQoJCU1heENvbHVtbnMgPSAyDQoJfSkNCg0KCS0tLy8gVGFibGUgaGVhZGVycw0KCWxvY2FsIEhlYWRlclJvdyA9IERhdGFUYWJsZTpIZWFkZXJSb3coKQ0KCWZvciBfLCBDYXRhZ29yeSBpbiBSb3dzIGRvDQoJCWxvY2FsIENvbHVtbiA9IEhlYWRlclJvdzpOZXh0Q29sdW1uKCkNCgkJQ29sdW1uOkxhYmVsKHtUZXh0PUNhdGFnb3J5fSkNCgllbmQNCg0KCS0tLy8gVGFibGUgbGF5b3V0DQoJZm9yIFJvd0luZGV4LCBOYW1lIGluIFRvRGlzcGxheSBkbw0KCQlsb2NhbCBSb3cgPSBEYXRhVGFibGU6Um93KCkNCgkJDQoJCS0tLy8gQ3JlYXRlIENvbHVtbnMNCgkJZm9yIENvdW50LCBDYXRhZ29yeSBpbiBSb3dzIGRvDQoJCQlsb2NhbCBDb2x1bW4gPSBSb3c6TmV4dENvbHVtbigpDQoJCQkNCgkJCS0tLy8gVmFsdWUgdGV4dA0KCQkJbG9jYWwgVmFsdWUgPSBDYXRhZ29yeSA9PSAiTmFtZSIgYW5kIE5hbWUgb3IgRGF0YVtOYW1lXQ0KCQkJaWYgbm90IFZhbHVlIHRoZW4gY29udGludWUgZW5kDQoNCgkJCUNvbHVtbjpMYWJlbCh7VGV4dD1ge1ZhbHVlfWB9KQ0KCQllbmQNCgllbmQNCgkNCgktLS8vIEFyZ3VtZW50cyB0YWJsZSBzY3JpcHQNCglpZiBUYWJsZUFyZ3MgdGhlbg0KCQlsb2NhbCBQYXJzZWQgPSBHZW5lcmF0aW9uOlRhYmxlU2NyaXB0KE1vZHVsZSwgQXJncykNCgkJU2V0SURFVGV4dChQYXJzZWQpDQoJCXJldHVybg0KCWVuZA0KDQoJLS0vLyBSZW1vdGUgY2FsbCBzY3JpcHQNCglEYXRhOk1ha2VTY3JpcHQoIlJlbW90ZSIpDQplbmQNCg0KZnVuY3Rpb24gVWk6R2V0UmVtb3RlSGVhZGVyKERhdGE6IExvZykNCglsb2NhbCBMb2dMaW1pdCA9IHNlbGYuTG9nTGltaXQNCglsb2NhbCBMb2dzID0gc2VsZi5Mb2dzDQoJbG9jYWwgUmVtb3Rlc0xpc3QgPSBzZWxmLlJlbW90ZXNMaXN0DQoNCgktLS8vIFJlbW90ZSBpbmZvDQoJbG9jYWwgSWQgPSBEYXRhLklkDQoJbG9jYWwgUmVtb3RlID0gRGF0YS5SZW1vdGUNCg0KCS0tLy8gTm9UcmVlTm9kZXMNCglsb2NhbCBOb1RyZWVOb2RlcyA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiTm9UcmVlTm9kZXMiKQ0KDQoJLS0vLyBDaGVjayBmb3IgZXhpc3RpbmcgVHJlZU5vZGUNCglsb2NhbCBFeGlzdGluZyA9IExvZ3NbSWRdDQoJaWYgRXhpc3RpbmcgdGhlbiByZXR1cm4gRXhpc3RpbmcgZW5kDQoNCgktLS8vIEhlYWRlciBkYXRhDQoJbG9jYWwgSGVhZGVyRGF0YSA9IHsJDQoJCUxvZ0NvdW50ID0gMCwNCgkJRGF0YSA9IERhdGEsDQoJCUVudHJpZXMgPSB7fQ0KCX0NCg0KCS0tLy8gSW5jcmVtZW50IHRyZWVub2RlIGNvdW50DQoJUmVtb3Rlc0NvdW50ICs9IDENCg0KCS0tLy8gQ3JlYXRlIG5ldyB0cmVlbm9kZSBlbGVtZW50DQoJaWYgbm90IE5vVHJlZU5vZGVzIHRoZW4NCgkJSGVhZGVyRGF0YS5UcmVlTm9kZSA9IFJlbW90ZXNMaXN0OlRyZWVOb2RlKHsNCgkJCUxheW91dE9yZGVyID0gLTEgKiBSZW1vdGVzQ291bnQsDQoJCQlUaXRsZSA9IGB7UmVtb3RlfWANCgkJfSkNCgllbmQNCg0KCWZ1bmN0aW9uIEhlYWRlckRhdGE6Q2hlY2tMaW1pdCgpDQoJCWxvY2FsIEVudHJpZXMgPSBzZWxmLkVudHJpZXMNCgkJaWYgI0VudHJpZXMgPCBMb2dMaW1pdCB0aGVuIHJldHVybiBlbmQNCgkJCQ0KCQktLS8vIEdldCBhbmQgcmVtb3ZlIGxhc3QgZWxlbWVudA0KCQlsb2NhbCBMb2cgPSB0YWJsZS5yZW1vdmUoRW50cmllcywgMSkNCgkJTG9nLlNlbGVjdGFibGU6UmVtb3ZlKCkNCgllbmQNCg0KCWZ1bmN0aW9uIEhlYWRlckRhdGE6TG9nQWRkZWQoRGF0YSkNCgkJLS0vLyBJbmNyZW1lbnQgbG9nIGNvdW50DQoJCXNlbGYuTG9nQ291bnQgKz0gMQ0KCQlzZWxmOkNoZWNrTGltaXQoKQ0KDQoJCS0tLy8gQWRkIGVudHJ5DQoJCWxvY2FsIEVudHJpZXMgPSBzZWxmLkVudHJpZXMNCgkJdGFibGUuaW5zZXJ0KEVudHJpZXMsIERhdGEpDQoJCQ0KCQlyZXR1cm4gc2VsZg0KCWVuZA0KDQoJZnVuY3Rpb24gSGVhZGVyRGF0YTpSZW1vdmUoKQ0KCQktLS8vIFJlbW92ZSBUcmVlTm9kZQ0KCQlsb2NhbCBUcmVlTm9kZSA9IHNlbGYuVHJlZU5vZGUNCgkJaWYgVHJlZU5vZGUgdGhlbg0KCQkJVHJlZU5vZGU6UmVtb3ZlKCkNCgkJZW5kDQoNCgkJLS0vLyBDbGVhciB0YWJsZXMgZnJvbSBtZW1vcnkNCgkJTG9nc1tJZF0gPSBuaWwNCgkJdGFibGUuY2xlYXIoSGVhZGVyRGF0YSkNCgllbmQNCg0KCUxvZ3NbSWRdID0gSGVhZGVyRGF0YQ0KCXJldHVybiBIZWFkZXJEYXRhDQplbmQNCg0KZnVuY3Rpb24gVWk6Q2xlYXJMb2dzKCkNCglsb2NhbCBMb2dzID0gc2VsZi5Mb2dzDQoJbG9jYWwgUmVtb3Rlc0xpc3QgPSBzZWxmLlJlbW90ZXNMaXN0DQoNCgktLS8vIENsZWFyIGFsbCBlbGVtZW50cw0KCVJlbW90ZXNDb3VudCA9IDANCglSZW1vdGVzTGlzdDpDbGVhckNoaWxkRWxlbWVudHMoKQ0KDQoJLS0vLyBDbGVhciBsb2dzIGZyb20gbWVtb3J5DQoJdGFibGUuY2xlYXIoTG9ncykNCmVuZA0KDQpmdW5jdGlvbiBVaTpRdWV1ZUxvZyhEYXRhKQ0KCWxvY2FsIExvZ1F1ZXVlID0gc2VsZi5Mb2dRdWV1ZQ0KICAgIHRhYmxlLmluc2VydChMb2dRdWV1ZSwgRGF0YSkNCmVuZA0KDQpmdW5jdGlvbiBVaTpQcm9jZXNzTG9nUXVldWUoKQ0KCWxvY2FsIFF1ZXVlID0gc2VsZi5Mb2dRdWV1ZQ0KICAgIGlmICNRdWV1ZSA8PSAwIHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBDcmVhdGUgYSBsb2cgZWxlbWVudCBmb3IgZWFjaCBpbiB0aGUgUXVldWUNCiAgICBmb3IgSW5kZXgsIERhdGEgaW4gbmV4dCwgUXVldWUgZG8NCiAgICAgICAgc2VsZjpDcmVhdGVMb2coRGF0YSkNCiAgICAgICAgdGFibGUucmVtb3ZlKFF1ZXVlLCBJbmRleCkNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpCZWdpbkxvZ1NlcnZpY2UoKQ0KCWNvcm91dGluZS53cmFwKGZ1bmN0aW9uKCkNCgkJd2hpbGUgdHJ1ZSBkbw0KCQkJc2VsZjpQcm9jZXNzTG9nUXVldWUoKQ0KCQkJdGFzay53YWl0KCkNCgkJZW5kDQoJZW5kKSgpDQplbmQNCg0KZnVuY3Rpb24gVWk6RmlsdGVyTmFtZShOYW1lOiBzdHJpbmcsIENoYXJhY3RlckxpbWl0OiBudW1iZXI/KTogc3RyaW5nDQoJbG9jYWwgVHJpbW1lZCA9IE5hbWU6c3ViKDEsIENoYXJhY3RlckxpbWl0IG9yIDIwKQ0KCWxvY2FsIEZpbHRyZWQgPSBUcmltbWVkOmdzdWIoIltcblxyXSIsICIiKQ0KCUZpbHRyZWQgPSBHZW5lcmF0aW9uOk1ha2VQcmludGFibGUoRmlsdHJlZCkNCg0KCXJldHVybiBGaWx0cmVkDQplbmQNCg0KZnVuY3Rpb24gVWk6Q3JlYXRlTG9nKERhdGE6IExvZykNCgktLS8vIFVucGFjayBsb2cgZGF0YQ0KICAgIGxvY2FsIFJlbW90ZSA9IERhdGEuUmVtb3RlDQoJbG9jYWwgTWV0aG9kID0gRGF0YS5NZXRob2QNCiAgICBsb2NhbCBBcmdzID0gRGF0YS5BcmdzDQogICAgbG9jYWwgSXNSZWNlaXZlID0gRGF0YS5Jc1JlY2VpdmUNCglsb2NhbCBJZCA9IERhdGEuSWQNCglsb2NhbCBUaW1lc3RhbXAgPSBEYXRhLlRpbWVzdGFtcA0KCWxvY2FsIElzRXhwbG9pdCA9IERhdGEuSXNFeHBsb2l0DQoJDQoJbG9jYWwgSXNOaWxQYXJlbnQgPSBIb29rOkluZGV4KFJlbW90ZSwgIlBhcmVudCIpID09IG5pbA0KCWxvY2FsIFJlbW90ZURhdGEgPSBQcm9jZXNzOkdldFJlbW90ZURhdGEoSWQpDQoNCgktLS8vIFBhdXNlZA0KCWxvY2FsIFBhdXNlZCA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiUGF1c2VkIikNCglpZiBQYXVzZWQgdGhlbiByZXR1cm4gZW5kDQoNCgktLS8vIENoZWNrIGNhbGxlciAoSWdub3JlIGV4cGxvaXQgY2FsbHMpDQoJbG9jYWwgTG9nRXhwbG9pdCA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiTG9nRXhwbG9pdCIpDQoJaWYgbm90IExvZ0V4cGxvaXQgYW5kIElzRXhwbG9pdCB0aGVuIHJldHVybiBlbmQNCg0KCS0tLy8gSWdub3JlTmlsDQoJbG9jYWwgSWdub3JlTmlsID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJJZ25vcmVOaWwiKQ0KCWlmIElnbm9yZU5pbCBhbmQgSXNOaWxQYXJlbnQgdGhlbiByZXR1cm4gZW5kDQoNCiAgICAtLS8vIExvZ1JlY2l2ZXMgY2hlY2sNCglsb2NhbCBMb2dSZWNpdmVzID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJMb2dSZWNpdmVzIikNCglpZiBub3QgTG9nUmVjaXZlcyBhbmQgSXNSZWNlaXZlIHRoZW4gcmV0dXJuIGVuZA0KDQoJbG9jYWwgU2VsZWN0TmV3ZXN0ID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJTZWxlY3ROZXdlc3QiKQ0KCWxvY2FsIE5vVHJlZU5vZGVzID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJOb1RyZWVOb2RlcyIpDQoNCiAgICAtLS8vIEV4Y2x1ZGVkIGNoZWNrDQogICAgaWYgUmVtb3RlRGF0YS5FeGNsdWRlZCB0aGVuIHJldHVybiBlbmQNCg0KCS0tLy8gRGVzZXJpYWxpemUgYXJndW1lbnRzDQoJQXJncyA9IENvbW11bmljYXRpb246RGVzZXJpYWxpemVUYWJsZShBcmdzKQ0KDQoJLS0vLyBEZWVwIGNsb25lIGRhdGENCglsb2NhbCBDbG9uZWRBcmdzID0gUHJvY2VzczpEZWVwQ2xvbmVUYWJsZShBcmdzKQ0KCURhdGEuQXJncyA9IENsb25lZEFyZ3MNCglEYXRhLlZhbHVlU3dhcHMgPSBHZW5lcmF0aW9uOk1ha2VWYWx1ZVN3YXBzVGFibGUoVGltZXN0YW1wKQ0KDQoJLS0vLyBHZW5lcmF0ZSBsb2cgdGl0bGUNCglsb2NhbCBDb2xvciA9IENvbmZpZy5NZXRob2RDb2xvcnNbTWV0aG9kOmxvd2VyKCldDQoJbG9jYWwgVGV4dCA9IE5vVHJlZU5vZGVzIGFuZCBge1JlbW90ZX0gfCB7TWV0aG9kfWAgb3IgTWV0aG9kDQoNCgktLS8vIEZpbmRTdHJpbmdGb3JOYW1lIGNoZWNrDQoJbG9jYWwgRmluZFN0cmluZyA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiRmluZFN0cmluZ0Zvck5hbWUiKQ0KCWlmIEZpbmRTdHJpbmcgdGhlbg0KCQlmb3IgXywgQXJnIGluIG5leHQsIENsb25lZEFyZ3MgZG8NCgkJCWlmIHR5cGVvZihBcmcpID09ICJzdHJpbmciIHRoZW4NCgkJCQlsb2NhbCBGaWx0cmVkID0gc2VsZjpGaWx0ZXJOYW1lKEFyZykNCgkJCQlUZXh0ID0gYHtGaWx0cmVkfSB8IHtUZXh0fWANCgkJCQlicmVhaw0KCQkJZW5kDQoJCWVuZA0KCWVuZA0KDQoJLS0vLyBGZXRjaCBIZWFkZXJEYXRhIGJ5IHRoZSBSZW1vdGVJRCB1c2VkIGZvciBzdGFja2luZw0KCWxvY2FsIEhlYWRlciA9IHNlbGY6R2V0UmVtb3RlSGVhZGVyKERhdGEpDQoJbG9jYWwgUmVtb3Rlc0xpc3QgPSBzZWxmLlJlbW90ZXNMaXN0DQoNCglsb2NhbCBMb2dDb3VudCA9IEhlYWRlci5Mb2dDb3VudA0KCWxvY2FsIFRyZWVOb2RlID0gSGVhZGVyLlRyZWVOb2RlIA0KCWxvY2FsIFBhcmVudCA9IFRyZWVOb2RlIG9yIFJlbW90ZXNMaXN0DQoNCgktLS8vIEluY3JlYXNlIGxvZyBjb3VudCAtIFRyZWVOb2RlcyBhcmUgaW4gR2V0UmVtb3RlSGVhZGVyIGZ1bmN0aW9uDQoJaWYgTm9UcmVlTm9kZXMgdGhlbg0KCQlSZW1vdGVzQ291bnQgKz0gMQ0KCQlMb2dDb3VudCA9IFJlbW90ZXNDb3VudA0KCWVuZA0KDQogICAgLS0vLyBDcmVhdGUgZm9jdXMgYnV0dG9uDQoJRGF0YS5IZWFkZXJEYXRhID0gSGVhZGVyDQoJRGF0YS5TZWxlY3RhYmxlID0gUGFyZW50OlNlbGVjdGFibGUoew0KCQlUZXh0ID0gVGV4dCwNCiAgICAgICAgTGF5b3V0T3JkZXIgPSAtMSAqIExvZ0NvdW50LA0KCQlUZXh0Q29sb3IzID0gQ29sb3IsDQoJCVRleHRYQWxpZ25tZW50ID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0LA0KCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCXNlbGY6U2V0Rm9jdXNlZFJlbW90ZShEYXRhKQ0KCQllbmQsDQogICAgfSkNCg0KCUhlYWRlcjpMb2dBZGRlZChEYXRhKQ0KDQoJLS0vLyBBdXRvIHNlbGVjdCBjaGVjaw0KCWxvY2FsIEdyb3VwU2VsZWN0ZWQgPSBBY3RpdmVEYXRhIGFuZCBBY3RpdmVEYXRhLkhlYWRlckRhdGEgPT0gSGVhZGVyDQoJaWYgU2VsZWN0TmV3ZXN0IGFuZCBHcm91cFNlbGVjdGVkIHRoZW4NCgkJc2VsZjpTZXRGb2N1c2VkUmVtb3RlKERhdGEpDQoJZW5kDQplbmQNCg0KcmV0dXJuIFVp]]
},Generation={'base64',
[[]]
},Communication={'base64',
[[]]
}},d.Players local h=e:LoadLibraries(f)local i,j,k,l,m,n,o=h.Process,h.Hook,h.Ui
,h.Generation,h.Communication,h.Config,e:GetAsset('ProggyClean.ttf',true)local p
=e:CreateFont('ProggyClean',o)k:SetFontFile(p)i:CheckConfig(n)e:LoadModules(h,{
Modules=h,Services=d})local q,r=k:CreateMainWindow(),i:CheckIsSupported()if not
r then q:Close()return end local s=m:CreateChannel()m:AddCommCallback('QueueLog'
,function(...)k:QueueLog(...)end)local t=g.LocalPlayer l:SetSwapsCallback(
function(u)u:AddSwap(t,{String='LocalPlayer'})u:AddSwap(t.Character,{String=
'Character',NextParent=t})end)k:CreateWindowContent(q)k:BeginLogService()local u
=e:MakeActorScript(f,s)j:LoadHooks(u,s)
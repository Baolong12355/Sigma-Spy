--[[
	⣿⣿⣿⣿⣿ SIGMA SPY ⣿⣿⣿⣿⣿
	⣿⣿⣯⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉
	⠉⠻⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠈⠻⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠀⠀⣉⣿⣿⣿⠆⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⣠⣾⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⢀⣴⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣀⣴⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣿⣿⣟⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
	⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

	@author depso (depthso)
	@repo https://github.com/depthso
	@license MIT
	@description Sigma Remote Spy for Roblox
    
	This file is COMPILED, check /src folder for the source
	Build scripts are available in /build
]]

local a,b={UseWorkspace=false,NoActors=false,RepoUrl=
[[https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main]],
ParserUrl=
[[https://raw.githubusercontent.com/depthso/Roblox-parser/refs/heads/main]]},{
...}local c=b[1]if typeof(c)=='table'then for d,e in c do a[d]=e end end local d
=setmetatable({},{__index=function(d,e)local f=game:GetService(e)return
cloneref(f)end})local e=(function()local e,f={UseWorkspace=false,Folder=
'Sigma spy',RepoUrl=nil,FolderStructure={['Sigma Spy']={'assets'}}}function e:
Init(g)local h,i=self.FolderStructure,g.Services f=i.HttpService self:
CheckFolders(h)end function e:PushConfig(g)for h,i in next,g do self[h]=i end
end function e:UrlFetch(g)local h={Url=g:gsub(' ','%%20'),Method='GET'}local i,j
=pcall(request,h)if not i then warn'[!] HTTP request error! Check console (F9)'
warn('> Url:',g)error(j)return''end local k,l=j.Body,j.StatusCode if l==404 then
warn'[!] The file requested has moved or been deleted.'warn(' >',g)return''end
return k,j end function e:MakePath(g)local h=self.Folder return`{h}/{g}`end
function e:LoadCustomasset(g)if not getcustomasset then return end local h,i=
pcall(getcustomasset,g)if not h then return end if not i or i==''then return end
return i end function e:GetFile(g,h)local i,j,k,l=self.RepoUrl,self.UseWorkspace
,self:MakePath(g),''if j then l=readfile(k)else l=self:UrlFetch(`{i}/{g}`)end if
h then self:FileCheck(k,function()return l end)return self:LoadCustomasset(k)end
return l end function e:GetTemplate(g)return self:GetFile(`templates/{g}.lua`)
end function e:FileCheck(g,h)if isfile(g)then return end local i=h()writefile(g,
i)end function e:FolderCheck(g)if isfolder(g)then return end makefolder(g)end
function e:CheckPath(g,h)return g and`{g}/{h}`or h end function e:CheckFolders(g
,h)for i,j in next,g do if typeof(j)=='table'then local k=self:CheckPath(h,i)
self:FolderCheck(k)self:CheckFolders(j,k)continue end local k=self:CheckPath(h,j
)self:FolderCheck(k)end end function e:TemplateCheck(g,h)self:FileCheck(g,
function()return self:GetTemplate(h)end)end function e:GetAsset(g,h)return self:
GetFile(`assets/{g}`,h)end function e:GetModule(g,h)local i=`{g}.lua`if h then
self:TemplateCheck(i,h)return readfile(i)end return self:GetFile(i)end function
e:LoadLibraries(g,...)local h={}for i,j in next,g do local k=typeof(j)=='table'
and j[1]=='base64'j=k and j[2]or j if typeof(j)~='string'and not k then h[i]=j
continue end if k then j=crypt.base64decode(j)g[i]=j end local l=loadstring(j,i)
assert(l,`Failed to load {i}`)h[i]=l(...)end return h end function e:LoadModules
(g,h)for i,j in next,g do local k=j.Init if not k then continue end j:Init(h)end
end function e:CreateFont(g,h)if not h then return end local i=`assets/{g}.json`
local j,k=self:MakePath(i),{name=g,faces={{name='Regular',weight=400,style=
'Normal',assetId=h}}}local l=f:JSONEncode(k)writefile(j,l)return j end function
e:CompileModule(g)local h='local Libraries = {'for i,j in g do if typeof(j)~=
'string'then continue end h..=`\t{i} = (function()\n{j}\nend)(),\n`end h..='}'
return h end function e:MakeActorScript(g,h)local i=e:CompileModule(g)i..=
'\r\n\tlocal ExtraData = {\r\n\t\tIsActor = true\r\n\t}\r\n\t'i..=`Libraries.Hook:BeginService(Libraries, ExtraData, {
h})`return i end return e end)()e:PushConfig(a)e:Init{Services=d}local f,g={
Config=e:GetModule('Sigma Spy/Config','Config'),ReturnSpoofs=e:GetModule(
'Sigma Spy/Return spoofs','Return Spoofs'),Configuration=a,Files=e,Process={
'base64',
[[]]
},Hook={'base64',
[[]]
},Flags={'base64',
[[dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkNCnR5cGUgRmxhZyA9IHsNCiAgICBWYWx1ZTogRmxhZ1ZhbHVlLA0KICAgIExhYmVsOiBzdHJpbmcsDQogICAgQ2F0ZWdvcnk6IHN0cmluZw0KfQ0KdHlwZSBGbGFncyA9IHsNCiAgICBbc3RyaW5nXTogRmxhZw0KfQ0KdHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCmxvY2FsIE1vZHVsZSA9IHsNCiAgICBGbGFncyA9IHsNCiAgICAgICAgUHJldmVudFJlbmFtaW5nID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIHJlbmFtaW5nIiwNCiAgICAgICAgfSwNCiAgICAgICAgUHJldmVudFBhcmVudGluZyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJObyBwYXJlbnRpbmciLA0KICAgICAgICB9LA0KICAgICAgICBTZWxlY3ROZXdlc3QgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiQXV0byBzZWxlY3QgbmV3ZXN0IiwNCiAgICAgICAgfSwNCiAgICAgICAgSWdub3JlTmlsID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiSWdub3JlIG5pbCBwYXJlbnRzIiwNCiAgICAgICAgfSwNCiAgICAgICAgTG9nRXhwbG9pdCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIkxvZyBleHBsb2l0IGNhbGxzIiwNCiAgICAgICAgfSwNCiAgICAgICAgTG9nUmVjaXZlcyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIkxvZyByZWNlaXZlcyIsDQogICAgICAgIH0sDQogICAgICAgIFBhdXNlZCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJQYXVzZWQiLA0KICAgICAgICAgICAgS2V5YmluZCA9IEVudW0uS2V5Q29kZS5RDQogICAgICAgIH0sDQogICAgICAgIEtleWJpbmRzRW5hYmxlZCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIktleWJpbmRzIEVuYWJsZWQiDQogICAgICAgIH0sDQogICAgICAgIEZpbmRTdHJpbmdGb3JOYW1lID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiRmluZCBhcmcgZm9yIG5hbWUiDQogICAgICAgIH0sDQogICAgICAgIFVpVmlzaWJsZSA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIlVJIFZpc2libGUiLA0KICAgICAgICAgICAgS2V5YmluZCA9IEVudW0uS2V5Q29kZS5QDQogICAgICAgIH0sDQogICAgICAgIE5vVHJlZU5vZGVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIGdyb3VwaW5nIg0KICAgICAgICB9LA0KICAgICAgICBUYWJsZUFyZ3MgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiVGFibGUgYXJncyINCiAgICAgICAgfSwNCiAgICAgICAgTm9WYXJpYWJsZXMgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTm8gY29tcHJlc3Npb24iDQogICAgICAgIH0sDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZ1ZhbHVlKE5hbWU6IHN0cmluZyk6IEZsYWdWYWx1ZQ0KICAgIGxvY2FsIEZsYWcgPSBzZWxmOkdldEZsYWcoTmFtZSkNCiAgICByZXR1cm4gRmxhZy5WYWx1ZQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnVmFsdWUoTmFtZTogc3RyaW5nLCBWYWx1ZTogRmxhZ1ZhbHVlKQ0KICAgIGxvY2FsIEZsYWcgPSBzZWxmOkdldEZsYWcoTmFtZSkNCiAgICBGbGFnLlZhbHVlID0gVmFsdWUNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ0NhbGxiYWNrKE5hbWU6IHN0cmluZywgQ2FsbGJhY2s6ICguLi5hbnkpIC0+IC4uLmFueSkNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgRmxhZy5DYWxsYmFjayA9IENhbGxiYWNrDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFja3MoRGljdDoge30pDQogICAgZm9yIE5hbWUsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkgaW4gbmV4dCwgRGljdCBkbyANCiAgICAgICAgc2VsZjpTZXRGbGFnQ2FsbGJhY2soTmFtZSwgQ2FsbGJhY2spDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWcoTmFtZTogc3RyaW5nKTogRmxhZw0KICAgIGxvY2FsIEFsbEZsYWdzID0gc2VsZjpHZXRGbGFncygpDQogICAgbG9jYWwgRmxhZyA9IEFsbEZsYWdzW05hbWVdDQogICAgYXNzZXJ0KEZsYWcsICJGbGFnIGRvZXMgbm90IGV4aXN0ISIpDQogICAgcmV0dXJuIEZsYWcNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6QWRkRmxhZyhOYW1lOiBzdHJpbmcsIEZsYWc6IEZsYWcpDQogICAgbG9jYWwgQWxsRmxhZ3MgPSBzZWxmOkdldEZsYWdzKCkNCiAgICBBbGxGbGFnc1tOYW1lXSA9IEZsYWcNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZ3MoKTogRmxhZ3MNCiAgICByZXR1cm4gc2VsZi5GbGFncw0KZW5kDQoNCnJldHVybiBNb2R1bGU=]]
},Ui={'base64',
[[]]
},Generation={'base64',
[[]]
},Communication={'base64',
[[]]
}},d.Players local h=e:LoadLibraries(f)local i,j,k,l,m,n,o=h.Process,h.Hook,h.Ui
,h.Generation,h.Communication,h.Config,e:GetAsset('ProggyClean.ttf',true)local p
=e:CreateFont('ProggyClean',o)k:SetFontFile(p)i:CheckConfig(n)e:LoadModules(h,{
Modules=h,Services=d})local q,r=k:CreateMainWindow(),i:CheckIsSupported()if not
r then q:Close()return end local s=m:CreateChannel()m:AddCommCallback('QueueLog'
,function(...)k:QueueLog(...)end)local t=g.LocalPlayer l:SetSwapsCallback(
function(u)u:AddSwap(t,{String='LocalPlayer'})u:AddSwap(t.Character,{String=
'Character',NextParent=t})end)k:CreateWindowContent(q)k:BeginLogService()local u
=e:MakeActorScript(f,s)j:LoadHooks(u,s)
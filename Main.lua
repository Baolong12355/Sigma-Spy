--[[
	⣿⣿⣿⣿⣿ SIGMA SPY ⣿⣿⣿⣿⣿
	⣿⣿⣯⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉
	⠉⠻⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠈⠻⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠀⠀⣉⣿⣿⣿⠆⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⣠⣾⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⢀⣴⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣀⣴⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣿⣿⣟⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
	⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

	@author depso (depthso)
	@repo https://github.com/depthso
	@license MIT
	@description Sigma Remote Spy for Roblox
    
	This file is COMPILED, check /src folder for the source
	Build scripts are available in /build
]]

local a,b={UseWorkspace=false,NoActors=false,FolderName='Sigma Spy',RepoUrl=
[[https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main]],
ParserUrl=
[[https://raw.githubusercontent.com/depthso/Roblox-parser/refs/heads/main/dist/Main.luau]]
},{...}local c=b[1]if typeof(c)=='table'then for d,e in c do a[d]=e end end
local d=setmetatable({},{__index=function(d,e)local f=game:GetService(e)return
cloneref(f)end})local e=(function()local e,f={UseWorkspace=false,Folder=
'Sigma spy',RepoUrl=nil,FolderStructure={['Sigma Spy']={'assets'}}}function e:
Init(g)local h,i=self.FolderStructure,g.Services f=i.HttpService self:
CheckFolders(h)end function e:PushConfig(g)for h,i in next,g do self[h]=i end
end function e:UrlFetch(g)local h={Url=g:gsub(' ','%%20'),Method='GET'}local i,j
=pcall(request,h)if not i then warn'[!] HTTP request error! Check console (F9)'
warn('> Url:',g)error(j)return''end local k,l=j.Body,j.StatusCode if l==404 then
warn'[!] The file requested has moved or been deleted.'warn(' >',g)return''end
return k,j end function e:MakePath(g)local h=self.Folder return`{h}/{g}`end
function e:LoadCustomasset(g)if not getcustomasset then return end if not g then
return end local h=readfile(g)if#h<=0 then return end local i,j=pcall(
getcustomasset,g)if not i then return end if not j or#j<=0 then return end
return j end function e:GetFile(g,h)local i,j,k,l=self.RepoUrl,self.UseWorkspace
,self:MakePath(g),''if j then l=readfile(k)else l=self:UrlFetch(`{i}/{g}`)end if
h then self:FileCheck(k,function()return l end)return self:LoadCustomasset(k)end
return l end function e:GetTemplate(g)return self:GetFile(`templates/{g}.lua`)
end function e:FileCheck(g,h)if isfile(g)then return end local i=h()writefile(g,
i)end function e:FolderCheck(g)if isfolder(g)then return end makefolder(g)end
function e:CheckPath(g,h)return g and`{g}/{h}`or h end function e:CheckFolders(g
,h)for i,j in next,g do if typeof(j)=='table'then local k=self:CheckPath(h,i)
self:FolderCheck(k)self:CheckFolders(j,k)continue end local k=self:CheckPath(h,j
)self:FolderCheck(k)end end function e:TemplateCheck(g,h)self:FileCheck(g,
function()return self:GetTemplate(h)end)end function e:GetAsset(g,h)return self:
GetFile(`assets/{g}`,h)end function e:GetModule(g,h)local i=`{g}.lua`if h then
self:TemplateCheck(i,h)local j=readfile(i)local k=loadstring(j)if k then return
j end return self:GetTemplate(h)end return self:GetFile(i)end function e:
LoadLibraries(g,...)local h={}for i,j in next,g do local k=typeof(j)=='table'and
j[1]=='base64'j=k and j[2]or j if typeof(j)~='string'and not k then h[i]=j
continue end if k then j=crypt.base64decode(j)g[i]=j end local l,m=loadstring(j,
i)assert(l,`Failed to load {i}: {m}`)h[i]=l(...)end return h end function e:
LoadModules(g,h)for i,j in next,g do local k=j.Init if not k then continue end j
:Init(h)end end function e:CreateFont(g,h)if not h then return end local i=`assets/{
g}.json`local j,k=self:MakePath(i),{name=g,faces={{name='Regular',weight=400,
style='Normal',assetId=h}}}local l=f:JSONEncode(k)writefile(j,l)return j end
function e:CompileModule(g)local h='local Libraries = {'for i,j in g do if
typeof(j)~='string'then continue end h..=`\t{i} = (function()\n{j}\nend)(),\n`
end h..='}'return h end function e:MakeActorScript(g,h)local i=e:CompileModule(g
)i..='\r\n\tlocal ExtraData = {\r\n\t\tIsActor = true\r\n\t}\r\n\t'i..=`Libraries.Hook:BeginService(Libraries, ExtraData, {
h})`return i end return e end)()e:PushConfig(a)e:Init{Services=d}local f=e.
FolderName local g,h={Config=e:GetModule(`{f}/Config`,'Config'),ReturnSpoofs=e:
GetModule(`{f}/Return spoofs`,'Return Spoofs'),Configuration=a,Files=e,Process={
'base64',
[[]]
},Hook={'base64',
[[]]
},Flags={'base64',
[[dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkNCnR5cGUgRmxhZyA9IHsNCiAgICBWYWx1ZTogRmxhZ1ZhbHVlLA0KICAgIExhYmVsOiBzdHJpbmcsDQogICAgQ2F0ZWdvcnk6IHN0cmluZw0KfQ0KdHlwZSBGbGFncyA9IHsNCiAgICBbc3RyaW5nXTogRmxhZw0KfQ0KdHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCmxvY2FsIE1vZHVsZSA9IHsNCiAgICBGbGFncyA9IHsNCiAgICAgICAgLS0gUHJldmVudFJlbmFtaW5nID0gew0KICAgICAgICAtLSAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgLS0gICAgIExhYmVsID0gIk5vIHJlbmFtaW5nIiwNCiAgICAgICAgLS0gfSwNCiAgICAgICAgLS0gUHJldmVudFBhcmVudGluZyA9IHsNCiAgICAgICAgLS0gICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgIC0tICAgICBMYWJlbCA9ICJObyBwYXJlbnRpbmciLA0KICAgICAgICAtLSB9LA0KICAgICAgICBOb0NvbW1lbnRzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIGNvbW1lbnRzIiwNCiAgICAgICAgfSwNCiAgICAgICAgU2VsZWN0TmV3ZXN0ID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIkF1dG8gc2VsZWN0IG5ld2VzdCIsDQogICAgICAgIH0sDQogICAgICAgIERlY29tcGlsZVBvcG91dCA9IHsgLS0gTG92cmUgU0hVU0gNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJQb3Atb3V0IGRlY29tcGlsZXMiLA0KICAgICAgICB9LA0KICAgICAgICBJZ25vcmVOaWwgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJJZ25vcmUgbmlsIHBhcmVudHMiLA0KICAgICAgICB9LA0KICAgICAgICBMb2dFeHBsb2l0ID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTG9nIGV4cGxvaXQgY2FsbHMiLA0KICAgICAgICB9LA0KICAgICAgICBMb2dSZWNpdmVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTG9nIHJlY2VpdmVzIiwNCiAgICAgICAgfSwNCiAgICAgICAgUGF1c2VkID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIlBhdXNlZCIsDQogICAgICAgICAgICBLZXliaW5kID0gRW51bS5LZXlDb2RlLlENCiAgICAgICAgfSwNCiAgICAgICAgS2V5YmluZHNFbmFibGVkID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiS2V5YmluZHMgRW5hYmxlZCINCiAgICAgICAgfSwNCiAgICAgICAgRmluZFN0cmluZ0Zvck5hbWUgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJGaW5kIGFyZyBmb3IgbmFtZSINCiAgICAgICAgfSwNCiAgICAgICAgVWlWaXNpYmxlID0gew0KICAgICAgICAgICAgVmFsdWUgPSB0cnVlLA0KICAgICAgICAgICAgTGFiZWwgPSAiVUkgVmlzaWJsZSIsDQogICAgICAgICAgICBLZXliaW5kID0gRW51bS5LZXlDb2RlLlANCiAgICAgICAgfSwNCiAgICAgICAgTm9UcmVlTm9kZXMgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiTm8gZ3JvdXBpbmciDQogICAgICAgIH0sDQogICAgICAgIFRhYmxlQXJncyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJUYWJsZSBhcmdzIg0KICAgICAgICB9LA0KICAgICAgICBOb1ZhcmlhYmxlcyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJObyBjb21wcmVzc2lvbiINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWdWYWx1ZShOYW1lOiBzdHJpbmcpOiBGbGFnVmFsdWUNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgcmV0dXJuIEZsYWcuVmFsdWUNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ1ZhbHVlKE5hbWU6IHN0cmluZywgVmFsdWU6IEZsYWdWYWx1ZSkNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgRmxhZy5WYWx1ZSA9IFZhbHVlDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFjayhOYW1lOiBzdHJpbmcsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkpDQogICAgbG9jYWwgRmxhZyA9IHNlbGY6R2V0RmxhZyhOYW1lKQ0KICAgIEZsYWcuQ2FsbGJhY2sgPSBDYWxsYmFjaw0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnQ2FsbGJhY2tzKERpY3Q6IHt9KQ0KICAgIGZvciBOYW1lLCBDYWxsYmFjazogKC4uLmFueSkgLT4gLi4uYW55IGluIG5leHQsIERpY3QgZG8gDQogICAgICAgIHNlbGY6U2V0RmxhZ0NhbGxiYWNrKE5hbWUsIENhbGxiYWNrKQ0KICAgIGVuZA0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpHZXRGbGFnKE5hbWU6IHN0cmluZyk6IEZsYWcNCiAgICBsb2NhbCBBbGxGbGFncyA9IHNlbGY6R2V0RmxhZ3MoKQ0KICAgIGxvY2FsIEZsYWcgPSBBbGxGbGFnc1tOYW1lXQ0KICAgIGFzc2VydChGbGFnLCAiRmxhZyBkb2VzIG5vdCBleGlzdCEiKQ0KICAgIHJldHVybiBGbGFnDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkFkZEZsYWcoTmFtZTogc3RyaW5nLCBGbGFnOiBGbGFnKQ0KICAgIGxvY2FsIEFsbEZsYWdzID0gc2VsZjpHZXRGbGFncygpDQogICAgQWxsRmxhZ3NbTmFtZV0gPSBGbGFnDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWdzKCk6IEZsYWdzDQogICAgcmV0dXJuIHNlbGYuRmxhZ3MNCmVuZA0KDQpyZXR1cm4gTW9kdWxl]]
},Ui={'base64',
[[bG9jYWwgVWkgPSB7DQoJRGVmYXVsdEVkaXRvckNvbnRlbnQgPSAiLS0gSmVzdXMgbG92ZXMgeW91IiwNCglMb2dMaW1pdCA9IDEwMCwNCiAgICBTZWFzb25MYWJlbHMgPSB7IA0KICAgICAgICBKYW51YXJ5ID0gIuKbhCAlcyDim4QiLCANCiAgICAgICAgRmVicnVhcnkgPSAi8J+MqO+4jyAlcyDwn4+CIiwgDQogICAgICAgIE1hcmNoID0gIvCfjLkgJXPwn4y6ICIsIA0KICAgICAgICBBcHJpbCA9ICLwn5CjICVzIOKcne+4jyIsIA0KICAgICAgICBNYXkgPSAi8J+QnSAlcyDwn4yeIiwgDQogICAgICAgIEp1bmUgPSAi8J+MsiAlcyDwn6WVIiwgDQogICAgICAgIEp1bHkgPSAi8J+MiiAlcyDwn4yFIiwgDQogICAgICAgIEF1Z3VzdCA9ICLimIDvuI8gJXMg8J+MniIsIA0KICAgICAgICBTZXB0ZW1iZXIgPSAi8J+NgSAlcyDwn42BIiwgDQogICAgICAgIE9jdG9iZXIgPSAi8J+OgyAlcyDwn46DIiwgDQogICAgICAgIE5vdmVtYmVyID0gIvCfjYIgJXMg8J+NgiIsIA0KICAgICAgICBEZWNlbWJlciA9ICLwn46EICVzIPCfjoEiDQogICAgfSwNCglTY2FsZXMgPSB7DQoJCVsiTW9iaWxlIl0gPSBVRGltMi5mcm9tT2Zmc2V0KDQ4MCwgMjgwKSwNCgkJWyJEZXNrdG9wIl0gPSBVRGltMi5mcm9tT2Zmc2V0KDYwMCwgNDAwKSwNCgl9LA0KICAgIEJhc2VDb25maWcgPSB7DQogICAgICAgIFRoZW1lID0gIlNpZ21hU3B5IiwNCgkJVGl0bGUgPSAiU2lnbWEgU3B5IEJFVEEgfCBDcmVhdGVkIGJ5IGRlcHNvIiwNCiAgICAgICAgTm9TY3JvbGwgPSB0cnVlLA0KICAgIH0sDQoJT3B0aW9uVHlwZXMgPSB7DQoJCWJvb2xlYW4gPSAiQ2hlY2tib3giLA0KCX0sDQoJRGlzcGxheVJlbW90ZUluZm8gPSB7DQoJCSJNZXRhTWV0aG9kIiwNCgkJIk1ldGhvZCIsDQoJCSJSZW1vdGUiLA0KCQkiQ2FsbGluZ1NjcmlwdCIsDQoJCSJJc0FjdG9yIiwNCgkJIklkIg0KCX0sDQoNCiAgICBXaW5kb3cgPSBuaWwsDQogICAgUmFuZG9tU2VlZCA9IFJhbmRvbS5uZXcodGljaygpKSwNCglMb2dzID0gc2V0bWV0YXRhYmxlKHt9LCB7X19tb2RlID0gImsifSksDQoJTG9nUXVldWUgPSBzZXRtZXRhdGFibGUoe30sIHtfX21vZGUgPSAidiJ9KSwNCn0gDQoNCnR5cGUgdGFibGUgPSB7DQoJW2FueV06IGFueQ0KfQ0KDQp0eXBlIExvZyA9IHsNCglSZW1vdGU6IEluc3RhbmNlLA0KCU1ldGhvZDogc3RyaW5nLA0KCUFyZ3M6IHRhYmxlLA0KCUlzUmVjZWl2ZTogYm9vbGVhbj8sDQoJTWV0YU1ldGhvZDogc3RyaW5nPywNCglPcmlnbmFsRnVuYzogKCguLi5hbnkpIC0+IC4uLmFueSk/LA0KCUNhbGxpbmdTY3JpcHQ6IEluc3RhbmNlPywNCglDYWxsaW5nRnVuY3Rpb246ICgoLi4uYW55KSAtPiAuLi5hbnkpPywNCglDbGFzc0RhdGE6IHRhYmxlPywNCglSZXR1cm5WYWx1ZXM6IHRhYmxlPywNCglSZW1vdGVEYXRhOiB0YWJsZT8sDQoJSWQ6IHN0cmluZywNCglTZWxlY3RhYmxlOiB0YWJsZSwNCglIZWFkZXJEYXRhOiB0YWJsZSwNCglWYWx1ZVN3YXBzOiB0YWJsZSwNCglUaW1lc3RhbXA6IG51bWJlciwNCglJc0V4cGxvaXQ6IGJvb2xlYW4NCn0NCg0KLS0vLyBDb21wYXRpYmlsaXR5DQpsb2NhbCBTZXRDbGlwYm9hcmQgPSBzZXRjbGlwYm9hcmQgb3IgdG9jbGlwYm9hcmQgb3Igc2V0X2NsaXBib2FyZA0KDQotLS8vIExpYnJhcmllcw0KbG9jYWwgUmVHdWkgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgnaHR0cHM6Ly9naXRodWIuY29tL2RlcHRoc28vRGVhci1SZUd1aS9yYXcvcmVmcy9oZWFkcy9tYWluL1JlR3VpLmx1YScpLCAiUmVHdWkiKSgpDQoNCi0tLy8gTW9kdWxlcw0KbG9jYWwgRmxhZ3MNCmxvY2FsIEdlbmVyYXRpb24NCmxvY2FsIFByb2Nlc3MNCmxvY2FsIEhvb2sgDQpsb2NhbCBDb25maWcNCmxvY2FsIENvbW11bmljYXRpb24NCmxvY2FsIEZpbGVzDQoNCmxvY2FsIEFjdGl2ZURhdGEgPSBuaWwNCmxvY2FsIFJlbW90ZXNDb3VudCA9IDANCg0KbG9jYWwgVGV4dEZvbnQgPSBGb250LmZyb21FbnVtKEVudW0uRm9udC5Db2RlKQ0KbG9jYWwgRm9udFN1Y2Nlc3MgPSBmYWxzZQ0KbG9jYWwgQ29tbUNoYW5uZWwNCg0KZnVuY3Rpb24gVWk6SW5pdChEYXRhKQ0KICAgIGxvY2FsIE1vZHVsZXMgPSBEYXRhLk1vZHVsZXMNCg0KCS0tLy8gTW9kdWxlcw0KCUZsYWdzID0gTW9kdWxlcy5GbGFncw0KCUdlbmVyYXRpb24gPSBNb2R1bGVzLkdlbmVyYXRpb24NCglQcm9jZXNzID0gTW9kdWxlcy5Qcm9jZXNzDQoJSG9vayA9IE1vZHVsZXMuSG9vaw0KCUNvbmZpZyA9IE1vZHVsZXMuQ29uZmlnDQoJQ29tbXVuaWNhdGlvbiA9IE1vZHVsZXMuQ29tbXVuaWNhdGlvbg0KCUZpbGVzID0gTW9kdWxlcy5GaWxlcw0KDQoJLS0vLyBSZUd1aQ0KCXNlbGY6TG9hZEZvbnQoKQ0KCXNlbGY6TG9hZFJlR3VpKCkNCglzZWxmOkNoZWNrU2NhbGUoKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNldENvbW1DaGFubmVsKE5ld0NvbW1DaGFubmVsOiBCaW5kYWJsZUV2ZW50KQ0KCUNvbW1DaGFubmVsID0gTmV3Q29tbUNoYW5uZWwNCmVuZA0KDQpmdW5jdGlvbiBVaTpDaGVja1NjYWxlKCkNCglsb2NhbCBCYXNlQ29uZmlnID0gc2VsZi5CYXNlQ29uZmlnDQoJbG9jYWwgU2NhbGVzID0gc2VsZi5TY2FsZXMNCg0KCWxvY2FsIElzTW9iaWxlID0gUmVHdWk6SXNNb2JpbGVEZXZpY2UoKQ0KCWxvY2FsIERldmljZSA9IElzTW9iaWxlIGFuZCAiTW9iaWxlIiBvciAiRGVza3RvcCINCg0KCUJhc2VDb25maWcuU2l6ZSA9IFNjYWxlc1tEZXZpY2VdDQplbmQNCg0KZnVuY3Rpb24gVWk6U2V0Q2xpcGJvYXJkKENvbnRlbnQ6IHN0cmluZykNCglTZXRDbGlwYm9hcmQoQ29udGVudCkNCmVuZA0KDQpmdW5jdGlvbiBVaTpUdXJuU2Vhc29uYWwoVGV4dDogc3RyaW5nKTogc3RyaW5nDQogICAgbG9jYWwgU2Vhc29uTGFiZWxzID0gc2VsZi5TZWFzb25MYWJlbHMNCiAgICBsb2NhbCBNb250aCA9IG9zLmRhdGUoIiVCIikNCiAgICBsb2NhbCBCYXNlID0gU2Vhc29uTGFiZWxzW01vbnRoXQ0KDQogICAgcmV0dXJuIEJhc2U6Zm9ybWF0KFRleHQpDQplbmQNCg0KZnVuY3Rpb24gVWk6TG9hZEZvbnQoKQ0KCWxvY2FsIEZvbnRGaWxlID0gc2VsZi5Gb250SnNvbkZpbGUNCg0KCS0tLy8gR2V0IEZvbnRGYWNlIEFzc2V0SWQNCglsb2NhbCBBc3NldElkID0gRmlsZXM6TG9hZEN1c3RvbWFzc2V0KEZvbnRGaWxlKQ0KCWlmIG5vdCBBc3NldElkIHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBDcmVhdGUgY3VzdG9tIEZvbnRGYWNlDQoJbG9jYWwgTmV3Rm9udCA9IEZvbnQubmV3KEFzc2V0SWQpDQoJVGV4dEZvbnQgPSBOZXdGb250DQoJRm9udFN1Y2Nlc3MgPSB0cnVlDQplbmQNCg0KZnVuY3Rpb24gVWk6U2V0Rm9udEZpbGUoRm9udEZpbGU6IHN0cmluZykNCglzZWxmLkZvbnRKc29uRmlsZSA9IEZvbnRGaWxlDQplbmQNCg0KZnVuY3Rpb24gVWk6Rm9udFdhc1N1Y2Nlc3NmdWwoKQ0KCWlmIEZvbnRTdWNjZXNzIHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBFcnJvciBtZXNzYWdlDQoJc2VsZjpTaG93TW9kYWwoew0KCQkiVW5mb3J0dW5hdGVseSB5b3VyIGV4ZWN1dG9yIHdhcyB1bmFibGUgdG8gZG93bmxvYWQgdGhlIGZvbnQgYW5kIHRoZXJlZm9yZSBzd2l0Y2hlZCB0byB0aGUgRGFyayB0aGVtZSIsDQoJCSJcbklmIHlvdSB3b3VsZCBsaWtlIHRvIHVzZSB0aGUgSW1HdWkgdGhlbWUsIFxucGxlYXNlIGRvd25sb2FkIHRoZSBmb250IChhc3NldHMvUHJvZ2d5Q2xlYW4udHRmKSIsDQoJCSJhbmQgcHV0IHB1dCBpdCBpbiB5b3VyIHdvcmtzcGFjZSBmb2xkZXJcbihTaWdtYSBTcHkvYXNzZXRzKSINCgl9KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkxvYWRSZUd1aSgpDQoJbG9jYWwgVGhlbWVDb25maWcgPSBDb25maWcuVGhlbWVDb25maWcNCglUaGVtZUNvbmZpZy5UZXh0Rm9udCA9IFRleHRGb250DQoNCgktLS8vIFJlR3VpDQoJUmVHdWk6RGVmaW5lVGhlbWUoIlNpZ21hU3B5IiwgVGhlbWVDb25maWcpDQplbmQNCg0KdHlwZSBDcmVhdGVCdXR0b25zID0gew0KCUJhc2U6IHRhYmxlPywNCglCdXR0b25zOiB0YWJsZSwNCglOb1RhYmxlOiBib29sZWFuPw0KfQ0KZnVuY3Rpb24gVWk6Q3JlYXRlQnV0dG9ucyhQYXJlbnQsIERhdGE6IENyZWF0ZUJ1dHRvbnMpDQoJbG9jYWwgQmFzZSA9IERhdGEuQmFzZSBvciB7fQ0KCWxvY2FsIEJ1dHRvbnMgPSBEYXRhLkJ1dHRvbnMNCglsb2NhbCBOb1RhYmxlID0gRGF0YS5Ob1RhYmxlDQoNCgktLS8vIENyZWF0ZSB0YWJsZSBsYXlvdXQNCglpZiBub3QgTm9UYWJsZSB0aGVuDQoJCVBhcmVudCA9IFBhcmVudDpUYWJsZSh7DQoJCQlNYXhDb2x1bW5zID0gMw0KCQl9KTpOZXh0Um93KCkNCgllbmQNCg0KCS0tLy8gQ3JlYXRlIGJ1dHRvbnMNCglmb3IgXywgQnV0dG9uIGluIG5leHQsIEJ1dHRvbnMgZG8NCgkJbG9jYWwgQ29udGFpbmVyID0gUGFyZW50DQoJCWlmIG5vdCBOb1RhYmxlIHRoZW4NCgkJCUNvbnRhaW5lciA9IFBhcmVudDpOZXh0Q29sdW1uKCkNCgkJZW5kDQoNCgkJUmVHdWk6Q2hlY2tDb25maWcoQnV0dG9uLCBCYXNlKQ0KCQlDb250YWluZXI6QnV0dG9uKEJ1dHRvbikNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVXaW5kb3coKQ0KICAgIGxvY2FsIEJhc2VDb25maWcgPSBzZWxmLkJhc2VDb25maWcNCglsb2NhbCBDb25maWcgPSBQcm9jZXNzOkRlZXBDbG9uZVRhYmxlKEJhc2VDb25maWcpDQoJbG9jYWwgU2Vhc29uYWwgPSBzZWxmOlR1cm5TZWFzb25hbChDb25maWcuVGl0bGUpDQoJQ29uZmlnLlRpdGxlID0gU2Vhc29uYWwNCg0KCS0tLy8gQ3JlYXRlIFdpbmRvdw0KCWxvY2FsIFdpbmRvdyA9IFJlR3VpOldpbmRvdyhDb25maWcpDQoNCgktLS8vIFN3aXRjaCB0byBEYXJrVGhlbWUgaW5zdGVhZCBvZiB0aGUgSW1HdWkgdGhlbWUgaWYgdGhlIGZvbnQgY2Fubm90IGJlIGxvYWRlZA0KCWlmIG5vdCBGb250U3VjY2VzcyB0aGVuIA0KCQlXaW5kb3c6U2V0VGhlbWUoIkRhcmtUaGVtZSIpDQoJZW5kDQoJDQoJLS0vLyBDcmVhdGUgV2luZG93DQoJcmV0dXJuIFdpbmRvdw0KZW5kDQoNCmZ1bmN0aW9uIFVpOkNyZWF0ZU1haW5XaW5kb3coKQ0KCWxvY2FsIFdpbmRvdyA9IHNlbGY6Q3JlYXRlV2luZG93KCkNCglzZWxmLldpbmRvdyA9IFdpbmRvdw0KDQoJLS0vLyBDaGVjayBpZiB0aGUgZm9udCB3YXMgc3VjY2Vzc2Z1bGx5IGRvd25sb2FkZWQNCglzZWxmOkZvbnRXYXNTdWNjZXNzZnVsKCkNCgktLXNlbGY6QXVyYUNvdW50ZXJTZXJ2aWNlKCkNCg0KCS0tLy8gVWlWaXNpYmxlIGZsYWcgY2FsbGJhY2sNCglGbGFnczpTZXRGbGFnQ2FsbGJhY2soIlVpVmlzaWJsZSIsIGZ1bmN0aW9uKHNlbGYsIFZpc2libGUpDQoJCVdpbmRvdzpTZXRWaXNpYmxlKFZpc2libGUpDQoJZW5kKQ0KDQoJcmV0dXJuIFdpbmRvdw0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNob3dNb2RhbChMaW5lczogdGFibGUpDQoJbG9jYWwgV2luZG93ID0gc2VsZi5XaW5kb3cNCglsb2NhbCBNZXNzYWdlID0gdGFibGUuY29uY2F0KExpbmVzLCAiXG4iKQ0KDQoJLS0vLyBNb2RhbCBXaW5kb3cNCglsb2NhbCBNb2RhbFdpbmRvdyA9IFdpbmRvdzpQb3B1cE1vZGFsKHsNCgkJVGl0bGUgPSAiU2lnbWEgU3B5Ig0KCX0pDQoJTW9kYWxXaW5kb3c6TGFiZWwoew0KCQlUZXh0ID0gTWVzc2FnZSwNCgkJUmljaFRleHQgPSB0cnVlLA0KCQlUZXh0V3JhcHBlZCA9IHRydWUNCgl9KQ0KCU1vZGFsV2luZG93OkJ1dHRvbih7DQoJCVRleHQgPSAiT2theSIsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJTW9kYWxXaW5kb3c6Q2xvc2VQb3B1cCgpDQoJCWVuZCwNCgl9KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNob3dVbnN1cHBvcnRlZEV4ZWN1dG9yKE5hbWU6IHN0cmluZykNCglVaTpTaG93TW9kYWwoew0KCQkiVW5mb3J0dW5hdGVseSBTaWdtYSBTcHkgaXMgbm90IHN1cHBvcnRlZCBvbiB5b3VyIGV4ZWN1dG9yIiwNCgkJIlRoZSBiZXN0IGZyZWUgb3B0aW9uIGlzIFN3aWZ0IChkaXNjb3JkLmdnL2dldHN3aWZ0Z2cpIiwNCgkJYFxuWW91ciBleGVjdXRvcjoge05hbWV9YA0KCX0pDQplbmQNCg0KZnVuY3Rpb24gVWk6U2hvd1Vuc3VwcG9ydGVkKEZ1bmNOYW1lOiBzdHJpbmcpDQoJVWk6U2hvd01vZGFsKHsNCgkJIlVuZm9ydHVuYXRlbHkgU2lnbWEgU3B5IGlzIG5vdCBzdXBwb3J0ZWQgb24geW91ciBleGVjdXRvciIsDQoJCWBcbk1pc3NpbmcgZnVuY3Rpb246IHtGdW5jTmFtZX1gDQoJfSkNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVPcHRpb25zRm9yRGljdChQYXJlbnQsIERpY3Q6IHRhYmxlLCBDYWxsYmFjaykNCglsb2NhbCBPcHRpb25zID0ge30NCg0KCS0tLy8gRGljdG9uYXJ5IHdyYXANCglmb3IgS2V5LCBWYWx1ZSBpbiBuZXh0LCBEaWN0IGRvDQoJCU9wdGlvbnNbS2V5XSA9IHsNCgkJCVZhbHVlID0gVmFsdWUsDQoJCQlMYWJlbCA9IEtleSwNCgkJCUNhbGxiYWNrID0gZnVuY3Rpb24oXywgVmFsdWUpDQoJCQkJRGljdFtLZXldID0gVmFsdWUNCg0KCQkJCS0tLy8gSW52b2tlIGNhbGxiYWNrDQoJCQkJaWYgbm90IENhbGxiYWNrIHRoZW4gcmV0dXJuIGVuZA0KCQkJCUNhbGxiYWNrKCkNCgkJCWVuZA0KCQl9DQoJZW5kDQoNCgktLS8vIENyZWF0ZSBlbGVtZW50cw0KCXNlbGY6Q3JlYXRlRWxlbWVudHMoUGFyZW50LCBPcHRpb25zKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkNoZWNrS2V5YmluZExheW91dChDb250YWluZXIsIEtleUNvZGU6IEVudW0uS2V5Q29kZSwgQ2FsbGJhY2spDQoJaWYgbm90IEtleUNvZGUgdGhlbiByZXR1cm4gQ29udGFpbmVyIGVuZA0KDQoJLS0vLyBDcmVhdGUgUm93IGxheW91dA0KCUNvbnRhaW5lciA9IENvbnRhaW5lcjpSb3coew0KCQlIb3Jpem9udGFsRmxleCA9IEVudW0uVUlGbGV4QWxpZ25tZW50LlNwYWNlQmV0d2Vlbg0KCX0pDQoNCgktLS8vIEFkZCBLZXliaW5kIGVsZW1lbnQNCglDb250YWluZXI6S2V5YmluZCh7DQoJCUxhYmVsID0gIiIsDQoJCVZhbHVlID0gS2V5Q29kZSwNCgkJTGF5b3V0T3JkZXIgPSAyLA0KCQlJZ25vcmVHYW1lUHJvY2Vzc2VkID0gZmFsc2UsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJLS0vLyBDaGVjayBpZiBrZXliaW5kcyBhcmUgZW5hYmxlZA0KCQkJbG9jYWwgRW5hYmxlZCA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiS2V5YmluZHNFbmFibGVkIikNCgkJCWlmIG5vdCBFbmFibGVkIHRoZW4gcmV0dXJuIGVuZA0KDQoJCQktLS8vIEludm9rZSBjYWxsYmFjaw0KCQkJQ2FsbGJhY2soKQ0KCQllbmQsDQoJfSkNCg0KCXJldHVybiBDb250YWluZXINCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVFbGVtZW50cyhQYXJlbnQsIE9wdGlvbnMpDQoJbG9jYWwgT3B0aW9uVHlwZXMgPSBzZWxmLk9wdGlvblR5cGVzDQoJDQoJLS0vLyBDcmVhdGUgdGFibGUgbGF5b3V0DQoJbG9jYWwgVGFibGUgPSBQYXJlbnQ6VGFibGUoew0KCQlNYXhDb2x1bW5zID0gMw0KCX0pOk5leHRSb3coKQ0KDQoJZm9yIE5hbWUsIERhdGEgaW4gT3B0aW9ucyBkbw0KCQlsb2NhbCBWYWx1ZSA9IERhdGEuVmFsdWUNCgkJbG9jYWwgVHlwZSA9IHR5cGVvZihWYWx1ZSkNCg0KCQktLS8vIEFkZCBtaXNzaW5nIHZhbHVlcyBpbnRvIG9wdGlvbnMgdGFibGUNCgkJUmVHdWk6Q2hlY2tDb25maWcoRGF0YSwgew0KCQkJQ2xhc3MgPSBPcHRpb25UeXBlc1tUeXBlXSwNCgkJCUxhYmVsID0gTmFtZSwNCgkJfSkNCgkJDQoJCS0tLy8gQ2hlY2sgaWYgYSBlbGVtZW50IHR5cGUgZXhpc3RzIGZvciB2YWx1ZSB0eXBlDQoJCWxvY2FsIENsYXNzID0gRGF0YS5DbGFzcw0KCQlhc3NlcnQoQ2xhc3MsIGBObyB7VHlwZX0gdHlwZSBleGlzdHMgZm9yIG9wdGlvbmApDQoNCgkJbG9jYWwgQ29udGFpbmVyID0gVGFibGU6TmV4dENvbHVtbigpDQoJCWxvY2FsIENoZWNrYm94ID0gbmlsDQoNCgkJLS0vLyBDaGVjayBmb3IgYSBrZXliaW5kIGxheW91dA0KCQlsb2NhbCBLZXliaW5kID0gRGF0YS5LZXliaW5kDQoJCUNvbnRhaW5lciA9IHNlbGY6Q2hlY2tLZXliaW5kTGF5b3V0KENvbnRhaW5lciwgS2V5YmluZCwgZnVuY3Rpb24oKQ0KCQkJQ2hlY2tib3g6VG9nZ2xlKCkNCgkJZW5kKQ0KCQkNCgkJLS0vLyBDcmVhdGUgY29sdW1uIGFuZCBlbGVtZW50DQoJCUNoZWNrYm94ID0gQ29udGFpbmVyW0NsYXNzXShDb250YWluZXIsIERhdGEpDQoJZW5kDQplbmQNCg0KLS0vLyBCb2lpaWkgd2hhdCBkaWQgeW91IHNheSBhYm91dCBTaWdtYSBTcHkg8J+SgPCfkoANCmZ1bmN0aW9uIFVpOkRpc3BsYXlBdXJhKCkNCiAgICBsb2NhbCBXaW5kb3cgPSBzZWxmLldpbmRvdw0KICAgIGxvY2FsIFJhbmQgPSBzZWxmLlJhbmRvbVNlZWQNCg0KCS0tLy8gQXVyYSAoYm9paWlpaSkNCiAgICBsb2NhbCBBVVJBID0gUmFuZDpOZXh0SW50ZWdlcigxLCA5OTk5OTk5KQ0KICAgIGxvY2FsIEFVUkFERUxBWSA9IFJhbmQ6TmV4dEludGVnZXIoMSwgNSkNCg0KCS0tLy8gVGl0bGUNCglsb2NhbCBUaXRsZSA9IGBTaWdtYSBTcHkgLSBEZXBzbyB8IEFVUkE6IHtBVVJBfWANCglsb2NhbCBTZWFzb25hbCA9IHNlbGY6VHVyblNlYXNvbmFsKFRpdGxlKQ0KICAgIFdpbmRvdzpTZXRUaXRsZShTZWFzb25hbCkNCg0KICAgIHdhaXQoQVVSQURFTEFZKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkF1cmFDb3VudGVyU2VydmljZSgpDQogICAgdGFzay5zcGF3bihmdW5jdGlvbigpDQogICAgICAgIHdoaWxlIHRydWUgZG8NCiAgICAgICAgICAgIHNlbGY6RGlzcGxheUF1cmEoKQ0KICAgICAgICBlbmQNCiAgICBlbmQpDQplbmQNCg0KZnVuY3Rpb24gVWk6Q3JlYXRlV2luZG93Q29udGVudChXaW5kb3cpDQogICAgLS0vLyBXaW5kb3cgZ3JvdXANCiAgICBsb2NhbCBMYXlvdXQgPSBXaW5kb3c6TGlzdCh7DQogICAgICAgIFVpUGFkZGluZyA9IDIsDQogICAgICAgIEhvcml6b250YWxGbGV4ID0gRW51bS5VSUZsZXhBbGlnbm1lbnQuRmlsbCwNCiAgICAgICAgVmVydGljYWxGbGV4ID0gRW51bS5VSUZsZXhBbGlnbm1lbnQuRmlsbCwNCiAgICAgICAgRmlsbERpcmVjdGlvbiA9IEVudW0uRmlsbERpcmVjdGlvbi5WZXJ0aWNhbCwNCiAgICAgICAgRmlsbCA9IHRydWUNCiAgICB9KQ0KDQoJLS0vLyBSZW1vdGVzIGxpc3QNCiAgICBzZWxmLlJlbW90ZXNMaXN0ID0gTGF5b3V0OkNhbnZhcyh7DQogICAgICAgIFNjcm9sbCA9IHRydWUsDQogICAgICAgIFVpUGFkZGluZyA9IDUsDQogICAgICAgIEF1dG9tYXRpY1NpemUgPSBFbnVtLkF1dG9tYXRpY1NpemUuTm9uZSwNCiAgICAgICAgRmxleE1vZGUgPSBFbnVtLlVJRmxleE1vZGUuTm9uZSwNCiAgICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCAxMzAsIDEsIDApDQogICAgfSkNCg0KCS0tLy8gVGFiIGJveA0KCWxvY2FsIEluZm9TZWxlY3RvciA9IExheW91dDpUYWJTZWxlY3Rvcih7DQogICAgICAgIE5vQW5pbWF0aW9uID0gdHJ1ZSwNCiAgICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAtMTMwLCAwLjQsIDApLA0KICAgIH0pDQoNCglzZWxmLkluZm9TZWxlY3RvciA9IEluZm9TZWxlY3Rvcg0KCXNlbGYuQ2FudmFzTGF5b3V0ID0gTGF5b3V0DQoNCgktLS8vIE1ha2UgdGFicw0KCXNlbGY6TWFrZUVkaXRvclRhYihJbmZvU2VsZWN0b3IpDQoJc2VsZjpNYWtlT3B0aW9uc1RhYihJbmZvU2VsZWN0b3IpDQoJDQoJaWYgQ29uZmlnLkRlYnVnIHRoZW4NCgkJc2VsZjpDb25zb2xlVGFiKEluZm9TZWxlY3RvcikNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpDb25zb2xlVGFiKEluZm9TZWxlY3RvcikNCglsb2NhbCBUYWIgPSBJbmZvU2VsZWN0b3I6Q3JlYXRlVGFiKHsNCgkJTmFtZSA9ICJDb25zb2xlIg0KCX0pDQoNCglsb2NhbCBDb25zb2xlDQoJbG9jYWwgQnV0dG9uc1JvdyA9IFRhYjpSb3coKQ0KDQoJQnV0dG9uc1JvdzpCdXR0b24oew0KCQlUZXh0ID0gIkNsZWFyIiwNCgkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQlDb25zb2xlOkNsZWFyKCkNCgkJZW5kDQoJfSkNCglCdXR0b25zUm93OkJ1dHRvbih7DQoJCVRleHQgPSAiQ29weSIsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJbG9jYWwgQ29udGVudCA9IENvbnNvbGU6R2V0VmFsdWUoKQ0KCQkJdG9jbGlwYm9hcmQoQ29udGVudCkNCgkJZW5kDQoJfSkNCglCdXR0b25zUm93OkJ1dHRvbih7DQoJCVRleHQgPSAiUGF1c2UiLA0KCQlDYWxsYmFjayA9IGZ1bmN0aW9uKHNlbGYpDQoJCQlsb2NhbCBFbmFibGVkID0gbm90IENvbnNvbGUuRW5hYmxlZA0KCQkJbG9jYWwgVGV4dCA9IEVuYWJsZWQgYW5kICJQYXVzZSIgb3IgIlBhdXNlZCINCgkJCXNlbGYuVGV4dCA9IFRleHQNCg0KCQkJLS0vLyBVcGRhdGUgY29uc29sZQ0KCQkJQ29uc29sZS5FbmFibGVkID0gRW5hYmxlZA0KCQllbmQsDQoJfSkNCglCdXR0b25zUm93OkV4cGFuZCgpDQoNCgktLS8vIENyZWF0ZSBjb25zb2xlDQoJQ29uc29sZSA9IFRhYjpDb25zb2xlKHsNCgkJVGV4dCA9ICItLSBDcmVhdGVkIGJ5IGRlcHNvIiwNCgkJUmVhZE9ubHkgPSB0cnVlLA0KCQlCb3JkZXIgPSBmYWxzZSwNCgkJRmlsbCA9IHRydWUsDQoJCUVuYWJsZWQgPSB0cnVlLA0KCQlBdXRvU2Nyb2xsID0gdHJ1ZSwNCgkJUmljaFRleHQgPSB0cnVlLA0KCQlNYXhMaW5lcyA9IDUwDQoJfSkNCg0KCXNlbGYuQ29uc29sZSA9IENvbnNvbGUNCmVuZA0KDQpmdW5jdGlvbiBVaTpDb25zb2xlTG9nKC4uLjogc3RyaW5nPykNCglsb2NhbCBDb25zb2xlID0gc2VsZi5Db25zb2xlDQoJaWYgbm90IENvbnNvbGUgdGhlbiByZXR1cm4gZW5kDQoNCglDb25zb2xlOkFwcGVuZFRleHQoLi4uKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOk1ha2VPcHRpb25zVGFiKEluZm9TZWxlY3RvcikNCglsb2NhbCBUYWIgPSBJbmZvU2VsZWN0b3I6Q3JlYXRlVGFiKHsNCgkJTmFtZSA9ICJPcHRpb25zIg0KCX0pDQoNCgktLS8vIEFkZCBnbG9iYWwgb3B0aW9ucw0KCVRhYjpTZXBhcmF0b3Ioe1RleHQ9IkxvZ3MifSkNCglzZWxmOkNyZWF0ZUJ1dHRvbnMoVGFiLCB7DQoJCUJhc2UgPSB7DQoJCQlTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDIwKSwNCgkJCUF1dG9tYXRpY1NpemUgPSBFbnVtLkF1dG9tYXRpY1NpemUuWSwNCgkJfSwNCgkJQnV0dG9ucyA9IHsNCgkJCXsNCgkJCQlUZXh0ID0gIkNsZWFyIGxvZ3MiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBUYWIgPSBBY3RpdmVEYXRhIGFuZCBBY3RpdmVEYXRhLlRhYiBvciBuaWwNCg0KCQkJCQktLS8vIFJlbW92ZSB0aGUgUmVtb3RlIHRhYg0KCQkJCQlpZiBUYWIgdGhlbg0KCQkJCQkJSW5mb1NlbGVjdG9yOlJlbW92ZVRhYihUYWIpDQoJCQkJCWVuZA0KDQoJCQkJCS0tLy8gQ2xlYXIgYWxsIGxvZyBlbGVtZW50cw0KCQkJCQlBY3RpdmVEYXRhID0gbmlsDQoJCQkJCXNlbGY6Q2xlYXJMb2dzKCkNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiQ2xlYXIgYmxvY2tzIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJUHJvY2VzczpVcGRhdGVBbGxSZW1vdGVEYXRhKCJCbG9ja2VkIiwgZmFsc2UpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkNsZWFyIGV4Y2x1ZGVzIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJUHJvY2VzczpVcGRhdGVBbGxSZW1vdGVEYXRhKCJFeGNsdWRlZCIsIGZhbHNlKQ0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJDb3B5IERpc2NvcmQiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlzZWxmOlNldENsaXBib2FyZCgiaHR0cHM6Ly9kaXNjb3JkLmdnL3M5bmdtVURXZ2IiKQ0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJDb3B5IEdpdGh1YiIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCXNlbGY6U2V0Q2xpcGJvYXJkKCJodHRwczovL2dpdGh1Yi5jb20vZGVwdGhzby9TaWdtYS1TcHkiKQ0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJFZGl0IFNwb29mcyIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCXNlbGY6RWRpdEZpbGUoIlJldHVybiBzcG9vZnMubHVhIiwgdHJ1ZSwgZnVuY3Rpb24oV2luZG93LCBDb250ZW50OiBzdHJpbmcpDQoJCQkJCQlXaW5kb3c6Q2xvc2UoKQ0KCQkJCQkJQ29tbUNoYW5uZWw6RmlyZSgiVXBkYXRlU3Bvb2ZzIiwgQ29udGVudCkNCgkJCQkJZW5kKQ0KCQkJCWVuZCwNCgkJCX0NCgkJfQ0KCX0pDQoNCgktLS8vIEZsYWcgb3B0aW9ucw0KCVRhYjpTZXBhcmF0b3Ioe1RleHQ9IlNldHRpbmdzIn0pDQoJc2VsZjpDcmVhdGVFbGVtZW50cyhUYWIsIEZsYWdzOkdldEZsYWdzKCkpDQoNCglzZWxmOkFkZERldGFpbHNTZWN0aW9uKFRhYikNCmVuZA0KDQpmdW5jdGlvbiBVaTpBZGREZXRhaWxzU2VjdGlvbihPcHRpb25zVGFiKQ0KCU9wdGlvbnNUYWI6U2VwYXJhdG9yKHtUZXh0PSJJbmZvcm1hdGlvbiJ9KQ0KCU9wdGlvbnNUYWI6QnVsbGV0VGV4dCh7DQoJCVJvd3MgPSB7DQoJCQkiU2lnbWEgc3B5IC0gV3JpdHRlbiBieSBkZXBzbyEiLA0KCQkJIkxpYnJhcmllczogUm9ibG94LVBhcnNlciwgRGVhci1SZUd1aSIsDQoJCQkiVGhhbmsgeW91IHN5bi5sdWEgZm9yIHN1Z2dlc3RpbmcgSSBtYWtlIHRoaXMiDQoJCX0NCgl9KQ0KZW5kDQoNCmxvY2FsIGZ1bmN0aW9uIE1ha2VBY3RpdmVEYXRhQ2FsbGJhY2soTmFtZTogc3RyaW5nKQ0KCXJldHVybiBmdW5jdGlvbiguLi4pDQoJCWlmIG5vdCBBY3RpdmVEYXRhIHRoZW4gcmV0dXJuIGVuZA0KCQlyZXR1cm4gQWN0aXZlRGF0YVtOYW1lXShBY3RpdmVEYXRhLCAuLi4pDQoJZW5kDQplbmQNCg0KZnVuY3Rpb24gVWk6TWFrZUVkaXRvclRhYihJbmZvU2VsZWN0b3IpDQoJbG9jYWwgRGVmYXVsdCA9IHNlbGYuRGVmYXVsdEVkaXRvckNvbnRlbnQNCglsb2NhbCBTeW50YXhDb2xvcnMgPSBDb25maWcuU3ludGF4Q29sb3JzDQoNCgktLS8vIENyZWF0ZSB0YWINCglsb2NhbCBFZGl0b3JUYWIgPSBJbmZvU2VsZWN0b3I6Q3JlYXRlVGFiKHsNCgkJTmFtZSA9ICJFZGl0b3IiDQoJfSkNCg0KCS0tLy8gSURFDQoJbG9jYWwgQ29kZUVkaXRvciA9IEVkaXRvclRhYjpDb2RlRWRpdG9yKHsNCgkJRmlsbCA9IHRydWUsDQoJCUVkaXRhYmxlID0gdHJ1ZSwNCgkJRm9udFNpemUgPSAxMywNCgkJQ29sb3JzID0gU3ludGF4Q29sb3JzLA0KCQlGb250RmFjZSA9IFRleHRGb250LA0KCQlUZXh0ID0gRGVmYXVsdA0KCX0pDQoNCgktLS8vIEJ1dHRvbnMNCglsb2NhbCBCdXR0b25zUm93ID0gRWRpdG9yVGFiOlJvdygpDQoJc2VsZjpDcmVhdGVCdXR0b25zKEJ1dHRvbnNSb3csIHsNCgkJTm9UYWJsZSA9IHRydWUsDQoJCUJ1dHRvbnMgPSB7DQoJCQl7DQoJCQkJVGV4dCA9ICJDb3B5IiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJbG9jYWwgU2NyaXB0ID0gQ29kZUVkaXRvcjpHZXRUZXh0KCkNCgkJCQkJc2VsZjpTZXRDbGlwYm9hcmQoU2NyaXB0KQ0KCQkJCWVuZA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIlJ1biIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIFNjcmlwdCA9IENvZGVFZGl0b3I6R2V0VGV4dCgpDQoJCQkJCWxvY2FsIEZ1bmMsIEVycm9yID0gbG9hZHN0cmluZyhTY3JpcHQsICJTaWdtYVNweS1VU0VSU0NSSVBUIikNCg0KCQkJCQktLS8vIFN5bnRheCBjaGVjaw0KCQkJCQlpZiBub3QgRnVuYyB0aGVuDQoJCQkJCQlzZWxmOlNob3dNb2RhbCh7IkVycm9yIHJ1bm5pbmcgc2NyaXB0IVxuIiwgRXJyb3J9KQ0KCQkJCQkJcmV0dXJuDQoJCQkJCWVuZA0KDQoJCQkJCUZ1bmMoKQ0KCQkJCWVuZA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkdldCByZXR1cm4iLA0KCQkJCUNhbGxiYWNrID0gTWFrZUFjdGl2ZURhdGFDYWxsYmFjaygiR2V0UmV0dXJuIikNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJTY3JpcHQiLA0KCQkJCUNhbGxiYWNrID0gTWFrZUFjdGl2ZURhdGFDYWxsYmFjaygiU2NyaXB0T3B0aW9ucyIpDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiQnVpbGQiLA0KCQkJCUNhbGxiYWNrID0gTWFrZUFjdGl2ZURhdGFDYWxsYmFjaygiQnVpbGRTY3JpcHQiKQ0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIlBvcC1vdXQiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBTY3JpcHQgPSBDb2RlRWRpdG9yOkdldFRleHQoKQ0KCQkJCQlsb2NhbCBUaWxlID0gQWN0aXZlRGF0YSBhbmQgQWN0aXZlRGF0YS5UYXNrIG9yICJTaWdtYSBTcHkiDQoJCQkJCXNlbGY6TWFrZUVkaXRvclBvcG91dFdpbmRvdyhTY3JpcHQsIHsNCgkJCQkJCVRpdGxlID0gVGlsZQ0KCQkJCQl9KQ0KCQkJCWVuZA0KCQkJfSwNCgkJfQ0KCX0pDQoJDQoJc2VsZi5Db2RlRWRpdG9yID0gQ29kZUVkaXRvcg0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNob3VsZEZvY3VzKFRhYik6IGJvb2xlYW4NCglsb2NhbCBJbmZvU2VsZWN0b3IgPSBzZWxmLkluZm9TZWxlY3Rvcg0KCWxvY2FsIEFjdGl2ZVRhYiA9IEluZm9TZWxlY3Rvci5BY3RpdmVUYWINCg0KCS0tLy8gSWYgdGhlcmUgaXMgYW4gZW1wdHkgdGFiDQoJaWYgbm90IEFjdGl2ZVRhYiB0aGVuDQoJCXJldHVybiB0cnVlDQoJZW5kDQoNCglyZXR1cm4gSW5mb1NlbGVjdG9yOkNvbXBhcmVUYWJzKEFjdGl2ZVRhYiwgVGFiKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOk1ha2VFZGl0b3JQb3BvdXRXaW5kb3coQ29udGVudDogc3RyaW5nLCBXaW5kb3dDb25maWc6IHRhYmxlKQ0KCWxvY2FsIFdpbmRvdyA9IHNlbGY6Q3JlYXRlV2luZG93KFdpbmRvd0NvbmZpZykNCglsb2NhbCBCdXR0b25zID0gV2luZG93Q29uZmlnLkJ1dHRvbnMgb3Ige30NCglsb2NhbCBDb2xvcnMgPSBDb25maWcuU3ludGF4Q29sb3JzDQoNCglsb2NhbCBDb2RlRWRpdG9yID0gV2luZG93OkNvZGVFZGl0b3Ioew0KCQlUZXh0ID0gQ29udGVudCwNCgkJRWRpdGFibGUgPSB0cnVlLA0KCQlGaWxsID0gdHJ1ZSwNCgkJRm9udFNpemUgPSAxMywNCgkJQ29sb3JzID0gQ29sb3JzLA0KCQlGb250RmFjZSA9IFRleHRGb250DQoJfSkNCg0KCS0tLy8gRGVmYXVsdCBidXR0b25zDQoJdGFibGUuaW5zZXJ0KEJ1dHRvbnMsIHsNCgkJVGV4dCA9ICJDb3B5IiwNCgkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQlsb2NhbCBTY3JpcHQgPSBDb2RlRWRpdG9yOkdldFRleHQoKQ0KCQkJc2VsZjpTZXRDbGlwYm9hcmQoU2NyaXB0KQ0KCQllbmQNCgl9KQ0KDQoJLS0vLyBCdXR0b25zDQoJbG9jYWwgQnV0dG9uc1JvdyA9IFdpbmRvdzpSb3coKQ0KCXNlbGY6Q3JlYXRlQnV0dG9ucyhCdXR0b25zUm93LCB7DQoJCU5vVGFibGUgPSB0cnVlLA0KCQlCdXR0b25zID0gQnV0dG9ucw0KCX0pDQoNCglXaW5kb3c6Q2VudGVyKCkNCglyZXR1cm4gQ29kZUVkaXRvciwgV2luZG93DQplbmQNCg0KZnVuY3Rpb24gVWk6RWRpdEZpbGUoRmlsZVBhdGg6IHN0cmluZywgSW5Gb2xkZXI6IGJvb2xlYW4sIE9uU2F2ZUZ1bmM6ICgodGFibGUsIHN0cmluZykgLT4gbmlsKT8pDQoJbG9jYWwgRm9sZGVyID0gRmlsZXMuRm9sZGVyTmFtZQ0KCWxvY2FsIENvZGVFZGl0b3IsIFdpbmRvdw0KDQoJLS0vLyBSZWxhdGl2ZSB0byBTaWdtYSBTcHkgZm9sZGVyDQoJaWYgSW5Gb2xkZXIgdGhlbg0KCQlGaWxlUGF0aCA9IGB7Rm9sZGVyfS97RmlsZVBhdGh9YA0KCWVuZA0KDQoJLS0vLyBHZXQgZmlsZSBjb250ZW50DQoJbG9jYWwgQ29udGVudCA9IHJlYWRmaWxlKEZpbGVQYXRoKQ0KCUNvbnRlbnQgPSBDb250ZW50OmdzdWIoIlxyXG4iLCAiXG4iKQ0KCQ0KCWxvY2FsIEJ1dHRvbnMgPSB7DQoJCXsNCgkJCVRleHQgPSAiU2F2ZSIsDQoJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQlsb2NhbCBTY3JpcHQgPSBDb2RlRWRpdG9yOkdldFRleHQoKQ0KCQkJCWxvY2FsIFN1Y2Nlc3MsIEVycm9yID0gbG9hZHN0cmluZyhTY3JpcHQsICJTaWdtYVNweS1FZGl0b3IiKQ0KDQoJCQkJLS0vLyBTeW50YXggY2hlY2sNCgkJCQlpZiBub3QgU3VjY2VzcyB0aGVuDQoJCQkJCXNlbGY6U2hvd01vZGFsKHsiRXJyb3Igc2F2aW5nIGZpbGUhXG4iLCBFcnJvcn0pDQoJCQkJCXJldHVybg0KCQkJCWVuZA0KCQkJCQ0KCQkJCS0tLy8gU2F2ZSBjb250ZW50cw0KCQkJCXdyaXRlZmlsZShGaWxlUGF0aCwgU2NyaXB0KQ0KDQoJCQkJLS0vLyBJbnZva2Ugb24gc2F2ZSBmdW5jdGlvbg0KCQkJCWlmIE9uU2F2ZUZ1bmMgdGhlbg0KCQkJCQlPblNhdmVGdW5jKFdpbmRvdywgU2NyaXB0KQ0KCQkJCWVuZA0KCQkJZW5kDQoJCX0NCgl9DQoNCgktLS8vIENyZWF0ZSBFZGl0b3IgV2luZG93DQoJQ29kZUVkaXRvciwgV2luZG93ID0gc2VsZjpNYWtlRWRpdG9yUG9wb3V0V2luZG93KENvbnRlbnQsIHsNCgkJVGl0bGUgPSBgRWRpdGluZzoge0ZpbGVQYXRofWAsDQoJCUJ1dHRvbnMgPSBCdXR0b25zDQoJfSkNCmVuZA0KDQp0eXBlIE1lbnVPcHRpb25zID0gew0KCVtzdHJpbmddOiAoR3VpQnV0dG9uLCAuLi5hbnkpIC0+IG5pbA0KfQ0KZnVuY3Rpb24gVWk6TWFrZUJ1dHRvbk1lbnUoQnV0dG9uOiBJbnN0YW5jZSwgVW5wYWNrOiB0YWJsZSwgT3B0aW9uczogTWVudU9wdGlvbnMpDQoJbG9jYWwgV2luZG93ID0gc2VsZi5XaW5kb3cNCglsb2NhbCBQb3B1cCA9IFdpbmRvdzpQb3B1cENhbnZhcyh7DQoJCVJlbGF0aXZlVG8gPSBCdXR0b24sDQoJCU1heFNpemVYID0gNTAwLA0KCX0pDQoNCgktLS8vIENyZWF0ZSBTZWxlY3RhYmxlcyBmb3Igc3RyaW5nLCBmdW5jdGlvbg0KCWZvciBOYW1lLCBGdW5jIGluIE9wdGlvbnMgZG8NCgkJIFBvcHVwOlNlbGVjdGFibGUoew0KCQkJVGV4dCA9IE5hbWUsDQoJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQlGdW5jKFByb2Nlc3M6VW5wYWNrKFVucGFjaykpDQoJCQllbmQsDQoJCX0pDQoJZW5kDQplbmQNCg0KZnVuY3Rpb24gVWk6UmVtb3ZlUHJldmlvdXNUYWIoVGl0bGU6IHN0cmluZyk6IGJvb2xlYW4NCgktLS8vIE5vIHByZXZpb3VzIHRhYnMNCglpZiBub3QgQWN0aXZlRGF0YSB0aGVuIA0KCQlyZXR1cm4gZmFsc2UgDQoJZW5kDQoNCgktLS8vIFRhYlNlbGVjdG9yDQoJbG9jYWwgSW5mb1NlbGVjdG9yID0gc2VsZi5JbmZvU2VsZWN0b3INCg0KCS0tLy8gUHJldmlvdXMgZWxlbWVudHMNCglsb2NhbCBQcmV2aW91c1RhYiA9IEFjdGl2ZURhdGEuVGFiDQoJbG9jYWwgUHJldmlvdXNTZWxlY3RhYmxlID0gQWN0aXZlRGF0YS5TZWxlY3RhYmxlDQoNCgktLS8vIFJlbW92ZSBwcmV2aW91cyB0YWIgYW5kIHNldCBzZWxlY3RhYmxlIGZvY3VzDQoJbG9jYWwgVGFiRm9jdXNlZCA9IHNlbGY6U2hvdWxkRm9jdXMoUHJldmlvdXNUYWIpDQoJSW5mb1NlbGVjdG9yOlJlbW92ZVRhYihQcmV2aW91c1RhYikNCglQcmV2aW91c1NlbGVjdGFibGU6U2V0U2VsZWN0ZWQoZmFsc2UpDQoNCgktLS8vIENyZWF0ZSBuZXcgdGFiDQoJcmV0dXJuIFRhYkZvY3VzZWQNCmVuZA0KDQpmdW5jdGlvbiBVaTpNYWtlVGFibGVIZWFkZXJzKFRhYmxlLCBSb3dzOiB0YWJsZSkNCglsb2NhbCBIZWFkZXJSb3cgPSBUYWJsZTpIZWFkZXJSb3coKQ0KCWZvciBfLCBDYXRhZ29yeSBpbiBSb3dzIGRvDQoJCWxvY2FsIENvbHVtbiA9IEhlYWRlclJvdzpOZXh0Q29sdW1uKCkNCgkJQ29sdW1uOkxhYmVsKHtUZXh0PUNhdGFnb3J5fSkNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpEZWNvbXBpbGUoRWRpdG9yOiB0YWJsZSwgU2NyaXB0OiBTY3JpcHQpDQoJbG9jYWwgSGVhZGVyID0gIi0tQk9PSUlJSSBUSElTIElTIFNPIFRVRkYgRkxJUFBZIFNLSUJJREkgQVVSQSAoU0lHTUEgU1BZKSINCglFZGl0b3I6U2V0VGV4dCgiLS1EZWNvbXBpbGluZy4uLiArOTk5OTk5OSBBVVJBIChtYW5nbyBwaG9uaykiKQ0KDQoJLS0vLyBEZWNvbXBpbGUgc2NyaXB0DQoJbG9jYWwgRGVjb21waWxlZCwgSXNFcnJvciA9IFByb2Nlc3M6RGVjb21waWxlKFNjcmlwdCkNCg0KCS0tLy8gQWRkIGhlYWRlciBmb3Igc3VjY2Vzc2Z1bCBkZWNvbXBpbGF0aW9ucw0KCWlmIG5vdCBJc0Vycm9yIHRoZW4NCgkJRGVjb21waWxlZCA9IGB7SGVhZGVyfVxue0RlY29tcGlsZWR9YA0KCWVuZA0KDQoJRWRpdG9yOlNldFRleHQoRGVjb21waWxlZCkNCmVuZA0KDQp0eXBlIERpc3BsYXlUYWJsZUNvbmZpZyA9IHsNCglSb3dzOiB0YWJsZSwNCglGbGFnczogdGFibGU/LA0KCVRvRGlzcGxheTogdGFibGUsDQoJVGFibGU6IHRhYmxlDQp9DQpmdW5jdGlvbiBVaTpEaXNwbGF5VGFibGUoUGFyZW50LCBDb25maWc6IERpc3BsYXlUYWJsZUNvbmZpZyk6IHRhYmxlDQoJLS0vLyBDb25maWd1cmF0aW9uDQoJbG9jYWwgUm93cyA9IENvbmZpZy5Sb3dzDQoJbG9jYWwgRmxhZ3MgPSBDb25maWcuRmxhZ3MNCglsb2NhbCBEYXRhVGFibGUgPSBDb25maWcuVGFibGUNCglsb2NhbCBUb0Rpc3BsYXkgPSBDb25maWcuVG9EaXNwbGF5DQoNCglGbGFncy5NYXhDb2x1bW5zID0gI1Jvd3MNCg0KCS0tLy8gQ3JlYXRlIHRhYmxlDQoJbG9jYWwgVGFibGUgPSBQYXJlbnQ6VGFibGUoRmxhZ3MpDQoNCgktLS8vIFRhYmxlIGhlYWRlcnMNCglzZWxmOk1ha2VUYWJsZUhlYWRlcnMoVGFibGUsIFJvd3MpDQoNCgktLS8vIFRhYmxlIGxheW91dA0KCWZvciBSb3dJbmRleCwgTmFtZSBpbiBUb0Rpc3BsYXkgZG8NCgkJbG9jYWwgUm93ID0gVGFibGU6Um93KCkNCgkJDQoJCS0tLy8gQ3JlYXRlIENvbHVtbnMNCgkJZm9yIENvdW50LCBDYXRhZ29yeSBpbiBSb3dzIGRvDQoJCQlsb2NhbCBDb2x1bW4gPSBSb3c6TmV4dENvbHVtbigpDQoJCQkNCgkJCS0tLy8gVmFsdWUgdGV4dA0KCQkJbG9jYWwgVmFsdWUgPSBDYXRhZ29yeSA9PSAiTmFtZSIgYW5kIE5hbWUgb3IgRGF0YVRhYmxlW05hbWVdDQoJCQlpZiBub3QgVmFsdWUgdGhlbiBjb250aW51ZSBlbmQNCg0KCQkJLS0vLyBDcmVhdGUgZmlsdGVyZWQgbGFiZWwNCgkJCWxvY2FsIFN0cmluZyA9IHNlbGY6RmlsdGVyTmFtZShge1ZhbHVlfWAsIDE1MCkNCgkJCUNvbHVtbjpMYWJlbCh7VGV4dD1TdHJpbmd9KQ0KCQllbmQNCgllbmQNCg0KCXJldHVybiBUYWJsZQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNldEZvY3VzZWRSZW1vdGUoRGF0YSkNCgktLS8vIFVucGFjayByZW1vdGUgZGF0YQ0KCWxvY2FsIFJlbW90ZSA9IERhdGEuUmVtb3RlDQoJbG9jYWwgTWV0aG9kID0gRGF0YS5NZXRob2QNCglsb2NhbCBJc1JlY2VpdmUgPSBEYXRhLklzUmVjZWl2ZQ0KCWxvY2FsIFNjcmlwdCA9IERhdGEuQ2FsbGluZ1NjcmlwdA0KCWxvY2FsIENsYXNzRGF0YSA9IERhdGEuQ2xhc3NEYXRhDQoJbG9jYWwgSGVhZGVyRGF0YSA9IERhdGEuSGVhZGVyRGF0YQ0KCWxvY2FsIFZhbHVlU3dhcHMgPSBEYXRhLlZhbHVlU3dhcHMNCglsb2NhbCBBcmdzID0gRGF0YS5BcmdzDQoJbG9jYWwgSWQgPSBEYXRhLklkDQoNCgktLS8vIEZsYWdzDQoJbG9jYWwgVGFibGVBcmdzID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJUYWJsZUFyZ3MiKQ0KCWxvY2FsIE5vVmFyaWFibGVzID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJOb1ZhcmlhYmxlcyIpDQoNCgktLS8vIFVucGFjayBpbmZvDQoJbG9jYWwgUmVtb3RlRGF0YSA9IFByb2Nlc3M6R2V0UmVtb3RlRGF0YShJZCkNCglsb2NhbCBJc1JlbW90ZUZ1bmN0aW9uID0gQ2xhc3NEYXRhLklzUmVtb3RlRnVuY3Rpb24NCglsb2NhbCBSZW1vdGVOYW1lID0gc2VsZjpGaWx0ZXJOYW1lKGB7UmVtb3RlfWAsIDUwKQ0KDQoJLS0vLyBVSSBkYXRhDQoJbG9jYWwgQ29kZUVkaXRvciA9IHNlbGYuQ29kZUVkaXRvcg0KCWxvY2FsIFRvRGlzcGxheSA9IHNlbGYuRGlzcGxheVJlbW90ZUluZm8NCglsb2NhbCBJbmZvU2VsZWN0b3IgPSBzZWxmLkluZm9TZWxlY3Rvcg0KDQoJbG9jYWwgVGFiRm9jdXNlZCA9IHNlbGY6UmVtb3ZlUHJldmlvdXNUYWIoKQ0KCWxvY2FsIFRhYiA9IEluZm9TZWxlY3RvcjpDcmVhdGVUYWIoew0KCQlOYW1lID0gc2VsZjpGaWx0ZXJOYW1lKGBSZW1vdGU6IHtSZW1vdGVOYW1lfWAsIDUwKSwNCgkJRm9jdXNlZCA9IFRhYkZvY3VzZWQNCgl9KQ0KDQoJLS0vLyBDcmVhdGUgbmV3IHBhcnNlcg0KCWxvY2FsIE1vZHVsZSA9IEdlbmVyYXRpb246TmV3UGFyc2VyKHsNCgkJTm9WYXJpYWJsZXMgPSBOb1ZhcmlhYmxlcw0KCX0pDQoJbG9jYWwgUGFyc2VyID0gTW9kdWxlLlBhcnNlcg0KCWxvY2FsIEZvcm1hdHRlciA9IE1vZHVsZS5Gb3JtYXR0ZXINCglGb3JtYXR0ZXI6U2V0VmFsdWVTd2FwcyhWYWx1ZVN3YXBzKQ0KDQoJLS0vLyBTZXQgdGhpcyBsb2cgdG8gYmUgc2VsZWN0ZWQNCglBY3RpdmVEYXRhID0gRGF0YQ0KCURhdGEuVGFiID0gVGFiDQoJRGF0YS5TZWxlY3RhYmxlOlNldFNlbGVjdGVkKHRydWUpDQoNCglsb2NhbCBmdW5jdGlvbiBTZXRJREVUZXh0KENvbnRlbnQ6IHN0cmluZywgVGFzazogc3RyaW5nPykNCgkJRGF0YS5UYXNrID0gVGFzayBvciAiU2lnbWEgU3B5Ig0KCQlDb2RlRWRpdG9yOlNldFRleHQoQ29udGVudCkNCgllbmQNCglsb2NhbCBmdW5jdGlvbiBEYXRhQ29ubmVjdGlvbihOYW1lLCAuLi4pDQoJCWxvY2FsIEFyZ3MgPSB7Li4ufQ0KCQlyZXR1cm4gZnVuY3Rpb24oKQ0KCQkJcmV0dXJuIERhdGFbTmFtZV0oRGF0YSwgUHJvY2VzczpVbnBhY2soQXJncykpDQoJCWVuZA0KCWVuZA0KCWxvY2FsIGZ1bmN0aW9uIFNjcmlwdENoZWNrKFNjcmlwdCwgTm9NaXNzaW5nQ2hlY2s6IGJvb2xlYW4pOiBib29sZWFuPw0KCQktLS8vIFJlamVjdCBjbGllbnQgZXZlbnRzDQoJCWlmIElzUmVjZWl2ZSB0aGVuIA0KCQkJVWk6U2hvd01vZGFsKHsNCgkJCQkiUmVjaWV2ZXMgZG8gbm90IGhhdmUgYSBzY3JpcHQgYmVjYXVzZSBpdCdzIGEgQ29ubmVjdGlvbiINCgkJCX0pDQoJCQlyZXR1cm4gDQoJCWVuZA0KDQoJCS0tLy8gQ2hlY2sgaWYgc2NyaXB0IGV4aXN0cw0KCQlpZiBub3QgU2NyaXB0IGFuZCBub3QgTm9NaXNzaW5nQ2hlY2sgdGhlbiANCgkJCVVpOlNob3dNb2RhbCh7IlRoZSBTY3JpcHQgaGFzIGJlZW4gZGVzdHJveWVkIGJ5IHRoZSBnYW1lICgtOTk5OTk5OSBBVVJBKSJ9KQ0KCQkJcmV0dXJuDQoJCWVuZA0KDQoJCXJldHVybiB0cnVlDQoJZW5kDQoNCgktLS8vIEZ1bmN0aW9ucw0KCWZ1bmN0aW9uIERhdGE6U2NyaXB0T3B0aW9ucyhCdXR0b246IEd1aUJ1dHRvbikNCgkJVWk6TWFrZUJ1dHRvbk1lbnUoQnV0dG9uLCB7c2VsZn0sIHsNCgkJCVsiQ2FsbGVyIEluZm8iXSA9IERhdGFDb25uZWN0aW9uKCJHZW5lcmF0ZUluZm8iKSwNCgkJCVsiRGVjb21waWxlIl0gPSBEYXRhQ29ubmVjdGlvbigiRGVjb21waWxlIiwgIlNvdXJjZVNjcmlwdCIpLA0KCQkJWyJEZWNvbXBpbGUgQ2FsbGluZyJdID0gRGF0YUNvbm5lY3Rpb24oIkRlY29tcGlsZSIsICJDYWxsaW5nU2NyaXB0IiksDQoJCQlbIlJlcGVhdCBDYWxsIl0gPSBEYXRhQ29ubmVjdGlvbigiUmVwZWF0Q2FsbCIpLA0KCQkJWyJTYXZlIEJ5dGVjb2RlIl0gPSBEYXRhQ29ubmVjdGlvbigiU2F2ZUJ5dGVjb2RlIiksDQoJCX0pDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpCdWlsZFNjcmlwdChCdXR0b246IEd1aUJ1dHRvbikNCgkJVWk6TWFrZUJ1dHRvbk1lbnUoQnV0dG9uLCB7c2VsZn0sIHsNCgkJCVsiQ2FsbCBSZW1vdGUiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIlJlbW90ZSIpLA0KCQkJWyJCbG9jayBSZW1vdGUiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIkJsb2NrIiksDQoJCQlbIlJlcGVhdCBGb3IiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIlJlcGVhdCIpLA0KCQkJWyJTcGFtIFJlbW90ZSJdID0gRGF0YUNvbm5lY3Rpb24oIk1ha2VTY3JpcHQiLCAiU3BhbSIpDQoJCX0pDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpTYXZlQnl0ZWNvZGUoKQ0KCQktLS8vIFByb2JsZW0gY2hlY2sNCgkJaWYgbm90IFNjcmlwdENoZWNrKFNjcmlwdCwgdHJ1ZSkgdGhlbiByZXR1cm4gZW5kDQoNCgkJLS0vLyBnZXRzY3JpcHRieXRlY29kZQ0KICAgIAlsb2NhbCBTdWNjZXNzLCBCeXRlY29kZSA9IHBjYWxsKGdldHNjcmlwdGJ5dGVjb2RlLCBTY3JpcHQpDQoJCWlmIG5vdCBTdWNjZXNzIHRoZW4NCgkJCVVpOlNob3dNb2RhbCh7IkZhaWxlZCB0byBnZXQgU2NyaXB0ZSBieXRlY29kZSAoLTk5OTk5OTkgQVVSQSkifSkNCgkJCXJldHVybg0KCQllbmQNCg0KCQktLS8vIFNhdmUgZmlsZQ0KCQlsb2NhbCBQYXRoQmFzZSA9IGB7U2NyaXB0fSAlcy50eHRgDQoJCWxvY2FsIEZpbGVQYXRoID0gR2VuZXJhdGlvbjpUaW1lU3RhbXBGaWxlKFBhdGhCYXNlKQ0KCQl3cml0ZWZpbGUoRmlsZVBhdGgsIEJ5dGVjb2RlKQ0KDQoJCVVpOlNob3dNb2RhbCh7IlNhdmVkIGJ5dGVjb2RlIHRvIiwgRmlsZVBhdGh9KQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6TWFrZVNjcmlwdChTY3JpcHRUeXBlOiBzdHJpbmcpDQoJCWxvY2FsIFNjcmlwdCA9IEdlbmVyYXRpb246UmVtb3RlU2NyaXB0KE1vZHVsZSwgc2VsZiwgU2NyaXB0VHlwZSkNCgkJU2V0SURFVGV4dChTY3JpcHQsIGBFZGl0aW5nOiB7UmVtb3RlTmFtZX0ubHVhYCkNCgllbmQNCglmdW5jdGlvbiBEYXRhOlJlcGVhdENhbGwoKQ0KCQlsb2NhbCBTaWduYWwgPSBIb29rOkluZGV4KFJlbW90ZSwgTWV0aG9kKQ0KDQoJCWlmIElzUmVjZWl2ZSB0aGVuDQoJCQlmaXJlc2lnbmFsKFNpZ25hbCwgUHJvY2VzczpVbnBhY2soQXJncykpDQoJCWVsc2UNCgkJCVNpZ25hbChSZW1vdGUsIFByb2Nlc3M6VW5wYWNrKEFyZ3MpKQ0KCQllbmQNCgllbmQNCglmdW5jdGlvbiBEYXRhOkdldFJldHVybigpDQoJCWxvY2FsIFJldHVyblZhbHVlcyA9IHNlbGYuUmV0dXJuVmFsdWVzDQoNCgkJLS0vLyBFcnJvciBtZXNzYWdlcw0KCQlpZiBub3QgSXNSZW1vdGVGdW5jdGlvbiB0aGVuDQoJCQlVaTpTaG93TW9kYWwoeyJUaGUgUmVtb3RlIGlzIG5vdCBhIFJlbW90ZSBGdW5jdGlvbiAoLTk5OTk5OTkgQVVSQSkifSkNCgkJCXJldHVybg0KCQllbmQNCgkJaWYgbm90IFJldHVyblZhbHVlcyB0aGVuDQoJCQlVaTpTaG93TW9kYWwoeyJObyByZXR1cm4gdmFsdWVzICgtOTk5OTk5OSBBVVJBKSJ9KQ0KCQkJcmV0dXJuDQoJCWVuZA0KDQoJCS0tLy8gR2VuZXJhdGUgc2NyaXB0DQoJCWxvY2FsIFNjcmlwdCA9IEdlbmVyYXRpb246VGFibGVTY3JpcHQoTW9kdWxlLCBSZXR1cm5WYWx1ZXMpDQoJCVNldElERVRleHQoU2NyaXB0LCBgUmV0dXJuIFZhbHVlcyBmb3I6IHtSZW1vdGVOYW1lfWApDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpHZW5lcmF0ZUluZm8oKQ0KCQktLS8vIFByb2JsZW0gY2hlY2sNCgkJaWYgbm90IFNjcmlwdENoZWNrKG5pbCwgdHJ1ZSkgdGhlbiByZXR1cm4gZW5kDQoNCgkJLS0vLyBHZW5lcmF0ZSBzY3JpcHQNCgkJbG9jYWwgU2NyaXB0ID0gR2VuZXJhdGlvbjpBZHZhbmNlZEluZm8oTW9kdWxlLCBzZWxmKQ0KCQlTZXRJREVUZXh0KFNjcmlwdCwgYEFkdmFuY2VkIEluZm8gZm9yOiB7UmVtb3RlTmFtZX1gKQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6RGVjb21waWxlKFdoaWNoU2NyaXB0OiBzdHJpbmcpDQoJCWxvY2FsIERlY29tcGlsZVBvcG91dCA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiRGVjb21waWxlUG9wb3V0IikNCgkJbG9jYWwgVG9EZWNvbXBpbGUgPSBEYXRhW1doaWNoU2NyaXB0XQ0KCQlsb2NhbCBFZGl0b3IgPSBDb2RlRWRpdG9yDQoNCgkJLS0vLyBQcm9ibGVtIGNoZWNrDQoJCWlmIG5vdCBTY3JpcHRDaGVjayhUb0RlY29tcGlsZSwgdHJ1ZSkgdGhlbiByZXR1cm4gZW5kDQoNCgkJbG9jYWwgVGFzayA9IFVpOkZpbHRlck5hbWUoYFZpZXdpbmc6IHtUb0RlY29tcGlsZX0ubHVhYCwgMjAwKQ0KCQkNCgkJLS0vLyBBdXRvbWF0aWNhbGx5IFBvcC1vdXQgdGhlIGVkaXRvciBmb3IgZGVjb21waWxpbmcgaWYgZW5hYmxlZA0KCQlpZiBEZWNvbXBpbGVQb3BvdXQgdGhlbg0KCQkJRWRpdG9yID0gVWk6TWFrZUVkaXRvclBvcG91dFdpbmRvdygiIiwgew0KCQkJCVRpdGxlID0gVGFzaw0KCQkJfSkNCgkJZW5kDQoNCgkJVWk6RGVjb21waWxlKEVkaXRvciwgVG9EZWNvbXBpbGUpDQoJZW5kDQoJDQoJLS0vLyBSZW1vdGVPcHRpb25zDQoJc2VsZjpDcmVhdGVPcHRpb25zRm9yRGljdChUYWIsIFJlbW90ZURhdGEsIGZ1bmN0aW9uKCkNCgkJUHJvY2VzczpVcGRhdGVSZW1vdGVEYXRhKElkLCBSZW1vdGVEYXRhKQ0KCWVuZCkNCg0KCS0tLy8gSW5zdGFuY2Ugb3B0aW9ucw0KCXNlbGY6Q3JlYXRlQnV0dG9ucyhUYWIsIHsNCgkJQmFzZSA9IHsNCgkJCVNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjApLA0KCQkJQXV0b21hdGljU2l6ZSA9IEVudW0uQXV0b21hdGljU2l6ZS5ZLA0KCQl9LA0KCQlCdXR0b25zID0gew0KCQkJew0KCQkJCVRleHQgPSAiQ29weSBzY3JpcHQgcGF0aCIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCVNldENsaXBib2FyZChQYXJzZXI6TWFrZVBhdGhTdHJpbmcoew0KCQkJCQkJT2JqZWN0ID0gU2NyaXB0LA0KCQkJCQkJTm9WYXJpYWJsZXMgPSB0cnVlDQoJCQkJCX0pKQ0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJDb3B5IHJlbW90ZSBwYXRoIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJU2V0Q2xpcGJvYXJkKFBhcnNlcjpNYWtlUGF0aFN0cmluZyh7DQoJCQkJCQlPYmplY3QgPSBSZW1vdGUsDQoJCQkJCQlOb1ZhcmlhYmxlcyA9IHRydWUNCgkJCQkJfSkpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIlJlbW92ZSBsb2ciLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlJbmZvU2VsZWN0b3I6UmVtb3ZlVGFiKFRhYikNCgkJCQkJRGF0YS5TZWxlY3RhYmxlOlJlbW92ZSgpDQoJCQkJCUhlYWRlckRhdGE6UmVtb3ZlKCkNCgkJCQkJQWN0aXZlRGF0YSA9IG5pbA0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJEdW1wIGxvZ3MiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBMb2dzID0gSGVhZGVyRGF0YS5FbnRyaWVzDQoJCQkJCWxvY2FsIEZpbGVQYXRoID0gR2VuZXJhdGlvbjpEdW1wTG9ncyhMb2dzKQ0KCQkJCQlzZWxmOlNob3dNb2RhbCh7IlNhdmVkIGR1bXAgdG8iLCBGaWxlUGF0aH0pDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIlZpZXcgQ29ubmVjdGlvbnMiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBNZXRob2QgPSBDbGFzc0RhdGEuUmVjZWl2ZVsxXQ0KCQkJCQlsb2NhbCBTaWduYWwgPSBSZW1vdGVbTWV0aG9kXQ0KCQkJCQlzZWxmOlZpZXdDb25uZWN0aW9ucyhSZW1vdGVOYW1lLCBTaWduYWwpDQoJCQkJZW5kLA0KCQkJfQ0KCQl9DQoJfSkNCg0KCS0tLy8gUmVtb3RlIGluZm9ybWF0aW9uIHRhYmxlDQoJc2VsZjpEaXNwbGF5VGFibGUoVGFiLCB7DQoJCVJvd3MgPSB7Ik5hbWUiLCAiVmFsdWUifSwNCgkJVGFibGUgPSBEYXRhLA0KCQlUb0Rpc3BsYXkgPSBUb0Rpc3BsYXksDQoJCUZsYWdzID0gew0KCQkJQm9yZGVyID0gdHJ1ZSwNCgkJCVJvd0JhY2tncm91bmQgPSB0cnVlLA0KCQkJTWF4Q29sdW1ucyA9IDINCgkJfQ0KCX0pDQoJDQoJLS0vLyBBcmd1bWVudHMgdGFibGUgc2NyaXB0DQoJaWYgVGFibGVBcmdzIHRoZW4NCgkJbG9jYWwgUGFyc2VkID0gR2VuZXJhdGlvbjpUYWJsZVNjcmlwdChNb2R1bGUsIEFyZ3MpDQoJCVNldElERVRleHQoUGFyc2VkLCBgQXJndW1lbnRzIGZvciB7UmVtb3RlTmFtZX1gKQ0KCQlyZXR1cm4NCgllbmQNCg0KCS0tLy8gUmVtb3RlIGNhbGwgc2NyaXB0DQoJRGF0YTpNYWtlU2NyaXB0KCJSZW1vdGUiKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlZpZXdDb25uZWN0aW9ucyhSZW1vdGVOYW1lOiBzdHJpbmcsIFNpZ25hbDogUkJYU2NyaXB0Q29ubmVjdGlvbikNCglsb2NhbCBXaW5kb3cgPSBzZWxmOkNyZWF0ZVdpbmRvdyh7DQoJCVRpdGxlID0gYENvbm5lY3Rpb25zIGZvcjoge1JlbW90ZU5hbWV9YCwNCgkJU2l6ZSA9IFVEaW0yLmZyb21PZmZzZXQoNDUwLCAyNTApDQoJfSkNCg0KCWxvY2FsIFRvRGlzcGxheSA9IHsNCgkJIkVuYWJsZWQiLA0KCQkiTHVhQ29ubmVjdGlvbiIsDQoJCSJTY3JpcHQiDQoJfQ0KDQoJLS0vLyBHZXQgRmlsdGVyZWQgY29ubmVjdGlvbnMNCglsb2NhbCBDb25uZWN0aW9ucyA9IFByb2Nlc3M6RmlsdGVyQ29ubmVjdGlvbnMoU2lnbmFsLCBUb0Rpc3BsYXkpDQoNCgktLS8vIFRhYmxlDQoJbG9jYWwgVGFibGUgPSBXaW5kb3c6VGFibGUoew0KCQlCb3JkZXIgPSB0cnVlLA0KCQlSb3dCYWNrZ3JvdW5kID0gdHJ1ZSwNCgkJTWF4Q29sdW1ucyA9IDMNCgl9KQ0KDQoJbG9jYWwgQnV0dG9uc0ZvclZhbHVlcyA9IHsNCgkJWyJTY3JpcHQiXSA9IGZ1bmN0aW9uKFJvdywgVmFsdWUpDQoJCQlSb3c6QnV0dG9uKHsNCgkJCQlUZXh0ID0gIkRlY29tcGlsZSIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIFRhc2sgPSBzZWxmOkZpbHRlck5hbWUoYFZpZXdpbmc6IHtWYWx1ZX0ubHVhYCwgMjAwKQ0KCQkJCQlsb2NhbCBFZGl0b3IgPSBzZWxmOk1ha2VFZGl0b3JQb3BvdXRXaW5kb3cobmlsLCB7DQoJCQkJCQlUaXRsZSA9IFRhc2sNCgkJCQkJfSkNCgkJCQkJc2VsZjpEZWNvbXBpbGUoRWRpdG9yLCBWYWx1ZSkNCgkJCQllbmQNCgkJCX0pDQoJCWVuZCwNCgkJWyJFbmFibGVkIl0gPSBmdW5jdGlvbihSb3csIEVuYWJsZWQsIENvbm5lY3Rpb24pDQoJCQlSb3c6QnV0dG9uKHsNCgkJCQlUZXh0ID0gRW5hYmxlZCBhbmQgIkRpc2FibGUiIG9yICJFbmFibGUiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oc2VsZikNCgkJCQkJRW5hYmxlZCA9IG5vdCBFbmFibGVkDQoJCQkJCXNlbGYuVGV4dCA9IEVuYWJsZWQgYW5kICJEaXNhYmxlIiBvciAiRW5hYmxlIg0KDQoJCQkJCS0tLy8gRW5hYmxlIG9yIGRpc2FibGUgdGhlIGNvbm5lY3Rpb24NCgkJCQkJaWYgRW5hYmxlZCB0aGVuDQoJCQkJCQlDb25uZWN0aW9uOkVuYWJsZSgpDQoJCQkJCWVsc2UNCgkJCQkJCUNvbm5lY3Rpb246RGlzYWJsZSgpDQoJCQkJCWVuZA0KCQkJCWVuZA0KCQkJfSkNCgkJZW5kDQoJfQ0KDQoJLS0vLyBNYWtlIGhlYWRlcnMgb24gdGhlIHRhYmxlDQoJc2VsZjpNYWtlVGFibGVIZWFkZXJzKFRhYmxlLCBUb0Rpc3BsYXkpDQoNCglmb3IgXywgQ29ubmVjdGlvbiBpbiBDb25uZWN0aW9ucyBkbw0KCQlsb2NhbCBSb3cgPSBUYWJsZTpSb3coKQ0KDQoJCWZvciBfLCBQcm9wZXJ0eSBpbiBUb0Rpc3BsYXkgZG8NCgkJCWxvY2FsIENvbHVtbiA9IFJvdzpOZXh0Q29sdW1uKCkNCgkJCWxvY2FsIENvbHVtblJvdyA9IENvbHVtbjpSb3coKQ0KDQoJCQlsb2NhbCBWYWx1ZSA9IENvbm5lY3Rpb25bUHJvcGVydHldDQoJCQlsb2NhbCBDYWxsYmFjayA9IEJ1dHRvbnNGb3JWYWx1ZXNbUHJvcGVydHldDQoNCgkJCS0tLy8gVmFsdWUgbGFiZWwNCgkJCUNvbHVtblJvdzpMYWJlbCh7VGV4dD1ge1ZhbHVlfWB9KQ0KDQoJCQktLS8vIEFkZCBidXR0b25zDQoJCQlpZiBDYWxsYmFjayB0aGVuDQoJCQkJQ2FsbGJhY2soQ29sdW1uUm93LCBWYWx1ZSwgQ29ubmVjdGlvbikNCgkJCWVuZA0KCQllbmQNCgllbmQNCg0KCS0tLy8gQ2VudGVyIFdpbmRvdw0KCVdpbmRvdzpDZW50ZXIoKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkdldFJlbW90ZUhlYWRlcihEYXRhOiBMb2cpDQoJbG9jYWwgTG9nTGltaXQgPSBzZWxmLkxvZ0xpbWl0DQoJbG9jYWwgTG9ncyA9IHNlbGYuTG9ncw0KCWxvY2FsIFJlbW90ZXNMaXN0ID0gc2VsZi5SZW1vdGVzTGlzdA0KDQoJLS0vLyBSZW1vdGUgaW5mbw0KCWxvY2FsIElkID0gRGF0YS5JZA0KCWxvY2FsIFJlbW90ZSA9IERhdGEuUmVtb3RlDQoJbG9jYWwgUmVtb3RlTmFtZSA9IHNlbGY6RmlsdGVyTmFtZShge1JlbW90ZX1gLCAzMCkNCg0KCS0tLy8gTm9UcmVlTm9kZXMNCglsb2NhbCBOb1RyZWVOb2RlcyA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiTm9UcmVlTm9kZXMiKQ0KDQoJLS0vLyBDaGVjayBmb3IgZXhpc3RpbmcgVHJlZU5vZGUNCglsb2NhbCBFeGlzdGluZyA9IExvZ3NbSWRdDQoJaWYgRXhpc3RpbmcgdGhlbiByZXR1cm4gRXhpc3RpbmcgZW5kDQoNCgktLS8vIEhlYWRlciBkYXRhDQoJbG9jYWwgSGVhZGVyRGF0YSA9IHsJDQoJCUxvZ0NvdW50ID0gMCwNCgkJRGF0YSA9IERhdGEsDQoJCUVudHJpZXMgPSB7fQ0KCX0NCg0KCS0tLy8gSW5jcmVtZW50IHRyZWVub2RlIGNvdW50DQoJUmVtb3Rlc0NvdW50ICs9IDENCg0KCS0tLy8gQ3JlYXRlIG5ldyB0cmVlbm9kZSBlbGVtZW50DQoJaWYgbm90IE5vVHJlZU5vZGVzIHRoZW4NCgkJSGVhZGVyRGF0YS5UcmVlTm9kZSA9IFJlbW90ZXNMaXN0OlRyZWVOb2RlKHsNCgkJCUxheW91dE9yZGVyID0gLTEgKiBSZW1vdGVzQ291bnQsDQoJCQlUaXRsZSA9IFJlbW90ZU5hbWUNCgkJfSkNCgllbmQNCg0KCWZ1bmN0aW9uIEhlYWRlckRhdGE6Q2hlY2tMaW1pdCgpDQoJCWxvY2FsIEVudHJpZXMgPSBzZWxmLkVudHJpZXMNCgkJaWYgI0VudHJpZXMgPCBMb2dMaW1pdCB0aGVuIHJldHVybiBlbmQNCgkJCQ0KCQktLS8vIEdldCBhbmQgcmVtb3ZlIGxhc3QgZWxlbWVudA0KCQlsb2NhbCBMb2cgPSB0YWJsZS5yZW1vdmUoRW50cmllcywgMSkNCgkJTG9nLlNlbGVjdGFibGU6UmVtb3ZlKCkNCgllbmQNCg0KCWZ1bmN0aW9uIEhlYWRlckRhdGE6TG9nQWRkZWQoRGF0YSkNCgkJLS0vLyBJbmNyZW1lbnQgbG9nIGNvdW50DQoJCXNlbGYuTG9nQ291bnQgKz0gMQ0KCQlzZWxmOkNoZWNrTGltaXQoKQ0KDQoJCS0tLy8gQWRkIGVudHJ5DQoJCWxvY2FsIEVudHJpZXMgPSBzZWxmLkVudHJpZXMNCgkJdGFibGUuaW5zZXJ0KEVudHJpZXMsIERhdGEpDQoJCQ0KCQlyZXR1cm4gc2VsZg0KCWVuZA0KDQoJZnVuY3Rpb24gSGVhZGVyRGF0YTpSZW1vdmUoKQ0KCQktLS8vIFJlbW92ZSBUcmVlTm9kZQ0KCQlsb2NhbCBUcmVlTm9kZSA9IHNlbGYuVHJlZU5vZGUNCgkJaWYgVHJlZU5vZGUgdGhlbg0KCQkJVHJlZU5vZGU6UmVtb3ZlKCkNCgkJZW5kDQoNCgkJLS0vLyBDbGVhciB0YWJsZXMgZnJvbSBtZW1vcnkNCgkJTG9nc1tJZF0gPSBuaWwNCgkJdGFibGUuY2xlYXIoSGVhZGVyRGF0YSkNCgllbmQNCg0KCUxvZ3NbSWRdID0gSGVhZGVyRGF0YQ0KCXJldHVybiBIZWFkZXJEYXRhDQplbmQNCg0KZnVuY3Rpb24gVWk6Q2xlYXJMb2dzKCkNCglsb2NhbCBMb2dzID0gc2VsZi5Mb2dzDQoJbG9jYWwgUmVtb3Rlc0xpc3QgPSBzZWxmLlJlbW90ZXNMaXN0DQoNCgktLS8vIENsZWFyIGFsbCBlbGVtZW50cw0KCVJlbW90ZXNDb3VudCA9IDANCglSZW1vdGVzTGlzdDpDbGVhckNoaWxkRWxlbWVudHMoKQ0KDQoJLS0vLyBDbGVhciBsb2dzIGZyb20gbWVtb3J5DQoJdGFibGUuY2xlYXIoTG9ncykNCmVuZA0KDQpmdW5jdGlvbiBVaTpRdWV1ZUxvZyhEYXRhKQ0KCWxvY2FsIExvZ1F1ZXVlID0gc2VsZi5Mb2dRdWV1ZQ0KICAgIHRhYmxlLmluc2VydChMb2dRdWV1ZSwgRGF0YSkNCmVuZA0KDQpmdW5jdGlvbiBVaTpQcm9jZXNzTG9nUXVldWUoKQ0KCWxvY2FsIFF1ZXVlID0gc2VsZi5Mb2dRdWV1ZQ0KICAgIGlmICNRdWV1ZSA8PSAwIHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBDcmVhdGUgYSBsb2cgZWxlbWVudCBmb3IgZWFjaCBpbiB0aGUgUXVldWUNCiAgICBmb3IgSW5kZXgsIERhdGEgaW4gbmV4dCwgUXVldWUgZG8NCiAgICAgICAgc2VsZjpDcmVhdGVMb2coRGF0YSkNCiAgICAgICAgdGFibGUucmVtb3ZlKFF1ZXVlLCBJbmRleCkNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpCZWdpbkxvZ1NlcnZpY2UoKQ0KCWNvcm91dGluZS53cmFwKGZ1bmN0aW9uKCkNCgkJd2hpbGUgdHJ1ZSBkbw0KCQkJc2VsZjpQcm9jZXNzTG9nUXVldWUoKQ0KCQkJdGFzay53YWl0KCkNCgkJZW5kDQoJZW5kKSgpDQplbmQNCg0KZnVuY3Rpb24gVWk6RmlsdGVyTmFtZShOYW1lOiBzdHJpbmcsIENoYXJhY3RlckxpbWl0OiBudW1iZXI/KTogc3RyaW5nDQoJbG9jYWwgVHJpbW1lZCA9IE5hbWU6c3ViKDEsIENoYXJhY3RlckxpbWl0IG9yIDIwKQ0KCWxvY2FsIEZpbHRyZWQgPSBUcmltbWVkOmdzdWIoIltcblxyXSIsICIiKQ0KCUZpbHRyZWQgPSBHZW5lcmF0aW9uOk1ha2VQcmludGFibGUoRmlsdHJlZCkNCg0KCXJldHVybiBGaWx0cmVkDQplbmQNCg0KZnVuY3Rpb24gVWk6Q3JlYXRlTG9nKERhdGE6IExvZykNCgktLS8vIFVucGFjayBsb2cgZGF0YQ0KICAgIGxvY2FsIFJlbW90ZSA9IERhdGEuUmVtb3RlDQoJbG9jYWwgTWV0aG9kID0gRGF0YS5NZXRob2QNCiAgICBsb2NhbCBBcmdzID0gRGF0YS5BcmdzDQogICAgbG9jYWwgSXNSZWNlaXZlID0gRGF0YS5Jc1JlY2VpdmUNCglsb2NhbCBJZCA9IERhdGEuSWQNCglsb2NhbCBUaW1lc3RhbXAgPSBEYXRhLlRpbWVzdGFtcA0KCWxvY2FsIElzRXhwbG9pdCA9IERhdGEuSXNFeHBsb2l0DQoJDQoJbG9jYWwgSXNOaWxQYXJlbnQgPSBIb29rOkluZGV4KFJlbW90ZSwgIlBhcmVudCIpID09IG5pbA0KCWxvY2FsIFJlbW90ZURhdGEgPSBQcm9jZXNzOkdldFJlbW90ZURhdGEoSWQpDQoNCgktLS8vIFBhdXNlZA0KCWxvY2FsIFBhdXNlZCA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiUGF1c2VkIikNCglpZiBQYXVzZWQgdGhlbiByZXR1cm4gZW5kDQoNCgktLS8vIENoZWNrIGNhbGxlciAoSWdub3JlIGV4cGxvaXQgY2FsbHMpDQoJbG9jYWwgTG9nRXhwbG9pdCA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiTG9nRXhwbG9pdCIpDQoJaWYgbm90IExvZ0V4cGxvaXQgYW5kIElzRXhwbG9pdCB0aGVuIHJldHVybiBlbmQNCg0KCS0tLy8gSWdub3JlTmlsDQoJbG9jYWwgSWdub3JlTmlsID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJJZ25vcmVOaWwiKQ0KCWlmIElnbm9yZU5pbCBhbmQgSXNOaWxQYXJlbnQgdGhlbiByZXR1cm4gZW5kDQoNCiAgICAtLS8vIExvZ1JlY2l2ZXMgY2hlY2sNCglsb2NhbCBMb2dSZWNpdmVzID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJMb2dSZWNpdmVzIikNCglpZiBub3QgTG9nUmVjaXZlcyBhbmQgSXNSZWNlaXZlIHRoZW4gcmV0dXJuIGVuZA0KDQoJbG9jYWwgU2VsZWN0TmV3ZXN0ID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJTZWxlY3ROZXdlc3QiKQ0KCWxvY2FsIE5vVHJlZU5vZGVzID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJOb1RyZWVOb2RlcyIpDQoNCiAgICAtLS8vIEV4Y2x1ZGVkIGNoZWNrDQogICAgaWYgUmVtb3RlRGF0YS5FeGNsdWRlZCB0aGVuIHJldHVybiBlbmQNCg0KCS0tLy8gRGVzZXJpYWxpemUgYXJndW1lbnRzDQoJQXJncyA9IENvbW11bmljYXRpb246RGVzZXJpYWxpemVUYWJsZShBcmdzKQ0KDQoJLS0vLyBEZWVwIGNsb25lIGRhdGENCglsb2NhbCBDbG9uZWRBcmdzID0gUHJvY2VzczpEZWVwQ2xvbmVUYWJsZShBcmdzKQ0KCURhdGEuQXJncyA9IENsb25lZEFyZ3MNCglEYXRhLlZhbHVlU3dhcHMgPSBHZW5lcmF0aW9uOk1ha2VWYWx1ZVN3YXBzVGFibGUoVGltZXN0YW1wKQ0KDQoJLS0vLyBHZW5lcmF0ZSBsb2cgdGl0bGUNCglsb2NhbCBDb2xvciA9IENvbmZpZy5NZXRob2RDb2xvcnNbTWV0aG9kOmxvd2VyKCldDQoJbG9jYWwgVGV4dCA9IE5vVHJlZU5vZGVzIGFuZCBge1JlbW90ZX0gfCB7TWV0aG9kfWAgb3IgTWV0aG9kDQoNCgktLS8vIEZpbmRTdHJpbmdGb3JOYW1lIGNoZWNrDQoJbG9jYWwgRmluZFN0cmluZyA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiRmluZFN0cmluZ0Zvck5hbWUiKQ0KCWlmIEZpbmRTdHJpbmcgdGhlbg0KCQlmb3IgXywgQXJnIGluIG5leHQsIENsb25lZEFyZ3MgZG8NCgkJCWlmIHR5cGVvZihBcmcpID09ICJzdHJpbmciIHRoZW4NCgkJCQlsb2NhbCBGaWx0cmVkID0gc2VsZjpGaWx0ZXJOYW1lKEFyZykNCgkJCQlUZXh0ID0gYHtGaWx0cmVkfSB8IHtUZXh0fWANCgkJCQlicmVhaw0KCQkJZW5kDQoJCWVuZA0KCWVuZA0KDQoJLS0vLyBGZXRjaCBIZWFkZXJEYXRhIGJ5IHRoZSBSZW1vdGVJRCB1c2VkIGZvciBzdGFja2luZw0KCWxvY2FsIEhlYWRlciA9IHNlbGY6R2V0UmVtb3RlSGVhZGVyKERhdGEpDQoJbG9jYWwgUmVtb3Rlc0xpc3QgPSBzZWxmLlJlbW90ZXNMaXN0DQoNCglsb2NhbCBMb2dDb3VudCA9IEhlYWRlci5Mb2dDb3VudA0KCWxvY2FsIFRyZWVOb2RlID0gSGVhZGVyLlRyZWVOb2RlIA0KCWxvY2FsIFBhcmVudCA9IFRyZWVOb2RlIG9yIFJlbW90ZXNMaXN0DQoNCgktLS8vIEluY3JlYXNlIGxvZyBjb3VudCAtIFRyZWVOb2RlcyBhcmUgaW4gR2V0UmVtb3RlSGVhZGVyIGZ1bmN0aW9uDQoJaWYgTm9UcmVlTm9kZXMgdGhlbg0KCQlSZW1vdGVzQ291bnQgKz0gMQ0KCQlMb2dDb3VudCA9IFJlbW90ZXNDb3VudA0KCWVuZA0KDQogICAgLS0vLyBDcmVhdGUgZm9jdXMgYnV0dG9uDQoJRGF0YS5IZWFkZXJEYXRhID0gSGVhZGVyDQoJRGF0YS5TZWxlY3RhYmxlID0gUGFyZW50OlNlbGVjdGFibGUoew0KCQlUZXh0ID0gVGV4dCwNCiAgICAgICAgTGF5b3V0T3JkZXIgPSAtMSAqIExvZ0NvdW50LA0KCQlUZXh0Q29sb3IzID0gQ29sb3IsDQoJCVRleHRYQWxpZ25tZW50ID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0LA0KCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCXNlbGY6U2V0Rm9jdXNlZFJlbW90ZShEYXRhKQ0KCQllbmQsDQogICAgfSkNCg0KCUhlYWRlcjpMb2dBZGRlZChEYXRhKQ0KDQoJLS0vLyBBdXRvIHNlbGVjdCBjaGVjaw0KCWxvY2FsIEdyb3VwU2VsZWN0ZWQgPSBBY3RpdmVEYXRhIGFuZCBBY3RpdmVEYXRhLkhlYWRlckRhdGEgPT0gSGVhZGVyDQoJaWYgU2VsZWN0TmV3ZXN0IGFuZCBHcm91cFNlbGVjdGVkIHRoZW4NCgkJc2VsZjpTZXRGb2N1c2VkUmVtb3RlKERhdGEpDQoJZW5kDQplbmQNCg0KcmV0dXJuIFVp]]
},Generation={'base64',
[[]]
},Communication={'base64',
[[]]
}},d.Players local i=e:LoadLibraries(g)local j,k,l,m,n,o,p=i.Process,i.Hook,i.Ui
,i.Generation,i.Communication,i.Config,e:GetAsset('ProggyClean.ttf',true)local q
=e:CreateFont('ProggyClean',p)l:SetFontFile(q)j:CheckConfig(o)e:LoadModules(i,{
Modules=i,Services=d})local r,s=l:CreateMainWindow(),j:CheckIsSupported()if not
s then r:Close()return end local t,u=n:CreateChannel()n:AddCommCallback(
'QueueLog',function(...)l:QueueLog(...)end)n:AddCommCallback('Print',function(
...)l:ConsoleLog(...)end)local v=h.LocalPlayer m:SetSwapsCallback(function(w)w:
AddSwap(v,{String='LocalPlayer'})w:AddSwap(v.Character,{String='Character',
NextParent=v})end)l:CreateWindowContent(r)l:SetCommChannel(u)l:BeginLogService()
local w=e:MakeActorScript(g,t)k:LoadHooks(w,t)
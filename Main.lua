--[[
	⣿⣿⣿⣿⣿ SIGMA SPY ⣿⣿⣿⣿⣿
	⣿⣿⣯⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉
	⠉⠻⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠈⠻⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⠀⠀⣉⣿⣿⣿⠆⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⠀⠀⠀⣠⣾⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀
	⠀⠀⢀⣴⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣀⣴⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
	⣿⣿⣟⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
	⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

	@author depso (depthso)
	@repo https://github.com/depthso
	@license MIT
	@description Sigma Remote Spy for Roblox
    
	This file is COMPILED, check /src folder for the source
	Build scripts are available in /build
]]

local a,b={UseWorkspace=false,NoActors=false,FolderName='Sigma Spy',RepoUrl=
[[https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main]],
ParserUrl=
[[https://raw.githubusercontent.com/depthso/Roblox-parser/refs/heads/main]]},{
...}local c=b[1]if typeof(c)=='table'then for d,e in c do a[d]=e end end local d
=setmetatable({},{__index=function(d,e)local f=game:GetService(e)return
cloneref(f)end})local e=(function()local e,f={UseWorkspace=false,Folder=
'Sigma spy',RepoUrl=nil,FolderStructure={['Sigma Spy']={'assets'}}}function e:
Init(g)local h,i=self.FolderStructure,g.Services f=i.HttpService self:
CheckFolders(h)end function e:PushConfig(g)for h,i in next,g do self[h]=i end
end function e:UrlFetch(g)local h={Url=g:gsub(' ','%%20'),Method='GET'}local i,j
=pcall(request,h)if not i then warn'[!] HTTP request error! Check console (F9)'
warn('> Url:',g)error(j)return''end local k,l=j.Body,j.StatusCode if l==404 then
warn'[!] The file requested has moved or been deleted.'warn(' >',g)return''end
return k,j end function e:MakePath(g)local h=self.Folder return`{h}/{g}`end
function e:LoadCustomasset(g)if not getcustomasset then return end if not g then
return end local h=readfile(g)if#h<=0 then return end local i,j=pcall(
getcustomasset,g)if not i then return end if not j or#j<=0 then return end
return j end function e:GetFile(g,h)local i,j,k,l=self.RepoUrl,self.UseWorkspace
,self:MakePath(g),''if j then l=readfile(k)else l=self:UrlFetch(`{i}/{g}`)end if
h then self:FileCheck(k,function()return l end)return self:LoadCustomasset(k)end
return l end function e:GetTemplate(g)return self:GetFile(`templates/{g}.lua`)
end function e:FileCheck(g,h)if isfile(g)then return end local i=h()writefile(g,
i)end function e:FolderCheck(g)if isfolder(g)then return end makefolder(g)end
function e:CheckPath(g,h)return g and`{g}/{h}`or h end function e:CheckFolders(g
,h)for i,j in next,g do if typeof(j)=='table'then local k=self:CheckPath(h,i)
self:FolderCheck(k)self:CheckFolders(j,k)continue end local k=self:CheckPath(h,j
)self:FolderCheck(k)end end function e:TemplateCheck(g,h)self:FileCheck(g,
function()return self:GetTemplate(h)end)end function e:GetAsset(g,h)return self:
GetFile(`assets/{g}`,h)end function e:GetModule(g,h)local i=`{g}.lua`if h then
self:TemplateCheck(i,h)return readfile(i)end return self:GetFile(i)end function
e:LoadLibraries(g,...)local h={}for i,j in next,g do local k=typeof(j)=='table'
and j[1]=='base64'j=k and j[2]or j if typeof(j)~='string'and not k then h[i]=j
continue end if k then j=crypt.base64decode(j)g[i]=j end local l=loadstring(j,i)
assert(l,`Failed to load {i}`)h[i]=l(...)end return h end function e:LoadModules
(g,h)for i,j in next,g do local k=j.Init if not k then continue end j:Init(h)end
end function e:CreateFont(g,h)if not h then return end local i=`assets/{g}.json`
local j,k=self:MakePath(i),{name=g,faces={{name='Regular',weight=400,style=
'Normal',assetId=h}}}local l=f:JSONEncode(k)writefile(j,l)return j end function
e:CompileModule(g)local h='local Libraries = {'for i,j in g do if typeof(j)~=
'string'then continue end h..=`\t{i} = (function()\n{j}\nend)(),\n`end h..='}'
return h end function e:MakeActorScript(g,h)local i=e:CompileModule(g)i..=
'\r\n\tlocal ExtraData = {\r\n\t\tIsActor = true\r\n\t}\r\n\t'i..=`Libraries.Hook:BeginService(Libraries, ExtraData, {
h})`return i end return e end)()e:PushConfig(a)e:Init{Services=d}local f=e.
FolderName local g,h={Config=e:GetModule(`{f}/Config`,'Config'),ReturnSpoofs=e:
GetModule(`{f}/Return spoofs`,'Return Spoofs'),Configuration=a,Files=e,Process={
'base64',
[[dHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCnR5cGUgUmVtb3RlRGF0YSA9IHsNCglSZW1vdGU6IEluc3RhbmNlLA0KCUlzUmVjZWl2ZTogYm9vbGVhbj8sDQoJQXJnczogdGFibGUsDQogICAgSWQ6IHN0cmluZywNCglNZXRob2Q6IHN0cmluZywNCiAgICBUcmFuc2ZlclR5cGU6IHN0cmluZywNCglWYWx1ZVJlcGxhY2VtZW50czogdGFibGUsDQogICAgUmV0dXJuVmFsdWVzOiB0YWJsZSwNCiAgICBPcmlnaW5hbEZ1bmM6IChJbnN0YW5jZSwgLi4uYW55KSAtPiAuLi5hbnkNCn0NCg0KLS0vLyBNb2R1bGUNCmxvY2FsIFByb2Nlc3MgPSB7DQogICAgLS0vLyBSZW1vdGUgY2xhc3Nlcw0KICAgIFJlbW90ZUNsYXNzRGF0YSA9IHsNCiAgICAgICAgWyJSZW1vdGVFdmVudCJdID0gew0KICAgICAgICAgICAgU2VuZCA9IHsNCiAgICAgICAgICAgICAgICAiRmlyZVNlcnZlciIsDQogICAgICAgICAgICAgICAgImZpcmVTZXJ2ZXIiLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIFJlY2VpdmUgPSB7DQogICAgICAgICAgICAgICAgIk9uQ2xpZW50RXZlbnQiLA0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBbIlJlbW90ZUZ1bmN0aW9uIl0gPSB7DQogICAgICAgICAgICBJc1JlbW90ZUZ1bmN0aW9uID0gdHJ1ZSwNCiAgICAgICAgICAgIFNlbmQgPSB7DQogICAgICAgICAgICAgICAgIkludm9rZVNlcnZlciIsDQogICAgICAgICAgICAgICAgImludm9rZVNlcnZlciIsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgUmVjZWl2ZSA9IHsNCiAgICAgICAgICAgICAgICAiT25DbGllbnRJbnZva2UiLA0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBbIlVucmVsaWFibGVSZW1vdGVFdmVudCJdID0gew0KICAgICAgICAgICAgU2VuZCA9IHsNCiAgICAgICAgICAgICAgICAiRmlyZVNlcnZlciIsDQogICAgICAgICAgICAgICAgImZpcmVTZXJ2ZXIiLA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIFJlY2VpdmUgPSB7DQogICAgICAgICAgICAgICAgIk9uQ2xpZW50RXZlbnQiLA0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBbIkJpbmRhYmxlRXZlbnQiXSA9IHsNCiAgICAgICAgICAgIE5vUmVjaXZlSG9vayA9IHRydWUsDQogICAgICAgICAgICBTZW5kID0gew0KICAgICAgICAgICAgICAgICJGaXJlIiwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBSZWNlaXZlID0gew0KICAgICAgICAgICAgICAgICJFdmVudCIsDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIFsiQmluZGFibGVGdW5jdGlvbiJdID0gew0KICAgICAgICAgICAgSXNSZW1vdGVGdW5jdGlvbiA9IHRydWUsDQogICAgICAgICAgICBOb1JlY2l2ZUhvb2sgPSB0cnVlLA0KICAgICAgICAgICAgU2VuZCA9IHsNCiAgICAgICAgICAgICAgICAiSW52b2tlIiwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBSZWNlaXZlID0gew0KICAgICAgICAgICAgICAgICJPbkludm9rZSIsDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9LA0KICAgIFJlbW90ZU9wdGlvbnMgPSB7fSwNCiAgICBMb29waW5nUmVtb3RlcyA9IHt9LA0KICAgIENvbmZpZ092ZXJ3cml0ZXMgPSB7DQogICAgICAgIFt7InNpcmh1cnQiLCAicG90YXNzaXVtIiwgIndhdmUifV0gPSB7DQogICAgICAgICAgICBGb3JjZVVzZUN1c3RvbUNvbW0gPSB0cnVlDQogICAgICAgIH0NCiAgICB9DQp9DQoNCi0tLy8gTW9kdWxlcw0KbG9jYWwgSG9vaw0KbG9jYWwgQ29tbXVuaWNhdGlvbg0KbG9jYWwgUmV0dXJuU3Bvb2ZzDQpsb2NhbCBVaQ0KbG9jYWwgQ29uZmlnDQoNCi0tLy8gQ29tbXVuaWNhdGlvbiBjaGFubmVsDQpsb2NhbCBDaGFubmVsDQpsb2NhbCBDaGFubmVsV3JhcHBlZCA9IGZhbHNlDQoNCmxvY2FsIFNpZ21hRU5WID0gZ2V0ZmVudigxKQ0KDQpsb2NhbCBmdW5jdGlvbiBNZXJnZShCYXNlOiB0YWJsZSwgTmV3OiB0YWJsZSkNCglmb3IgS2V5LCBWYWx1ZSBpbiBuZXh0LCBOZXcgZG8NCgkJQmFzZVtLZXldID0gVmFsdWUNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOkluaXQoRGF0YSkNCiAgICBsb2NhbCBNb2R1bGVzID0gRGF0YS5Nb2R1bGVzDQoNCiAgICAtLS8vIE1vZHVsZXMNCiAgICBDb25maWcgPSBNb2R1bGVzLkNvbmZpZw0KICAgIFVpID0gTW9kdWxlcy5VaQ0KICAgIEhvb2sgPSBNb2R1bGVzLkhvb2sNCiAgICBDb21tdW5pY2F0aW9uID0gTW9kdWxlcy5Db21tdW5pY2F0aW9uDQogICAgUmV0dXJuU3Bvb2ZzID0gTW9kdWxlcy5SZXR1cm5TcG9vZnMNCmVuZA0KDQotLS8vIENvbW11bmljYXRpb24NCmZ1bmN0aW9uIFByb2Nlc3M6U2V0Q2hhbm5lbChOZXdDaGFubmVsOiBCaW5kYWJsZUV2ZW50LCBJc1dyYXBwZWQ6IGJvb2xlYW4pDQogICAgQ2hhbm5lbCA9IE5ld0NoYW5uZWwNCiAgICBDaGFubmVsV3JhcHBlZCA9IElzV3JhcHBlZA0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6R2V0Q29uZmlnT3ZlcndyaXRlcyhOYW1lOiBzdHJpbmcpDQogICAgbG9jYWwgQ29uZmlnT3ZlcndyaXRlcyA9IHNlbGYuQ29uZmlnT3ZlcndyaXRlcw0KDQogICAgZm9yIExpc3QsIE92ZXJ3cml0ZXMgaW4gbmV4dCwgQ29uZmlnT3ZlcndyaXRlcyBkbw0KICAgICAgICBpZiBub3QgdGFibGUuZmluZChMaXN0LCBOYW1lKSB0aGVuIGNvbnRpbnVlIGVuZA0KICAgICAgICByZXR1cm4gT3ZlcndyaXRlcw0KICAgIGVuZA0KICAgIHJldHVybg0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6Q2hlY2tDb25maWcoQ29uZmlnOiB0YWJsZSkNCiAgICBsb2NhbCBOYW1lID0gaWRlbnRpZnlleGVjdXRvcigpOmxvd2VyKCkNCg0KICAgIC0tLy8gRm9yY2UgY29uZmlndXJhdGlvbiBvdmVyd3JpdGVzIGZvciBzcGVjaWZpYyBleGVjdXRvcnMNCiAgICBsb2NhbCBPdmVyd3JpdGVzID0gc2VsZjpHZXRDb25maWdPdmVyd3JpdGVzKE5hbWUpDQogICAgaWYgbm90IE92ZXJ3cml0ZXMgdGhlbiByZXR1cm4gZW5kDQoNCiAgICBNZXJnZShDb25maWcsIE92ZXJ3cml0ZXMpDQplbmQNCg0KZnVuY3Rpb24gUHJvY2VzczpDbGVhbkNFcnJvcihFcnJvcjogc3RyaW5nKTogc3RyaW5nDQogICAgRXJyb3IgPSBFcnJvcjpnc3ViKCI6JWQrOiAiLCAiIikNCiAgICBFcnJvciA9IEVycm9yOmdzdWIoIiwgZ290ICVhKyIsICIiKQ0KICAgIEVycm9yID0gRXJyb3I6Z3N1YigiaW52YWxpZCBhcmd1bWVudCIsICJtaXNzaW5nIGFyZ3VtZW50IikNCiAgICByZXR1cm4gRXJyb3INCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOkRlZXBDbG9uZVRhYmxlKFRhYmxlLCBJZ25vcmU6IHRhYmxlPykNCglsb2NhbCBOZXcgPSB7fQ0KCWZvciBLZXksIFZhbHVlIGluIG5leHQsIFRhYmxlIGRvDQogICAgICAgIC0tLy8gQ2hlY2sgaWYgdGhlIHZhbHVlIGlzIGlnbm9yZWQNCiAgICAgICAgaWYgSWdub3JlIGFuZCB0YWJsZS5maW5kKElnbm9yZSwgVmFsdWUpIHRoZW4gY29udGludWUgZW5kDQoNCgkJTmV3W0tleV0gPSB0eXBlb2YoVmFsdWUpID09ICJ0YWJsZSIgYW5kIHNlbGY6RGVlcENsb25lVGFibGUoVmFsdWUpIG9yIFZhbHVlDQoJZW5kDQoJcmV0dXJuIE5ldw0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6VW5wYWNrKFRhYmxlOiB0YWJsZSkNCglsb2NhbCBMZW5ndGggPSB0YWJsZS5tYXhuKFRhYmxlKQ0KCXJldHVybiB1bnBhY2soVGFibGUsIDEsIExlbmd0aCkNCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOlB1c2hDb25maWcoT3ZlcndyaXRlcykNCiAgICBNZXJnZShzZWxmLCBPdmVyd3JpdGVzKQ0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6RnVuY0V4aXN0cyhOYW1lOiBzdHJpbmcpDQoJcmV0dXJuIGdldGZlbnYoMSlbTmFtZV0NCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOkNoZWNrRXhlY3V0b3IoKTogYm9vbGVhbg0KICAgIGxvY2FsIEJsYWNrbGlzdGVkID0gew0KICAgICAgICAieGVubyIsDQogICAgICAgICJzb2xhcmEiLA0KICAgICAgICAiampzcGxvaXQiDQogICAgfQ0KDQogICAgbG9jYWwgTmFtZSA9IGlkZW50aWZ5ZXhlY3V0b3IoKTpsb3dlcigpDQogICAgbG9jYWwgSXNCbGFja2xpc3RlZCA9IHRhYmxlLmZpbmQoQmxhY2tsaXN0ZWQsIE5hbWUpDQoNCiAgICAtLS8vIFNvbWUgZXhlY3V0b3JzIGhhdmUgYnJva2VuIGZ1bmN0aW9uYWxpdHkNCiAgICBpZiBJc0JsYWNrbGlzdGVkIHRoZW4NCiAgICAgICAgVWk6U2hvd1Vuc3VwcG9ydGVkRXhlY3V0b3IoTmFtZSkNCiAgICAgICAgcmV0dXJuIGZhbHNlDQogICAgZW5kDQoNCiAgICByZXR1cm4gdHJ1ZQ0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6Q2hlY2tGdW5jdGlvbnMoKTogYm9vbGVhbg0KICAgIGxvY2FsIENvcmVGdW5jdGlvbnMgPSB7DQogICAgICAgICJob29rbWV0YW1ldGhvZCIsDQogICAgICAgICJob29rZnVuY3Rpb24iLA0KICAgICAgICAiZ2V0cmF3bWV0YXRhYmxlIiwNCiAgICAgICAgInNldHJlYWRvbmx5Ig0KICAgIH0NCg0KICAgIC0tLy8gQ2hlY2sgaWYgdGhlIGZ1bmN0aW9ucyBleGlzdCBpbiB0aGUgRU5WDQogICAgZm9yIF8sIE5hbWUgaW4gQ29yZUZ1bmN0aW9ucyBkbw0KICAgICAgICBsb2NhbCBGdW5jID0gc2VsZjpGdW5jRXhpc3RzKE5hbWUpDQogICAgICAgIGlmIEZ1bmMgdGhlbiBjb250aW51ZSBlbmQNCg0KICAgICAgICAtLS8vIEZ1bmN0aW9uIG1pc3NpbmchDQogICAgICAgIFVpOlNob3dVbnN1cHBvcnRlZChOYW1lKQ0KICAgICAgICByZXR1cm4gZmFsc2UNCiAgICBlbmQNCg0KICAgIHJldHVybiB0cnVlDQplbmQNCg0KZnVuY3Rpb24gUHJvY2VzczpDaGVja0lzU3VwcG9ydGVkKCk6IGJvb2xlYW4NCiAgICAtLS8vIENoZWNrIGlmIHRoZSBleGVjdXRvciBpcyBibGFja2xpc3RlZA0KICAgIGxvY2FsIEV4ZWN1dG9yU3VwcG9ydGVkID0gc2VsZjpDaGVja0V4ZWN1dG9yKCkNCiAgICBpZiBub3QgRXhlY3V0b3JTdXBwb3J0ZWQgdGhlbg0KICAgICAgICByZXR1cm4gZmFsc2UNCiAgICBlbmQNCg0KICAgIC0tLy8gQ2hlY2sgaWYgdGhlIGNvcmUgZnVuY3Rpb25zIGV4aXN0DQogICAgbG9jYWwgRnVuY3Rpb25zU3VwcG9ydGVkID0gc2VsZjpDaGVja0Z1bmN0aW9ucygpDQogICAgaWYgbm90IEZ1bmN0aW9uc1N1cHBvcnRlZCB0aGVuDQogICAgICAgIHJldHVybiBmYWxzZQ0KICAgIGVuZA0KDQogICAgcmV0dXJuIHRydWUNCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOkdldENsYXNzRGF0YShSZW1vdGU6IEluc3RhbmNlKTogdGFibGU/DQogICAgbG9jYWwgUmVtb3RlQ2xhc3NEYXRhID0gc2VsZi5SZW1vdGVDbGFzc0RhdGENCiAgICBsb2NhbCBDbGFzc05hbWUgPSBIb29rOkluZGV4KFJlbW90ZSwgIkNsYXNzTmFtZSIpDQoNCiAgICByZXR1cm4gUmVtb3RlQ2xhc3NEYXRhW0NsYXNzTmFtZV0NCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOklzUHJvdGVjdGVkUmVtb3RlKFJlbW90ZTogSW5zdGFuY2UpOiBib29sZWFuDQogICAgbG9jYWwgSXNEZWJ1ZyA9IFJlbW90ZSA9PSBDb21tdW5pY2F0aW9uLkRlYnVnSWRSZW1vdGUNCiAgICBsb2NhbCBJc0NoYW5uZWwgPSBSZW1vdGUgPT0gKENoYW5uZWxXcmFwcGVkIGFuZCBDaGFubmVsLkNoYW5uZWwgb3IgQ2hhbm5lbCkNCg0KICAgIHJldHVybiBJc0RlYnVnIG9yIElzQ2hhbm5lbA0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6UmVtb3RlQWxsb3dlZChSZW1vdGU6IEluc3RhbmNlLCBUcmFuc2ZlclR5cGU6IHN0cmluZywgTWV0aG9kOiBzdHJpbmc/KTogYm9vbGVhbj8NCiAgICBpZiB0eXBlb2YoUmVtb3RlKSB+PSAnSW5zdGFuY2UnIHRoZW4gcmV0dXJuIGVuZA0KICAgIA0KICAgIC0tLy8gQ2hlY2sgaWYgdGhlIFJlbW90ZSBpcyBwcm90ZWN0ZWQNCiAgICBpZiBzZWxmOklzUHJvdGVjdGVkUmVtb3RlKFJlbW90ZSkgdGhlbiByZXR1cm4gZW5kDQoNCiAgICAtLS8vIEZldGNoIGNsYXNzIHRhYmxlDQoJbG9jYWwgQ2xhc3NEYXRhID0gc2VsZjpHZXRDbGFzc0RhdGEoUmVtb3RlKQ0KCWlmIG5vdCBDbGFzc0RhdGEgdGhlbiByZXR1cm4gZW5kDQoNCiAgICAtLS8vIENoZWNrIGlmIHRoZSB0cmFuc2ZlciB0eXBlIGhhcyBkYXRhDQoJbG9jYWwgQWxsb3dlZCA9IENsYXNzRGF0YVtUcmFuc2ZlclR5cGVdDQoJaWYgbm90IEFsbG93ZWQgdGhlbiByZXR1cm4gZW5kDQoNCiAgICAtLS8vIENoZWNrIGlmIHRoZSBtZXRob2QgaXMgYWxsb3dlZA0KCWlmIE1ldGhvZCB0aGVuDQoJCXJldHVybiB0YWJsZS5maW5kKEFsbG93ZWQsIE1ldGhvZCkgfj0gbmlsDQoJZW5kDQoNCglyZXR1cm4gdHJ1ZQ0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6U2V0RXh0cmFEYXRhKERhdGE6IHRhYmxlKQ0KICAgIGlmIG5vdCBEYXRhIHRoZW4gcmV0dXJuIGVuZA0KICAgIHNlbGYuRXh0cmFEYXRhID0gRGF0YQ0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6R2V0UmVtb3RlU3Bvb2YoUmVtb3RlOiBJbnN0YW5jZSwgTWV0aG9kOiBzdHJpbmcsIC4uLik6IHRhYmxlPw0KICAgIGxvY2FsIFNwb29mID0gUmV0dXJuU3Bvb2ZzW1JlbW90ZV0NCg0KICAgIGlmIG5vdCBTcG9vZiB0aGVuIHJldHVybiBlbmQNCiAgICBpZiBTcG9vZi5NZXRob2Qgfj0gTWV0aG9kIHRoZW4gcmV0dXJuIGVuZA0KDQogICAgbG9jYWwgUmV0dXJuVmFsdWVzID0gU3Bvb2YuUmV0dXJuDQoNCiAgICAtLS8vIENhbGwgdGhlIFJldHVyblZhbHVlcyBmdW5jdGlvbiB0eXBlDQogICAgaWYgdHlwZW9mKFJldHVyblZhbHVlcykgPT0gImZ1bmN0aW9uIiB0aGVuDQogICAgICAgIFJldHVyblZhbHVlcyA9IFJldHVyblZhbHVlcyguLi4pDQogICAgZW5kDQoNCgktLUNvbW11bmljYXRpb246V2FybigiU3Bvb2ZlZCIsIE1ldGhvZCkNCglyZXR1cm4gUmV0dXJuVmFsdWVzDQplbmQNCg0KZnVuY3Rpb24gUHJvY2VzczpTZXROZXdSZXR1cm5TcG9vZnMoTmV3UmV0dXJuU3Bvb2ZzOiB0YWJsZSkNCiAgICBSZXR1cm5TcG9vZnMgPSBOZXdSZXR1cm5TcG9vZnMNCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOkZpbmRDYWxsaW5nTENsb3N1cmUoT2Zmc2V0OiBudW1iZXIpDQogICAgT2Zmc2V0ICs9IDENCg0KICAgIHdoaWxlIHRydWUgZG8NCiAgICAgICAgT2Zmc2V0ICs9IDENCg0KICAgICAgICAtLS8vIENoZWNrIGlmIHRoZSBzdGFjayBsZXZlbCBpcyB2YWxpZA0KICAgICAgICBsb2NhbCBJc1ZhbGlkID0gZGVidWcuaW5mbyhPZmZzZXQsICJsIikgfj0gLTENCiAgICAgICAgaWYgbm90IElzVmFsaWQgdGhlbiBjb250aW51ZSBlbmQNCg0KICAgICAgICAtLS8vIENoZWNrIGlmIHRoZSBmdW5jdGlvbiBpcyB2YWxpZA0KICAgICAgICBsb2NhbCBGdW5jdGlvbiA9IGRlYnVnLmluZm8oT2Zmc2V0LCAiZiIpDQogICAgICAgIGlmIG5vdCBGdW5jdGlvbiB0aGVuIHJldHVybiBlbmQNCg0KICAgICAgICByZXR1cm4gRnVuY3Rpb24NCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOkNhbGxiYWNrKERhdGE6IFJlbW90ZURhdGEsIC4uLik6IHRhYmxlPw0KICAgIC0tLy8gVW5wYWNrIERhdGENCiAgICBsb2NhbCBPcmlnaW5hbEZ1bmMgPSBEYXRhLk9yaWdpbmFsRnVuYw0KICAgIGxvY2FsIElkID0gRGF0YS5JZA0KICAgIGxvY2FsIE1ldGhvZCA9IERhdGEuTWV0aG9kDQogICAgbG9jYWwgUmVtb3RlID0gRGF0YS5SZW1vdGUNCg0KICAgIGxvY2FsIFJlbW90ZURhdGEgPSBzZWxmOkdldFJlbW90ZURhdGEoSWQpDQoNCiAgICAtLS8vIENoZWNrIGlmIHRoZSBSZW1vdGUgaXMgQmxvY2tlZA0KICAgIGlmIFJlbW90ZURhdGEuQmxvY2tlZCB0aGVuIHJldHVybiB7fSBlbmQNCg0KICAgIC0tLy8gQ2hlY2sgZm9yIGEgc3Bvb2YNCiAgICBsb2NhbCBTcG9vZiA9IHNlbGY6R2V0UmVtb3RlU3Bvb2YoUmVtb3RlLCBNZXRob2QsIE9yaWdpbmFsRnVuYywgLi4uKQ0KICAgIGlmIFNwb29mIHRoZW4gcmV0dXJuIFNwb29mIGVuZA0KDQogICAgLS0vLyBDaGVjayBpZiB0aGUgb3JpZ25hbCBmdW5jdGlvbiB3YXMgcGFzc2VkDQogICAgaWYgbm90IE9yaWdpbmFsRnVuYyB0aGVuIHJldHVybiBlbmQNCg0KICAgIC0tLy8gSW52b2tlIG9yaWduYWwgZnVuY3Rpb24NCiAgICByZXR1cm4gew0KICAgICAgICBPcmlnaW5hbEZ1bmMoUmVtb3RlLCAuLi4pDQogICAgfQ0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6RGVjb21waWxlKFNjcmlwdDogU2NyaXB0KTogc3RyaW5nDQogICAgbG9jYWwgS29uc3RhbnRBUEkgPSAiaHR0cDovL2FwaS5wbHVzZ2lhbnQ1LmNvbS9rb25zdGFudC9kZWNvbXBpbGUiDQogICAgbG9jYWwgRm9yY2VLb25zdGFudCA9IENvbmZpZy5Gb3JjZUtvbnN0YW50RGVjb21waWxlcg0KDQogICAgLS0vLyBVc2UgYnVpbHQtaW4gZGVjb21waWxlciBpZiB0aGUgZXhlY3V0b3Igc3VwcG9ydHMgaXQNCiAgICBpZiBkZWNvbXBpbGUgYW5kIG5vdCBGb3JjZUtvbnN0YW50IHRoZW4gDQogICAgICAgIHJldHVybiBkZWNvbXBpbGUoU2NyaXB0KQ0KICAgIGVuZA0KDQogICAgLS0vLyBnZXRzY3JpcHRieXRlY29kZQ0KICAgIGxvY2FsIFN1Y2Nlc3MsIEJ5dGVjb2RlID0gcGNhbGwoZ2V0c2NyaXB0Ynl0ZWNvZGUsIFNjcmlwdCkNCiAgICBpZiBub3QgU3VjY2VzcyB0aGVuDQogICAgICAgIGxvY2FsIEVycm9yID0gYC0tRmFpbGVkIHRvIGdldCBzY3JpcHQgYnl0ZWNvZGUsIGVycm9yOlxuYA0KICAgICAgICBFcnJvciAuLj0gYFxuLS1bW1xue0J5dGVjb2RlfVxuXV1gDQogICAgICAgIHJldHVybiBFcnJvciwgdHJ1ZQ0KICAgIGVuZA0KICAgIA0KICAgIC0tLy8gU2VuZCBQT1NUIHJlcXVlc3QgdG8gdGhlIEFQSQ0KICAgIGxvY2FsIFJlc3BvbmNlID0gcmVxdWVzdCh7DQogICAgICAgIFVybCA9IEtvbnN0YW50QVBJLA0KICAgICAgICBCb2R5ID0gQnl0ZWNvZGUsDQogICAgICAgIE1ldGhvZCA9ICJQT1NUIiwNCiAgICAgICAgSGVhZGVycyA9IHsNCiAgICAgICAgICAgIFsiQ29udGVudC1UeXBlIl0gPSAidGV4dC9wbGFpbiINCiAgICAgICAgfSwNCiAgICB9KQ0KDQogICAgLS0vLyBFcnJvciBjaGVjaw0KICAgIGlmIFJlc3BvbmNlLlN0YXR1c0NvZGUgfj0gMjAwIHRoZW4NCiAgICAgICAgbG9jYWwgRXJyb3IgPSBgLS1bS09OU1RBTlRdIEVycm9yIG9jY3VyZWQgd2hpbGUgcmVxdWVzdGluZyB0aGUgQVBJLCBlcnJvcjpcbmANCiAgICAgICAgRXJyb3IgLi49IGBcbi0tW1tcbntSZXNwb25jZS5Cb2R5fVxuXV1gDQogICAgICAgIHJldHVybiBFcnJvciwgdHJ1ZQ0KICAgIGVuZA0KDQogICAgcmV0dXJuIFJlc3BvbmNlLkJvZHkNCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOkdldFNjcmlwdEZyb21GdW5jKEZ1bmM6ICguLi5hbnkpIC0+IC4uLmFueSkNCiAgICBsb2NhbCBFTlYgPSBnZXRmZW52KEZ1bmMpDQogICAgaWYgc2VsZjpJc1NpZ21hU3B5RU5WKEVOVikgdGhlbiANCiAgICAgICAgcmV0dXJuIA0KICAgIGVuZA0KDQogICAgcmV0dXJuIHJhd2dldChFTlYsICJzY3JpcHQiKQ0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6Q29ubmVjdGlvbklzVmFsaWQoQ29ubmVjdGlvbjogdGFibGUpOiBib29sZWFuDQogICAgbG9jYWwgVmFsdWVSZXBsYWNlbWVudHMgPSB7DQoJCVsiU2NyaXB0Il0gPSBmdW5jdGlvbihDb25uZWN0aW9uOiB0YWJsZSk6IHNjcmlwdD8NCgkJCWxvY2FsIEZ1bmN0aW9uID0gQ29ubmVjdGlvbi5GdW5jdGlvbg0KCQkJaWYgbm90IEZ1bmN0aW9uIHRoZW4gcmV0dXJuIGVuZA0KDQoJCQlyZXR1cm4gc2VsZjpHZXRTY3JpcHRGcm9tRnVuYyhGdW5jdGlvbikNCgkJZW5kDQoJfQ0KDQogICAgLS0vLyBDaGVjayBpZiB0aGVzZSBwcm9wZXJ0aWVzIGFyZSB2YWxpZA0KICAgIGxvY2FsIFRvQ2hlY2sgPSB7DQogICAgICAgICJTY3JpcHQiDQogICAgfQ0KDQogICAgZm9yIF8sIFByb3BlcnR5IGluIFRvQ2hlY2sgZG8NCiAgICAgICAgbG9jYWwgUmVwbGFjZW1lbnQgPSBWYWx1ZVJlcGxhY2VtZW50c1tQcm9wZXJ0eV0NCg0KICAgICAgICAtLS8vIENoZWNrIGlmIHRoZXJlJ3MgYSBmdW5jdGlvbiBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICBpZiBSZXBsYWNlbWVudCB0aGVuDQogICAgICAgICAgICBWYWx1ZSA9IFJlcGxhY2VtZW50KENvbm5lY3Rpb24pDQogICAgICAgIGVuZA0KDQogICAgICAgIC0tLy8gQ2hlY2sgaWYgdGhlIHByb3BlcnR5IGhhcyBhIHZhbHVlDQogICAgICAgIGlmIFZhbHVlID09IG5pbCB0aGVuIA0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlIA0KICAgICAgICBlbmQNCiAgICBlbmQNCg0KICAgIHJldHVybiB0cnVlDQplbmQNCg0KZnVuY3Rpb24gUHJvY2VzczpGaWx0ZXJDb25uZWN0aW9ucyhTaWduYWw6IFJCWFNjcmlwdENvbm5lY3Rpb24pOiB0YWJsZQ0KICAgIGxvY2FsIFByb2Nlc3NlZCA9IHt9DQoNCiAgICAtLS8vIEZpbHRlciBlYWNoIGNvbm5lY3Rpb24NCiAgICBmb3IgXywgQ29ubmVjdGlvbiBpbiBnZXRjb25uZWN0aW9ucyhTaWduYWwpIGRvDQogICAgICAgIGlmIG5vdCBzZWxmOkNvbm5lY3Rpb25Jc1ZhbGlkKENvbm5lY3Rpb24pIHRoZW4gY29udGludWUgZW5kDQogICAgICAgIHRhYmxlLmluc2VydChQcm9jZXNzZWQsIENvbm5lY3Rpb24pDQogICAgZW5kDQoNCiAgICByZXR1cm4gUHJvY2Vzc2VkDQplbmQNCg0KZnVuY3Rpb24gUHJvY2VzczpJc1NpZ21hU3B5RU5WKEVudjogdGFibGUpOiBib29sZWFuDQogICAgcmV0dXJuIEVOViA9PSBTaWdtYUVOVg0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6UHJvY2Vzc1JlbW90ZShEYXRhOiBSZW1vdGVEYXRhLCAuLi4pOiB0YWJsZT8NCiAgICAtLS8vIFVucGFjayBEYXRhDQogICAgbG9jYWwgUmVtb3RlID0gRGF0YS5SZW1vdGUNCglsb2NhbCBNZXRob2QgPSBEYXRhLk1ldGhvZA0KICAgIGxvY2FsIFRyYW5zZmVyVHlwZSA9IERhdGEuVHJhbnNmZXJUeXBlDQoNCgktLS8vIENoZWNrIGlmIHRoZSB0cmFuc2ZlcnR5cGUgbWV0aG9kIGlzIGFsbG93ZWQNCglpZiBUcmFuc2ZlclR5cGUgYW5kIG5vdCBzZWxmOlJlbW90ZUFsbG93ZWQoUmVtb3RlLCBUcmFuc2ZlclR5cGUsIE1ldGhvZCkgdGhlbiByZXR1cm4gZW5kDQoNCiAgICAtLS8vIEZldGNoIGRldGFpbHMNCiAgICBsb2NhbCBJZCA9IENvbW11bmljYXRpb246R2V0RGVidWdJZChSZW1vdGUpDQogICAgbG9jYWwgQ2xhc3NEYXRhID0gc2VsZjpHZXRDbGFzc0RhdGEoUmVtb3RlKQ0KICAgIGxvY2FsIFRpbWVzdGFtcCA9IHRpY2soKQ0KDQogICAgLS0vLyBBZGQgZXh0cmEgZGF0YSBpbnRvIHRoZSBsb2cgaWYgbmVlZGVkDQogICAgbG9jYWwgRXh0cmFEYXRhID0gc2VsZi5FeHRyYURhdGENCiAgICBpZiBFeHRyYURhdGEgdGhlbg0KICAgICAgICBNZXJnZShEYXRhLCBFeHRyYURhdGEpDQogICAgZW5kDQoNCiAgICAtLS8vIEdldCBjYWxsZXIgaW5mb3JtYXRpb24NCiAgICBsb2NhbCBDYWxsaW5nRnVuY3Rpb24gPSBzZWxmOkZpbmRDYWxsaW5nTENsb3N1cmUoNikNCiAgICBsb2NhbCBTb3VyY2VTY3JpcHQNCiAgICBpZiBDYWxsaW5nRnVuY3Rpb24gdGhlbg0KICAgICAgICBTb3VyY2VTY3JpcHQgPSBzZWxmOkdldFNjcmlwdEZyb21GdW5jKENhbGxpbmdGdW5jdGlvbikNCiAgICBlbmQNCg0KICAgIC0tLy8gQWRkIHRvIHF1ZXVlDQogICAgTWVyZ2UoRGF0YSwgew0KCQlDYWxsaW5nU2NyaXB0ID0gZ2V0Y2FsbGluZ3NjcmlwdCgpLA0KICAgICAgICBTb3VyY2VTY3JpcHQgPSBTb3VyY2VTY3JpcHQsDQoJCUNhbGxpbmdGdW5jdGlvbiA9IENhbGxpbmdGdW5jdGlvbiwNCiAgICAgICAgSWQgPSBJZCwNCgkJQ2xhc3NEYXRhID0gQ2xhc3NEYXRhLA0KICAgICAgICBUaW1lc3RhbXAgPSBUaW1lc3RhbXAsDQogICAgICAgIEFyZ3MgPSBDb21tdW5pY2F0aW9uOlNlcmlhbGl6ZVRhYmxlKHsuLi59KQ0KICAgIH0pDQoNCiAgICAtLS8vIEludm9rZSB0aGUgUmVtb3RlIGFuZCBsb2cgcmV0dXJuIHZhbHVlcw0KICAgIGxvY2FsIFJldHVyblZhbHVlcyA9IHNlbGY6Q2FsbGJhY2soRGF0YSwgLi4uKQ0KICAgIERhdGEuUmV0dXJuVmFsdWVzID0gUmV0dXJuVmFsdWVzDQoNCiAgICAtLS8vIFF1ZXVlIGxvZw0KICAgIENvbW11bmljYXRpb246UXVldWVMb2coRGF0YSkNCg0KICAgIHJldHVybiBSZXR1cm5WYWx1ZXMNCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOlNldEFsbFJlbW90ZURhdGEoS2V5OiBzdHJpbmcsIFZhbHVlKQ0KICAgIGxvY2FsIFJlbW90ZU9wdGlvbnMgPSBzZWxmLlJlbW90ZU9wdGlvbnMNCglmb3IgUmVtb3RlSUQsIERhdGEgaW4gbmV4dCwgUmVtb3RlT3B0aW9ucyBkbw0KCQlEYXRhW0tleV0gPSBWYWx1ZQ0KCWVuZA0KZW5kDQoNCmZ1bmN0aW9uIFByb2Nlc3M6R2V0UmVtb3RlRGF0YShJZDogc3RyaW5nKQ0KICAgIGxvY2FsIFJlbW90ZU9wdGlvbnMgPSBzZWxmLlJlbW90ZU9wdGlvbnMNCg0KICAgIC0tLy8gQ2hlY2sgZm9yIGV4aXN0aW5nIHJlbW90ZSBkYXRhDQoJbG9jYWwgRXhpc3RpbmcgPSBSZW1vdGVPcHRpb25zW0lkXQ0KCWlmIEV4aXN0aW5nIHRoZW4gcmV0dXJuIEV4aXN0aW5nIGVuZA0KCQ0KICAgIC0tLy8gQmFzZSByZW1vdGUgZGF0YQ0KCWxvY2FsIERhdGEgPSB7DQoJCUV4Y2x1ZGVkID0gZmFsc2UsDQoJCUJsb2NrZWQgPSBmYWxzZQ0KCX0NCg0KCVJlbW90ZU9wdGlvbnNbSWRdID0gRGF0YQ0KCXJldHVybiBEYXRhDQplbmQNCg0KLS0vLyBUaGUgY29tbXVuaWNhdGlvbiBjcmVhdGVzIGEgZGlmZmVyZW50IHRhYmxlIGFkZHJlc3MNCi0tLy8gUmVjaXZlZCB0YWJsZXMgd2lsbCBub3QgYmUgdGhlIHNhbWUNCmZ1bmN0aW9uIFByb2Nlc3M6U2V0UmVtb3RlRGF0YShJZDogc3RyaW5nLCBSZW1vdGVEYXRhOiB0YWJsZSkNCiAgICBsb2NhbCBSZW1vdGVPcHRpb25zID0gc2VsZi5SZW1vdGVPcHRpb25zDQogICAgUmVtb3RlT3B0aW9uc1tJZF0gPSBSZW1vdGVEYXRhDQplbmQNCg0KZnVuY3Rpb24gUHJvY2VzczpVcGRhdGVSZW1vdGVEYXRhKElkOiBzdHJpbmcsIFJlbW90ZURhdGE6IHRhYmxlKQ0KICAgIENvbW11bmljYXRpb246Q29tbXVuaWNhdGUoIlJlbW90ZURhdGEiLCBJZCwgUmVtb3RlRGF0YSkNCmVuZA0KDQpmdW5jdGlvbiBQcm9jZXNzOlVwZGF0ZUFsbFJlbW90ZURhdGEoS2V5OiBzdHJpbmcsIFZhbHVlKQ0KICAgIENvbW11bmljYXRpb246Q29tbXVuaWNhdGUoIkFsbFJlbW90ZURhdGEiLCBLZXksIFZhbHVlKQ0KZW5kDQoNCnJldHVybiBQcm9jZXNz]]
},Hook={'base64',
[[]]
},Flags={'base64',
[[dHlwZSBGbGFnVmFsdWUgPSBib29sZWFufG51bWJlcnxhbnkNCnR5cGUgRmxhZyA9IHsNCiAgICBWYWx1ZTogRmxhZ1ZhbHVlLA0KICAgIExhYmVsOiBzdHJpbmcsDQogICAgQ2F0ZWdvcnk6IHN0cmluZw0KfQ0KdHlwZSBGbGFncyA9IHsNCiAgICBbc3RyaW5nXTogRmxhZw0KfQ0KdHlwZSB0YWJsZSA9IHsNCiAgICBbYW55XTogYW55DQp9DQoNCmxvY2FsIE1vZHVsZSA9IHsNCiAgICBGbGFncyA9IHsNCiAgICAgICAgUHJldmVudFJlbmFtaW5nID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIHJlbmFtaW5nIiwNCiAgICAgICAgfSwNCiAgICAgICAgUHJldmVudFBhcmVudGluZyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJObyBwYXJlbnRpbmciLA0KICAgICAgICB9LA0KICAgICAgICBTZWxlY3ROZXdlc3QgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiQXV0byBzZWxlY3QgbmV3ZXN0IiwNCiAgICAgICAgfSwNCiAgICAgICAgRGVjb21waWxlUG9wb3V0ID0geyAtLSBMb3ZyZSBTSFVTSA0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIlBvcC1vdXQgZGVjb21waWxlcyIsDQogICAgICAgIH0sDQogICAgICAgIElnbm9yZU5pbCA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIklnbm9yZSBuaWwgcGFyZW50cyIsDQogICAgICAgIH0sDQogICAgICAgIExvZ0V4cGxvaXQgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJMb2cgZXhwbG9pdCBjYWxscyIsDQogICAgICAgIH0sDQogICAgICAgIExvZ1JlY2l2ZXMgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJMb2cgcmVjZWl2ZXMiLA0KICAgICAgICB9LA0KICAgICAgICBQYXVzZWQgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IGZhbHNlLA0KICAgICAgICAgICAgTGFiZWwgPSAiUGF1c2VkIiwNCiAgICAgICAgICAgIEtleWJpbmQgPSBFbnVtLktleUNvZGUuUQ0KICAgICAgICB9LA0KICAgICAgICBLZXliaW5kc0VuYWJsZWQgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJLZXliaW5kcyBFbmFibGVkIg0KICAgICAgICB9LA0KICAgICAgICBGaW5kU3RyaW5nRm9yTmFtZSA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gdHJ1ZSwNCiAgICAgICAgICAgIExhYmVsID0gIkZpbmQgYXJnIGZvciBuYW1lIg0KICAgICAgICB9LA0KICAgICAgICBVaVZpc2libGUgPSB7DQogICAgICAgICAgICBWYWx1ZSA9IHRydWUsDQogICAgICAgICAgICBMYWJlbCA9ICJVSSBWaXNpYmxlIiwNCiAgICAgICAgICAgIEtleWJpbmQgPSBFbnVtLktleUNvZGUuUA0KICAgICAgICB9LA0KICAgICAgICBOb1RyZWVOb2RlcyA9IHsNCiAgICAgICAgICAgIFZhbHVlID0gZmFsc2UsDQogICAgICAgICAgICBMYWJlbCA9ICJObyBncm91cGluZyINCiAgICAgICAgfSwNCiAgICAgICAgVGFibGVBcmdzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIlRhYmxlIGFyZ3MiDQogICAgICAgIH0sDQogICAgICAgIE5vVmFyaWFibGVzID0gew0KICAgICAgICAgICAgVmFsdWUgPSBmYWxzZSwNCiAgICAgICAgICAgIExhYmVsID0gIk5vIGNvbXByZXNzaW9uIg0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZ1ZhbHVlKE5hbWU6IHN0cmluZyk6IEZsYWdWYWx1ZQ0KICAgIGxvY2FsIEZsYWcgPSBzZWxmOkdldEZsYWcoTmFtZSkNCiAgICByZXR1cm4gRmxhZy5WYWx1ZQ0KZW5kDQoNCmZ1bmN0aW9uIE1vZHVsZTpTZXRGbGFnVmFsdWUoTmFtZTogc3RyaW5nLCBWYWx1ZTogRmxhZ1ZhbHVlKQ0KICAgIGxvY2FsIEZsYWcgPSBzZWxmOkdldEZsYWcoTmFtZSkNCiAgICBGbGFnLlZhbHVlID0gVmFsdWUNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6U2V0RmxhZ0NhbGxiYWNrKE5hbWU6IHN0cmluZywgQ2FsbGJhY2s6ICguLi5hbnkpIC0+IC4uLmFueSkNCiAgICBsb2NhbCBGbGFnID0gc2VsZjpHZXRGbGFnKE5hbWUpDQogICAgRmxhZy5DYWxsYmFjayA9IENhbGxiYWNrDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOlNldEZsYWdDYWxsYmFja3MoRGljdDoge30pDQogICAgZm9yIE5hbWUsIENhbGxiYWNrOiAoLi4uYW55KSAtPiAuLi5hbnkgaW4gbmV4dCwgRGljdCBkbyANCiAgICAgICAgc2VsZjpTZXRGbGFnQ2FsbGJhY2soTmFtZSwgQ2FsbGJhY2spDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gTW9kdWxlOkdldEZsYWcoTmFtZTogc3RyaW5nKTogRmxhZw0KICAgIGxvY2FsIEFsbEZsYWdzID0gc2VsZjpHZXRGbGFncygpDQogICAgbG9jYWwgRmxhZyA9IEFsbEZsYWdzW05hbWVdDQogICAgYXNzZXJ0KEZsYWcsICJGbGFnIGRvZXMgbm90IGV4aXN0ISIpDQogICAgcmV0dXJuIEZsYWcNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6QWRkRmxhZyhOYW1lOiBzdHJpbmcsIEZsYWc6IEZsYWcpDQogICAgbG9jYWwgQWxsRmxhZ3MgPSBzZWxmOkdldEZsYWdzKCkNCiAgICBBbGxGbGFnc1tOYW1lXSA9IEZsYWcNCmVuZA0KDQpmdW5jdGlvbiBNb2R1bGU6R2V0RmxhZ3MoKTogRmxhZ3MNCiAgICByZXR1cm4gc2VsZi5GbGFncw0KZW5kDQoNCnJldHVybiBNb2R1bGU=]]
},Ui={'base64',
[[bG9jYWwgVWkgPSB7DQoJRGVmYXVsdEVkaXRvckNvbnRlbnQgPSBbPVstLVtbIA0KCVdlbGNvbWUgdG8gU2lnbWEgU3B5DQoJQ3JlYXRlZCBieSBkZXBzbyENCl1dIF09XSwNCglMb2dMaW1pdCA9IDEwMCwNCiAgICBTZWFzb25MYWJlbHMgPSB7IA0KICAgICAgICBKYW51YXJ5ID0gIuKbhCVz4puEIiwgDQogICAgICAgIEZlYnJ1YXJ5ID0gIvCfjKjvuI8lc/Cfj4IiLCANCiAgICAgICAgTWFyY2ggPSAi8J+MuSVz8J+MuiIsIA0KICAgICAgICBBcHJpbCA9ICLwn5CjJXPinJ3vuI8iLCANCiAgICAgICAgTWF5ID0gIvCfkJ0lc/CfjJ4iLCANCiAgICAgICAgSnVuZSA9ICLwn4yyJXPwn6WVIiwgDQogICAgICAgIEp1bHkgPSAi8J+MiiVz8J+MhSIsIA0KICAgICAgICBBdWd1c3QgPSAi4piA77iPJXPwn4yeIiwgDQogICAgICAgIFNlcHRlbWJlciA9ICLwn42BJXPwn42BIiwgDQogICAgICAgIE9jdG9iZXIgPSAi8J+OgyVz8J+OgyIsIA0KICAgICAgICBOb3ZlbWJlciA9ICLwn42CJXPwn42CIiwgDQogICAgICAgIERlY2VtYmVyID0gIvCfjoQlc/CfjoEiDQogICAgfSwNCglTY2FsZXMgPSB7DQoJCVsiTW9iaWxlIl0gPSBVRGltMi5mcm9tT2Zmc2V0KDQ4MCwgMjgwKSwNCgkJWyJEZXNrdG9wIl0gPSBVRGltMi5mcm9tT2Zmc2V0KDYwMCwgNDAwKSwNCgl9LA0KICAgIEJhc2VDb25maWcgPSB7DQogICAgICAgIFRoZW1lID0gIlNpZ21hU3B5IiwNCiAgICAgICAgTm9TY3JvbGwgPSB0cnVlLA0KICAgIH0sDQoJT3B0aW9uVHlwZXMgPSB7DQoJCWJvb2xlYW4gPSAiQ2hlY2tib3giLA0KCX0sDQoJRGlzcGxheVJlbW90ZUluZm8gPSB7DQoJCSJNZXRhTWV0aG9kIiwNCgkJIk1ldGhvZCIsDQoJCSJSZW1vdGUiLA0KCQkiQ2FsbGluZ1NjcmlwdCIsDQoJCSJJc0FjdG9yIiwNCgkJIklkIg0KCX0sDQoNCiAgICBXaW5kb3cgPSBuaWwsDQogICAgUmFuZG9tU2VlZCA9IFJhbmRvbS5uZXcodGljaygpKSwNCglMb2dzID0gc2V0bWV0YXRhYmxlKHt9LCB7X19tb2RlID0gImsifSksDQoJTG9nUXVldWUgPSBzZXRtZXRhdGFibGUoe30sIHtfX21vZGUgPSAidiJ9KSwNCn0gDQoNCnR5cGUgdGFibGUgPSB7DQoJW2FueV06IGFueQ0KfQ0KDQp0eXBlIExvZyA9IHsNCglSZW1vdGU6IEluc3RhbmNlLA0KCU1ldGhvZDogc3RyaW5nLA0KCUFyZ3M6IHRhYmxlLA0KCUlzUmVjZWl2ZTogYm9vbGVhbj8sDQoJTWV0YU1ldGhvZDogc3RyaW5nPywNCglPcmlnbmFsRnVuYzogKCguLi5hbnkpIC0+IC4uLmFueSk/LA0KCUNhbGxpbmdTY3JpcHQ6IEluc3RhbmNlPywNCglDYWxsaW5nRnVuY3Rpb246ICgoLi4uYW55KSAtPiAuLi5hbnkpPywNCglDbGFzc0RhdGE6IHRhYmxlPywNCglSZXR1cm5WYWx1ZXM6IHRhYmxlPywNCglSZW1vdGVEYXRhOiB0YWJsZT8sDQoJSWQ6IHN0cmluZywNCglTZWxlY3RhYmxlOiB0YWJsZSwNCglIZWFkZXJEYXRhOiB0YWJsZSwNCglWYWx1ZVN3YXBzOiB0YWJsZSwNCglUaW1lc3RhbXA6IG51bWJlciwNCglJc0V4cGxvaXQ6IGJvb2xlYW4NCn0NCg0KLS0vLyBDb21wYXRpYmlsaXR5DQpsb2NhbCBTZXRDbGlwYm9hcmQgPSBzZXRjbGlwYm9hcmQgb3IgdG9jbGlwYm9hcmQgb3Igc2V0X2NsaXBib2FyZA0KDQotLS8vIExpYnJhcmllcw0KbG9jYWwgUmVHdWkgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2RlcHRoc28vRGVhci1SZUd1aS9yZWZzL2hlYWRzL21haW4vUmVHdWkubHVhJyksICJSZUd1aSIpKCkNCg0KLS0vLyBTZXJ2aWNlcw0KbG9jYWwgSW5zZXJ0U2VydmljZTogSW5zZXJ0U2VydmljZQ0KDQotLS8vIE1vZHVsZXMNCmxvY2FsIEZsYWdzDQpsb2NhbCBHZW5lcmF0aW9uDQpsb2NhbCBQcm9jZXNzDQpsb2NhbCBIb29rIA0KbG9jYWwgQ29uZmlnDQpsb2NhbCBDb21tdW5pY2F0aW9uDQpsb2NhbCBGaWxlcw0KDQpsb2NhbCBBY3RpdmVEYXRhID0gbmlsDQpsb2NhbCBSZW1vdGVzQ291bnQgPSAwDQoNCmxvY2FsIFRleHRGb250ID0gRm9udC5mcm9tRW51bShFbnVtLkZvbnQuQ29kZSkNCmxvY2FsIEZvbnRTdWNjZXNzID0gZmFsc2UNCmxvY2FsIENvbW1DaGFubmVsDQoNCmZ1bmN0aW9uIFVpOkluaXQoRGF0YSkNCiAgICBsb2NhbCBNb2R1bGVzID0gRGF0YS5Nb2R1bGVzDQoJbG9jYWwgU2VydmljZXMgPSBEYXRhLlNlcnZpY2VzDQoNCgktLS8vIFNlcnZpY2VzDQoJSW5zZXJ0U2VydmljZSA9IFNlcnZpY2VzLkluc2VydFNlcnZpY2UNCg0KCS0tLy8gTW9kdWxlcw0KCUZsYWdzID0gTW9kdWxlcy5GbGFncw0KCUdlbmVyYXRpb24gPSBNb2R1bGVzLkdlbmVyYXRpb24NCglQcm9jZXNzID0gTW9kdWxlcy5Qcm9jZXNzDQoJSG9vayA9IE1vZHVsZXMuSG9vaw0KCUNvbmZpZyA9IE1vZHVsZXMuQ29uZmlnDQoJQ29tbXVuaWNhdGlvbiA9IE1vZHVsZXMuQ29tbXVuaWNhdGlvbg0KCUZpbGVzID0gTW9kdWxlcy5GaWxlcw0KDQoJLS0vLyBSZUd1aQ0KCXNlbGY6Q2hlY2tTY2FsZSgpDQoJc2VsZjpMb2FkRm9udCgpDQoJc2VsZjpMb2FkUmVHdWkoKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNldENvbW1DaGFubmVsKE5ld0NvbW1DaGFubmVsOiBCaW5kYWJsZUV2ZW50KQ0KCUNvbW1DaGFubmVsID0gTmV3Q29tbUNoYW5uZWwNCmVuZA0KDQpmdW5jdGlvbiBVaTpDaGVja1NjYWxlKCkNCglsb2NhbCBCYXNlQ29uZmlnID0gc2VsZi5CYXNlQ29uZmlnDQoJbG9jYWwgU2NhbGVzID0gc2VsZi5TY2FsZXMNCg0KCWxvY2FsIElzTW9iaWxlID0gUmVHdWk6SXNNb2JpbGVEZXZpY2UoKQ0KCWxvY2FsIERldmljZSA9IElzTW9iaWxlIGFuZCAiTW9iaWxlIiBvciAiRGVza3RvcCINCg0KCUJhc2VDb25maWcuU2l6ZSA9IFNjYWxlc1tEZXZpY2VdDQplbmQNCg0KZnVuY3Rpb24gVWk6U2V0Q2xpcGJvYXJkKENvbnRlbnQ6IHN0cmluZykNCglTZXRDbGlwYm9hcmQoQ29udGVudCkNCmVuZA0KDQpmdW5jdGlvbiBVaTpUdXJuU2Vhc29uYWwoVGV4dDogc3RyaW5nKTogc3RyaW5nDQogICAgbG9jYWwgU2Vhc29uTGFiZWxzID0gc2VsZi5TZWFzb25MYWJlbHMNCiAgICBsb2NhbCBNb250aCA9IG9zLmRhdGUoIiVCIikNCiAgICBsb2NhbCBCYXNlID0gU2Vhc29uTGFiZWxzW01vbnRoXQ0KDQogICAgcmV0dXJuIEJhc2U6Zm9ybWF0KFRleHQpDQplbmQNCg0KZnVuY3Rpb24gVWk6TG9hZEZvbnQoKQ0KCWxvY2FsIEZvbnRGaWxlID0gc2VsZi5Gb250SnNvbkZpbGUNCg0KCS0tLy8gR2V0IEZvbnRGYWNlIEFzc2V0SWQNCglsb2NhbCBBc3NldElkID0gRmlsZXM6TG9hZEN1c3RvbWFzc2V0KEZvbnRGaWxlKQ0KCWlmIG5vdCBBc3NldElkIHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBDcmVhdGUgY3VzdG9tIEZvbnRGYWNlDQoJbG9jYWwgTmV3Rm9udCA9IEZvbnQubmV3KEFzc2V0SWQpDQoJVGV4dEZvbnQgPSBOZXdGb250DQoJRm9udFN1Y2Nlc3MgPSB0cnVlDQplbmQNCg0KZnVuY3Rpb24gVWk6U2V0Rm9udEZpbGUoRm9udEZpbGU6IHN0cmluZykNCglzZWxmLkZvbnRKc29uRmlsZSA9IEZvbnRGaWxlDQplbmQNCg0KZnVuY3Rpb24gVWk6Rm9udFdhc1N1Y2Nlc3NmdWwoKQ0KCWlmIEZvbnRTdWNjZXNzIHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBFcnJvciBtZXNzYWdlDQoJc2VsZjpTaG93TW9kYWwoew0KCQkiVW5mb3J0dW5hdGVseSB5b3VyIGV4ZWN1dG9yIHdhcyB1bmFibGUgdG8gZG93bmxvYWQgdGhlIGZvbnQgYW5kIHRoZXJlZm9yZSBzd2l0Y2hlZCB0byB0aGUgRGFyayB0aGVtZSIsDQoJCSJcbklmIHlvdSB3b3VsZCBsaWtlIHRvIHVzZSB0aGUgSW1HdWkgdGhlbWUsIFxucGxlYXNlIGRvd25sb2FkIHRoZSBmb250IChhc3NldHMvUHJvZ2d5Q2xlYW4udHRmKSIsDQoJCSJhbmQgcHV0IHB1dCBpdCBpbiB5b3VyIHdvcmtzcGFjZSBmb2xkZXJcbihTaWdtYSBTcHkvYXNzZXRzKSINCgl9KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkxvYWRSZUd1aSgpDQoJbG9jYWwgVGhlbWVDb25maWcgPSBDb25maWcuVGhlbWVDb25maWcNCglUaGVtZUNvbmZpZy5UZXh0Rm9udCA9IFRleHRGb250DQoNCgktLS8vIFJlR3VpDQoJUmVHdWk6RGVmaW5lVGhlbWUoIlNpZ21hU3B5IiwgVGhlbWVDb25maWcpDQplbmQNCg0KdHlwZSBDcmVhdGVCdXR0b25zID0gew0KCUJhc2U6IHRhYmxlPywNCglCdXR0b25zOiB0YWJsZSwNCglOb1RhYmxlOiBib29sZWFuPw0KfQ0KZnVuY3Rpb24gVWk6Q3JlYXRlQnV0dG9ucyhQYXJlbnQsIERhdGE6IENyZWF0ZUJ1dHRvbnMpDQoJbG9jYWwgQmFzZSA9IERhdGEuQmFzZSBvciB7fQ0KCWxvY2FsIEJ1dHRvbnMgPSBEYXRhLkJ1dHRvbnMNCglsb2NhbCBOb1RhYmxlID0gRGF0YS5Ob1RhYmxlDQoNCgktLS8vIENyZWF0ZSB0YWJsZSBsYXlvdXQNCglpZiBub3QgTm9UYWJsZSB0aGVuDQoJCVBhcmVudCA9IFBhcmVudDpUYWJsZSh7DQoJCQlNYXhDb2x1bW5zID0gMw0KCQl9KTpOZXh0Um93KCkNCgllbmQNCg0KCS0tLy8gQ3JlYXRlIGJ1dHRvbnMNCglmb3IgXywgQnV0dG9uIGluIG5leHQsIEJ1dHRvbnMgZG8NCgkJbG9jYWwgQ29udGFpbmVyID0gUGFyZW50DQoJCWlmIG5vdCBOb1RhYmxlIHRoZW4NCgkJCUNvbnRhaW5lciA9IFBhcmVudDpOZXh0Q29sdW1uKCkNCgkJZW5kDQoNCgkJUmVHdWk6Q2hlY2tDb25maWcoQnV0dG9uLCBCYXNlKQ0KCQlDb250YWluZXI6QnV0dG9uKEJ1dHRvbikNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVXaW5kb3coT3ZlcndyaXRlczogdGFibGUpDQogICAgbG9jYWwgQmFzZUNvbmZpZyA9IHNlbGYuQmFzZUNvbmZpZw0KCWxvY2FsIENvbmZpZyA9IFByb2Nlc3M6RGVlcENsb25lVGFibGUoQmFzZUNvbmZpZykNCg0KCS0tLy8gTWVyZ2Ugb3ZlcndyaXRlcw0KCWlmIE92ZXJ3cml0ZXMgdGhlbg0KCQlNZXJnZShDb25maWcsIE92ZXJ3cml0ZXMpDQoJZW5kDQoJDQoJLS0vLyBDcmVhdGUgV2luZG93DQoJbG9jYWwgV2luZG93ID0gUmVHdWk6V2luZG93KENvbmZpZykNCg0KCS0tLy8gU3dpdGNoIHRvIERhcmtUaGVtZSBpbnN0ZWFkIG9mIHRoZSBJbUd1aSB0aGVtZSBpZiB0aGUgZm9udCBjYW5ub3QgYmUgbG9hZGVkDQoJaWYgbm90IEZvbnRTdWNjZXNzIHRoZW4gDQoJCVdpbmRvdzpTZXRUaGVtZSgiRGFya1RoZW1lIikNCgllbmQNCgkNCgktLS8vIENyZWF0ZSBXaW5kb3cNCglyZXR1cm4gV2luZG93DQplbmQNCg0KZnVuY3Rpb24gVWk6Q3JlYXRlTWFpbldpbmRvdygpDQoJbG9jYWwgV2luZG93ID0gc2VsZjpDcmVhdGVXaW5kb3coKQ0KCXNlbGYuV2luZG93ID0gV2luZG93DQoNCgktLS8vIENoZWNrIGlmIHRoZSBmb250IHdhcyBzdWNjZXNzZnVsbHkgZG93bmxvYWRlZA0KCXNlbGY6Rm9udFdhc1N1Y2Nlc3NmdWwoKQ0KCXNlbGY6QXVyYUNvdW50ZXJTZXJ2aWNlKCkNCg0KCS0tLy8gVWlWaXNpYmxlIGZsYWcgY2FsbGJhY2sNCglGbGFnczpTZXRGbGFnQ2FsbGJhY2soIlVpVmlzaWJsZSIsIGZ1bmN0aW9uKHNlbGYsIFZpc2libGUpDQoJCVdpbmRvdzpTZXRWaXNpYmxlKFZpc2libGUpDQoJZW5kKQ0KDQoJcmV0dXJuIFdpbmRvdw0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNob3dNb2RhbChMaW5lczogdGFibGUpDQoJbG9jYWwgV2luZG93ID0gc2VsZi5XaW5kb3cNCglsb2NhbCBNZXNzYWdlID0gdGFibGUuY29uY2F0KExpbmVzLCAiXG4iKQ0KDQoJLS0vLyBNb2RhbCBXaW5kb3cNCglsb2NhbCBNb2RhbFdpbmRvdyA9IFdpbmRvdzpQb3B1cE1vZGFsKHsNCgkJVGl0bGUgPSAiU2lnbWEgU3B5Ig0KCX0pDQoJTW9kYWxXaW5kb3c6TGFiZWwoew0KCQlUZXh0ID0gTWVzc2FnZSwNCgkJUmljaFRleHQgPSB0cnVlLA0KCQlUZXh0V3JhcHBlZCA9IHRydWUNCgl9KQ0KCU1vZGFsV2luZG93OkJ1dHRvbih7DQoJCVRleHQgPSAiT2theSIsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJTW9kYWxXaW5kb3c6Q2xvc2VQb3B1cCgpDQoJCWVuZCwNCgl9KQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNob3dVbnN1cHBvcnRlZEV4ZWN1dG9yKE5hbWU6IHN0cmluZykNCglVaTpTaG93TW9kYWwoew0KCQkiVW5mb3J0dW5hdGVseSBTaWdtYSBTcHkgaXMgbm90IHN1cHBvcnRlZCBvbiB5b3VyIGV4ZWN1dG9yIiwNCgkJIlRoZSBiZXN0IGZyZWUgb3B0aW9uIGlzIFN3aWZ0IChkaXNjb3JkLmdnL2dldHN3aWZ0Z2cpIiwNCgkJYFxuWW91ciBleGVjdXRvcjoge05hbWV9YA0KCX0pDQplbmQNCg0KZnVuY3Rpb24gVWk6U2hvd1Vuc3VwcG9ydGVkKEZ1bmNOYW1lOiBzdHJpbmcpDQoJVWk6U2hvd01vZGFsKHsNCgkJIlVuZm9ydHVuYXRlbHkgU2lnbWEgU3B5IGlzIG5vdCBzdXBwb3J0ZWQgb24geW91ciBleGVjdXRvciIsDQoJCWBcbk1pc3NpbmcgZnVuY3Rpb246IHtGdW5jTmFtZX1gDQoJfSkNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVPcHRpb25zRm9yRGljdChQYXJlbnQsIERpY3Q6IHRhYmxlLCBDYWxsYmFjaykNCglsb2NhbCBPcHRpb25zID0ge30NCg0KCS0tLy8gRGljdG9uYXJ5IHdyYXANCglmb3IgS2V5LCBWYWx1ZSBpbiBuZXh0LCBEaWN0IGRvDQoJCU9wdGlvbnNbS2V5XSA9IHsNCgkJCVZhbHVlID0gVmFsdWUsDQoJCQlMYWJlbCA9IEtleSwNCgkJCUNhbGxiYWNrID0gZnVuY3Rpb24oXywgVmFsdWUpDQoJCQkJRGljdFtLZXldID0gVmFsdWUNCg0KCQkJCS0tLy8gSW52b2tlIGNhbGxiYWNrDQoJCQkJaWYgbm90IENhbGxiYWNrIHRoZW4gcmV0dXJuIGVuZA0KCQkJCUNhbGxiYWNrKCkNCgkJCWVuZA0KCQl9DQoJZW5kDQoNCgktLS8vIENyZWF0ZSBlbGVtZW50cw0KCXNlbGY6Q3JlYXRlRWxlbWVudHMoUGFyZW50LCBPcHRpb25zKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkNoZWNrS2V5YmluZExheW91dChDb250YWluZXIsIEtleUNvZGU6IEVudW0uS2V5Q29kZSwgQ2FsbGJhY2spDQoJaWYgbm90IEtleUNvZGUgdGhlbiByZXR1cm4gQ29udGFpbmVyIGVuZA0KDQoJLS0vLyBDcmVhdGUgUm93IGxheW91dA0KCUNvbnRhaW5lciA9IENvbnRhaW5lcjpSb3coew0KCQlIb3Jpem9udGFsRmxleCA9IEVudW0uVUlGbGV4QWxpZ25tZW50LlNwYWNlQmV0d2Vlbg0KCX0pDQoNCgktLS8vIEFkZCBLZXliaW5kIGVsZW1lbnQNCglDb250YWluZXI6S2V5YmluZCh7DQoJCUxhYmVsID0gIiIsDQoJCVZhbHVlID0gS2V5Q29kZSwNCgkJTGF5b3V0T3JkZXIgPSAyLA0KCQlJZ25vcmVHYW1lUHJvY2Vzc2VkID0gZmFsc2UsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJLS0vLyBDaGVjayBpZiBrZXliaW5kcyBhcmUgZW5hYmxlZA0KCQkJbG9jYWwgRW5hYmxlZCA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiS2V5YmluZHNFbmFibGVkIikNCgkJCWlmIG5vdCBFbmFibGVkIHRoZW4gcmV0dXJuIGVuZA0KDQoJCQktLS8vIEludm9rZSBjYWxsYmFjaw0KCQkJQ2FsbGJhY2soKQ0KCQllbmQsDQoJfSkNCg0KCXJldHVybiBDb250YWluZXINCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVFbGVtZW50cyhQYXJlbnQsIE9wdGlvbnMpDQoJbG9jYWwgT3B0aW9uVHlwZXMgPSBzZWxmLk9wdGlvblR5cGVzDQoJDQoJLS0vLyBDcmVhdGUgdGFibGUgbGF5b3V0DQoJbG9jYWwgVGFibGUgPSBQYXJlbnQ6VGFibGUoew0KCQlNYXhDb2x1bW5zID0gMw0KCX0pOk5leHRSb3coKQ0KDQoJZm9yIE5hbWUsIERhdGEgaW4gT3B0aW9ucyBkbw0KCQlsb2NhbCBWYWx1ZSA9IERhdGEuVmFsdWUNCgkJbG9jYWwgVHlwZSA9IHR5cGVvZihWYWx1ZSkNCg0KCQktLS8vIEFkZCBtaXNzaW5nIHZhbHVlcyBpbnRvIG9wdGlvbnMgdGFibGUNCgkJUmVHdWk6Q2hlY2tDb25maWcoRGF0YSwgew0KCQkJQ2xhc3MgPSBPcHRpb25UeXBlc1tUeXBlXSwNCgkJCUxhYmVsID0gTmFtZSwNCgkJfSkNCgkJDQoJCS0tLy8gQ2hlY2sgaWYgYSBlbGVtZW50IHR5cGUgZXhpc3RzIGZvciB2YWx1ZSB0eXBlDQoJCWxvY2FsIENsYXNzID0gRGF0YS5DbGFzcw0KCQlhc3NlcnQoQ2xhc3MsIGBObyB7VHlwZX0gdHlwZSBleGlzdHMgZm9yIG9wdGlvbmApDQoNCgkJbG9jYWwgQ29udGFpbmVyID0gVGFibGU6TmV4dENvbHVtbigpDQoJCWxvY2FsIENoZWNrYm94ID0gbmlsDQoNCgkJLS0vLyBDaGVjayBmb3IgYSBrZXliaW5kIGxheW91dA0KCQlsb2NhbCBLZXliaW5kID0gRGF0YS5LZXliaW5kDQoJCUNvbnRhaW5lciA9IHNlbGY6Q2hlY2tLZXliaW5kTGF5b3V0KENvbnRhaW5lciwgS2V5YmluZCwgZnVuY3Rpb24oKQ0KCQkJQ2hlY2tib3g6VG9nZ2xlKCkNCgkJZW5kKQ0KCQkNCgkJLS0vLyBDcmVhdGUgY29sdW1uIGFuZCBlbGVtZW50DQoJCUNoZWNrYm94ID0gQ29udGFpbmVyW0NsYXNzXShDb250YWluZXIsIERhdGEpDQoJZW5kDQplbmQNCg0KLS0vLyBCb2lpaWkgd2hhdCBkaWQgeW91IHNheSBhYm91dCBTaWdtYSBTcHkg8J+SgPCfkoANCmZ1bmN0aW9uIFVpOkRpc3BsYXlBdXJhKCkNCiAgICBsb2NhbCBXaW5kb3cgPSBzZWxmLldpbmRvdw0KICAgIGxvY2FsIFJhbmQgPSBzZWxmLlJhbmRvbVNlZWQNCg0KCS0tLy8gQXVyYSAoYm9paWlpaSkNCiAgICBsb2NhbCBBVVJBID0gUmFuZDpOZXh0SW50ZWdlcigxLCA5OTk5OTk5KQ0KICAgIGxvY2FsIEFVUkFERUxBWSA9IFJhbmQ6TmV4dEludGVnZXIoMSwgNSkNCg0KCS0tLy8gVGl0bGUNCglsb2NhbCBUaXRsZSA9IGAgU2lnbWEgU3B5IC0gRGVwc28gfCBBVVJBOiB7QVVSQX0gYA0KCWxvY2FsIFNlYXNvbmFsID0gc2VsZjpUdXJuU2Vhc29uYWwoVGl0bGUpDQogICAgV2luZG93OlNldFRpdGxlKFNlYXNvbmFsKQ0KDQogICAgd2FpdChBVVJBREVMQVkpDQplbmQNCg0KZnVuY3Rpb24gVWk6QXVyYUNvdW50ZXJTZXJ2aWNlKCkNCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkNCiAgICAgICAgd2hpbGUgdHJ1ZSBkbw0KICAgICAgICAgICAgc2VsZjpEaXNwbGF5QXVyYSgpDQogICAgICAgIGVuZA0KICAgIGVuZCkNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVXaW5kb3dDb250ZW50KFdpbmRvdykNCiAgICAtLS8vIFdpbmRvdyBncm91cA0KICAgIGxvY2FsIExheW91dCA9IFdpbmRvdzpMaXN0KHsNCiAgICAgICAgVWlQYWRkaW5nID0gMiwNCiAgICAgICAgSG9yaXpvbnRhbEZsZXggPSBFbnVtLlVJRmxleEFsaWdubWVudC5GaWxsLA0KICAgICAgICBWZXJ0aWNhbEZsZXggPSBFbnVtLlVJRmxleEFsaWdubWVudC5GaWxsLA0KICAgICAgICBGaWxsRGlyZWN0aW9uID0gRW51bS5GaWxsRGlyZWN0aW9uLlZlcnRpY2FsLA0KICAgICAgICBGaWxsID0gdHJ1ZQ0KICAgIH0pDQoNCgktLS8vIFJlbW90ZXMgbGlzdA0KICAgIHNlbGYuUmVtb3Rlc0xpc3QgPSBMYXlvdXQ6Q2FudmFzKHsNCiAgICAgICAgU2Nyb2xsID0gdHJ1ZSwNCiAgICAgICAgVWlQYWRkaW5nID0gNSwNCiAgICAgICAgQXV0b21hdGljU2l6ZSA9IEVudW0uQXV0b21hdGljU2l6ZS5Ob25lLA0KICAgICAgICBGbGV4TW9kZSA9IEVudW0uVUlGbGV4TW9kZS5Ob25lLA0KICAgICAgICBTaXplID0gVURpbTIubmV3KDAsIDEzMCwgMSwgMCkNCiAgICB9KQ0KDQoJLS0vLyBUYWIgYm94DQoJbG9jYWwgSW5mb1NlbGVjdG9yID0gTGF5b3V0OlRhYlNlbGVjdG9yKHsNCiAgICAgICAgTm9BbmltYXRpb24gPSB0cnVlLA0KICAgICAgICBTaXplID0gVURpbTIubmV3KDEsIC0xMzAsIDAuNCwgMCksDQogICAgfSkNCg0KCXNlbGYuSW5mb1NlbGVjdG9yID0gSW5mb1NlbGVjdG9yDQoJc2VsZi5DYW52YXNMYXlvdXQgPSBMYXlvdXQNCg0KCS0tLy8gTWFrZSB0YWJzDQoJc2VsZjpNYWtlRWRpdG9yVGFiKEluZm9TZWxlY3RvcikNCglzZWxmOk1ha2VPcHRpb25zVGFiKEluZm9TZWxlY3RvcikNCmVuZA0KDQpmdW5jdGlvbiBVaTpNYWtlT3B0aW9uc1RhYihJbmZvU2VsZWN0b3IpDQoJLS0vLyBUYWJTZWxlY3Rvcg0KCWxvY2FsIE9wdGlvbnNUYWIgPSBJbmZvU2VsZWN0b3I6Q3JlYXRlVGFiKHsNCgkJTmFtZSA9ICJPcHRpb25zIg0KCX0pDQoNCgktLS8vIEFkZCBnbG9iYWwgb3B0aW9ucw0KCU9wdGlvbnNUYWI6U2VwYXJhdG9yKHtUZXh0PSJMb2dzIn0pDQoJc2VsZjpDcmVhdGVCdXR0b25zKE9wdGlvbnNUYWIsIHsNCgkJQmFzZSA9IHsNCgkJCVNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjApLA0KCQkJQXV0b21hdGljU2l6ZSA9IEVudW0uQXV0b21hdGljU2l6ZS5ZLA0KCQl9LA0KCQlCdXR0b25zID0gew0KCQkJew0KCQkJCVRleHQgPSAiQ2xlYXIgbG9ncyIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIFRhYiA9IEFjdGl2ZURhdGEgYW5kIEFjdGl2ZURhdGEuVGFiIG9yIG5pbA0KDQoJCQkJCS0tLy8gUmVtb3ZlIHRoZSBSZW1vdGUgdGFiDQoJCQkJCWlmIFRhYiB0aGVuDQoJCQkJCQlJbmZvU2VsZWN0b3I6UmVtb3ZlVGFiKFRhYikNCgkJCQkJZW5kDQoNCgkJCQkJLS0vLyBDbGVhciBhbGwgbG9nIGVsZW1lbnRzDQoJCQkJCUFjdGl2ZURhdGEgPSBuaWwNCgkJCQkJc2VsZjpDbGVhckxvZ3MoKQ0KCQkJCWVuZCwNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJDbGVhciBibG9ja3MiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlQcm9jZXNzOlVwZGF0ZUFsbFJlbW90ZURhdGEoIkJsb2NrZWQiLCBmYWxzZSkNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiQ2xlYXIgZXhjbHVkZXMiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlQcm9jZXNzOlVwZGF0ZUFsbFJlbW90ZURhdGEoIkV4Y2x1ZGVkIiwgZmFsc2UpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkNvcHkgRGlzY29yZCIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCXNlbGY6U2V0Q2xpcGJvYXJkKCJodHRwczovL2Rpc2NvcmQuZ2cvczluZ21VRFdnYiIpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkNvcHkgR2l0aHViIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJc2VsZjpTZXRDbGlwYm9hcmQoImh0dHBzOi8vZ2l0aHViLmNvbS9kZXB0aHNvL1NpZ21hLVNweSIpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkVkaXQgU3Bvb2ZzIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJc2VsZjpFZGl0RmlsZSgiUmV0dXJuIHNwb29mcy5sdWEiLCB0cnVlLCBmdW5jdGlvbihXaW5kb3csIENvbnRlbnQ6IHN0cmluZykNCgkJCQkJCVdpbmRvdzpDbG9zZSgpDQoJCQkJCQlDb21tQ2hhbm5lbDpGaXJlKCJVcGRhdGVTcG9vZnMiLCBDb250ZW50KQ0KCQkJCQllbmQpDQoJCQkJZW5kLA0KCQkJfQ0KCQl9DQoJfSkNCg0KCS0tLy8gRmxhZyBvcHRpb25zDQoJT3B0aW9uc1RhYjpTZXBhcmF0b3Ioe1RleHQ9IlNldHRpbmdzIn0pDQoJc2VsZjpDcmVhdGVFbGVtZW50cyhPcHRpb25zVGFiLCBGbGFnczpHZXRGbGFncygpKQ0KDQoJc2VsZjpBZGREZXRhaWxzU2VjdGlvbihPcHRpb25zVGFiKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOkFkZERldGFpbHNTZWN0aW9uKE9wdGlvbnNUYWIpDQoJT3B0aW9uc1RhYjpTZXBhcmF0b3Ioe1RleHQ9IkluZm9ybWF0aW9uIn0pDQoJT3B0aW9uc1RhYjpCdWxsZXRUZXh0KHsNCgkJUm93cyA9IHsNCgkJCSJTaWdtYSBzcHkgLSBXcml0dGVuIGJ5IGRlcHNvISIsDQoJCQkiTGlicmFyaWVzOiBSb2Jsb3gtUGFyc2VyLCBEZWFyLVJlR3VpIiwNCgkJCSJUaGFuayB5b3UgdG8gc3luIGZvciB5b3VyIHN1Z2dlc3Rpb25zIGFuZCB0ZXN0aW5nIg0KCQl9DQoJfSkNCmVuZA0KDQpsb2NhbCBmdW5jdGlvbiBNYWtlQWN0aXZlRGF0YUNhbGxiYWNrKE5hbWU6IHN0cmluZykNCglyZXR1cm4gZnVuY3Rpb24oLi4uKQ0KCQlpZiBub3QgQWN0aXZlRGF0YSB0aGVuIHJldHVybiBlbmQNCgkJcmV0dXJuIEFjdGl2ZURhdGFbTmFtZV0oQWN0aXZlRGF0YSwgLi4uKQ0KCWVuZA0KZW5kDQoNCmZ1bmN0aW9uIFVpOk1ha2VFZGl0b3JUYWIoSW5mb1NlbGVjdG9yKQ0KCWxvY2FsIERlZmF1bHQgPSBzZWxmLkRlZmF1bHRFZGl0b3JDb250ZW50DQoJbG9jYWwgV2luZG93ID0gc2VsZi5XaW5kb3cNCg0KCWxvY2FsIFN5bnRheENvbG9ycyA9IENvbmZpZy5TeW50YXhDb2xvcnMNCg0KCS0tLy8gQ3JlYXRlIHRhYg0KCWxvY2FsIEVkaXRvclRhYiA9IEluZm9TZWxlY3RvcjpDcmVhdGVUYWIoew0KCQlOYW1lID0gIkVkaXRvciINCgl9KQ0KDQoJLS0vLyBJREUNCglsb2NhbCBDb2RlRWRpdG9yID0gRWRpdG9yVGFiOkNvZGVFZGl0b3Ioew0KCQlGaWxsID0gdHJ1ZSwNCgkJRWRpdGFibGUgPSB0cnVlLA0KCQlGb250U2l6ZSA9IDEzLA0KCQlDb2xvcnMgPSBTeW50YXhDb2xvcnMsDQoJCUZvbnRGYWNlID0gVGV4dEZvbnQsDQoJCVRleHQgPSBEZWZhdWx0DQoJfSkNCg0KCS0tLy8gQnV0dG9ucw0KCWxvY2FsIEJ1dHRvbnNSb3cgPSBFZGl0b3JUYWI6Um93KCkNCglzZWxmOkNyZWF0ZUJ1dHRvbnMoQnV0dG9uc1Jvdywgew0KCQlOb1RhYmxlID0gdHJ1ZSwNCgkJQnV0dG9ucyA9IHsNCgkJCXsNCgkJCQlUZXh0ID0gIkNvcHkiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlsb2NhbCBTY3JpcHQgPSBDb2RlRWRpdG9yOkdldFRleHQoKQ0KCQkJCQlzZWxmOlNldENsaXBib2FyZChTY3JpcHQpDQoJCQkJZW5kDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiUnVuIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJbG9jYWwgU2NyaXB0ID0gQ29kZUVkaXRvcjpHZXRUZXh0KCkNCgkJCQkJbG9jYWwgRnVuYywgRXJyb3IgPSBsb2Fkc3RyaW5nKFNjcmlwdCwgIlNpZ21hU3B5LVVTRVJTQ1JJUFQiKQ0KDQoJCQkJCS0tLy8gU3ludGF4IGNoZWNrDQoJCQkJCWlmIG5vdCBGdW5jIHRoZW4NCgkJCQkJCXNlbGY6U2hvd01vZGFsKHsiRXJyb3IgcnVubmluZyBzY3JpcHQhXG4iLCBFcnJvcn0pDQoJCQkJCQlyZXR1cm4NCgkJCQkJZW5kDQoNCgkJCQkJRnVuYygpDQoJCQkJZW5kDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiR2V0IHJldHVybiIsDQoJCQkJQ2FsbGJhY2sgPSBNYWtlQWN0aXZlRGF0YUNhbGxiYWNrKCJHZXRSZXR1cm4iKQ0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIlNjcmlwdCIsDQoJCQkJQ2FsbGJhY2sgPSBNYWtlQWN0aXZlRGF0YUNhbGxiYWNrKCJTY3JpcHRPcHRpb25zIikNCgkJCX0sDQoJCQl7DQoJCQkJVGV4dCA9ICJCdWlsZCIsDQoJCQkJQ2FsbGJhY2sgPSBNYWtlQWN0aXZlRGF0YUNhbGxiYWNrKCJCdWlsZFNjcmlwdCIpDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiUG9wLW91dCIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIFNjcmlwdCA9IENvZGVFZGl0b3I6R2V0VGV4dCgpDQoJCQkJCWxvY2FsIFRpbGUgPSBBY3RpdmVEYXRhIGFuZCBBY3RpdmVEYXRhLlRhc2sgb3IgIlNpZ21hIFNweSINCgkJCQkJc2VsZjpNYWtlRWRpdG9yUG9wb3V0V2luZG93KFNjcmlwdCwgew0KCQkJCQkJVGl0bGUgPSBUaWxlDQoJCQkJCX0pDQoJCQkJZW5kDQoJCQl9LA0KCQl9DQoJfSkNCgkNCglzZWxmLkNvZGVFZGl0b3IgPSBDb2RlRWRpdG9yDQplbmQNCg0KZnVuY3Rpb24gVWk6U2hvdWxkRm9jdXMoVGFiKTogYm9vbGVhbg0KCWxvY2FsIEluZm9TZWxlY3RvciA9IHNlbGYuSW5mb1NlbGVjdG9yDQoJbG9jYWwgQWN0aXZlVGFiID0gSW5mb1NlbGVjdG9yLkFjdGl2ZVRhYg0KDQoJLS0vLyBJZiB0aGVyZSBpcyBhbiBlbXB0eSB0YWINCglpZiBub3QgQWN0aXZlVGFiIHRoZW4NCgkJcmV0dXJuIHRydWUNCgllbmQNCg0KCXJldHVybiBJbmZvU2VsZWN0b3I6Q29tcGFyZVRhYnMoQWN0aXZlVGFiLCBUYWIpDQplbmQNCg0KZnVuY3Rpb24gVWk6TWFrZUVkaXRvclBvcG91dFdpbmRvdyhDb250ZW50OiBzdHJpbmcsIFdpbmRvd0NvbmZpZzogdGFibGUpDQoJbG9jYWwgV2luZG93ID0gc2VsZjpDcmVhdGVXaW5kb3coV2luZG93Q29uZmlnKQ0KCWxvY2FsIEJ1dHRvbnMgPSBXaW5kb3dDb25maWcuQnV0dG9ucyBvciB7fQ0KDQoJbG9jYWwgQ29kZUVkaXRvciA9IFdpbmRvdzpDb2RlRWRpdG9yKHsNCgkJVGV4dCA9IENvbnRlbnQsDQoJCUVkaXRhYmxlID0gdHJ1ZSwNCgkJRmlsbCA9IHRydWUsDQoJCUZvbnRTaXplID0gMTMsDQoJCUNvbG9ycyA9IFN5bnRheENvbG9ycywNCgkJRm9udEZhY2UgPSBUZXh0Rm9udA0KCX0pDQoNCgktLS8vIERlZmF1bHQgYnV0dG9ucw0KCXRhYmxlLmluc2VydChCdXR0b25zLCB7DQoJCVRleHQgPSAiQ29weSIsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJbG9jYWwgU2NyaXB0ID0gQ29kZUVkaXRvcjpHZXRUZXh0KCkNCgkJCXNlbGY6U2V0Q2xpcGJvYXJkKFNjcmlwdCkNCgkJZW5kDQoJfSkNCg0KCS0tLy8gQnV0dG9ucw0KCWxvY2FsIEJ1dHRvbnNSb3cgPSBXaW5kb3c6Um93KCkNCglzZWxmOkNyZWF0ZUJ1dHRvbnMoQnV0dG9uc1Jvdywgew0KCQlOb1RhYmxlID0gdHJ1ZSwNCgkJQnV0dG9ucyA9IEJ1dHRvbnMNCgl9KQ0KDQoJV2luZG93OkNlbnRlcigpDQoJcmV0dXJuIENvZGVFZGl0b3INCmVuZA0KDQpmdW5jdGlvbiBVaTpFZGl0RmlsZShGaWxlUGF0aDogc3RyaW5nLCBJbkZvbGRlcjogYm9vbGVhbiwgT25TYXZlRnVuYzogKCh0YWJsZSwgc3RyaW5nKSAtPiBuaWwpPykNCglsb2NhbCBGb2xkZXIgPSBGaWxlcy5Gb2xkZXJOYW1lDQoNCgktLS8vIFJlbGF0aXZlIHRvIFNpZ21hIFNweSBmb2xkZXINCglpZiBJbkZvbGRlciB0aGVuDQoJCUZpbGVQYXRoID0gYHtGb2xkZXJ9L3tGaWxlUGF0aH1gDQoJZW5kDQoNCgktLS8vIEdldCBmaWxlIGNvbnRlbnQNCglsb2NhbCBDb250ZW50ID0gcmVhZGZpbGUoRmlsZVBhdGgpDQoJQ29udGVudCA9IENvbnRlbnQ6Z3N1YigiXHJcbiIsICJcbiIpDQoNCglsb2NhbCBDb2RlRWRpdG9yDQoJbG9jYWwgQnV0dG9ucyA9IHsNCgkJew0KCQkJVGV4dCA9ICJTYXZlIiwNCgkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCWxvY2FsIFNjcmlwdCA9IENvZGVFZGl0b3I6R2V0VGV4dCgpDQoJCQkJbG9jYWwgU3VjY2VzcywgRXJyb3IgPSBsb2Fkc3RyaW5nKFNjcmlwdCwgIlNpZ21hU3B5LUVkaXRvciIpDQoNCgkJCQktLS8vIFN5bnRheCBjaGVjaw0KCQkJCWlmIG5vdCBTdWNjZXNzIHRoZW4NCgkJCQkJc2VsZjpTaG93TW9kYWwoeyJFcnJvciBzYXZpbmcgZmlsZSFcbiIsIEVycm9yfSkNCgkJCQkJcmV0dXJuDQoJCQkJZW5kDQoJCQkJDQoJCQkJLS0vLyBTYXZlIGNvbnRlbnRzDQoJCQkJd3JpdGVmaWxlKEZpbGVQYXRoLCBTY3JpcHQpDQoNCgkJCQktLS8vIEludm9rZSBvbiBzYXZlIGZ1bmN0aW9uDQoJCQkJaWYgT25TYXZlRnVuYyB0aGVuDQoJCQkJCU9uU2F2ZUZ1bmMoV2luZG93LCBTY3JpcHQpDQoJCQkJZW5kDQoJCQllbmQNCgkJfQ0KCX0NCg0KCS0tLy8gQ3JlYXRlIEVkaXRvciBXaW5kb3cNCglDb2RlRWRpdG9yID0gc2VsZjpNYWtlRWRpdG9yUG9wb3V0V2luZG93KENvbnRlbnQsIHsNCgkJVGl0bGUgPSBgRWRpdGluZzoge0ZpbGVQYXRofWAsDQoJCUJ1dHRvbnMgPSBCdXR0b25zDQoJfSkNCmVuZA0KDQp0eXBlIE1lbnVPcHRpb25zID0gew0KCVtzdHJpbmddOiAoR3VpQnV0dG9uLCAuLi5hbnkpIC0+IG5pbA0KfQ0KZnVuY3Rpb24gVWk6TWFrZUJ1dHRvbk1lbnUoQnV0dG9uOiBJbnN0YW5jZSwgVW5wYWNrOiB0YWJsZSwgT3B0aW9uczogTWVudU9wdGlvbnMpDQoJbG9jYWwgV2luZG93ID0gc2VsZi5XaW5kb3cNCglsb2NhbCBQb3B1cCA9IFdpbmRvdzpQb3B1cENhbnZhcyh7DQoJCVJlbGF0aXZlVG8gPSBCdXR0b24sDQoJCU1heFNpemVYID0gNTAwLA0KCX0pDQoNCgktLS8vIENyZWF0ZSBTZWxlY3RhYmxlcyBmb3Igc3RyaW5nLCBmdW5jdGlvbg0KCWZvciBOYW1lLCBGdW5jIGluIE9wdGlvbnMgZG8NCgkJIFBvcHVwOlNlbGVjdGFibGUoew0KCQkJVGV4dCA9IE5hbWUsDQoJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQlGdW5jKFByb2Nlc3M6VW5wYWNrKFVucGFjaykpDQoJCQllbmQsDQoJCX0pDQoJZW5kDQplbmQNCg0KZnVuY3Rpb24gVWk6UmVtb3ZlUHJldmlvdXNUYWIoVGl0bGU6IHN0cmluZyk6IGJvb2xlYW4NCgktLS8vIE5vIHByZXZpb3VzIHRhYnMNCglpZiBub3QgQWN0aXZlRGF0YSB0aGVuIA0KCQlyZXR1cm4gZmFsc2UgDQoJZW5kDQoNCgktLS8vIFRhYlNlbGVjdG9yDQoJbG9jYWwgSW5mb1NlbGVjdG9yID0gc2VsZi5JbmZvU2VsZWN0b3INCg0KCS0tLy8gUHJldmlvdXMgZWxlbWVudHMNCglsb2NhbCBQcmV2aW91c1RhYiA9IEFjdGl2ZURhdGEuVGFiDQoJbG9jYWwgUHJldmlvdXNTZWxlY3RhYmxlID0gQWN0aXZlRGF0YS5TZWxlY3RhYmxlDQoNCgktLS8vIFJlbW92ZSBwcmV2aW91cyB0YWIgYW5kIHNldCBzZWxlY3RhYmxlIGZvY3VzDQoJbG9jYWwgVGFiRm9jdXNlZCA9IHNlbGY6U2hvdWxkRm9jdXMoUHJldmlvdXNUYWIpDQoJSW5mb1NlbGVjdG9yOlJlbW92ZVRhYihQcmV2aW91c1RhYikNCglQcmV2aW91c1NlbGVjdGFibGU6U2V0U2VsZWN0ZWQoZmFsc2UpDQoNCgktLS8vIENyZWF0ZSBuZXcgdGFiDQoJcmV0dXJuIFRhYkZvY3VzZWQNCmVuZA0KDQpmdW5jdGlvbiBVaTpNYWtlVGFibGVIZWFkZXJzKFRhYmxlLCBSb3dzOiB0YWJsZSkNCglsb2NhbCBIZWFkZXJSb3cgPSBUYWJsZTpIZWFkZXJSb3coKQ0KCWZvciBfLCBDYXRhZ29yeSBpbiBSb3dzIGRvDQoJCWxvY2FsIENvbHVtbiA9IEhlYWRlclJvdzpOZXh0Q29sdW1uKCkNCgkJQ29sdW1uOkxhYmVsKHtUZXh0PUNhdGFnb3J5fSkNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVaTpEZWNvbXBpbGUoRWRpdG9yOiB0YWJsZSwgU2NyaXB0OiBzY3JpcHQpDQoJbG9jYWwgSGVhZGVyID0gIi0tQk9PSUlJSSBUSElTIElTIFNPIFRVRkYgRkxJUFBZIFNLSUJJREkgQVVSQSAoU0lHTUEgU1BZKSINCglFZGl0b3I6U2V0VGV4dCgiLS1EZWNvbXBpbGluZy4uLiArOTk5OTk5OSBBVVJBIChtYW5nbyBwaG9uaykiKQ0KDQoJLS0vLyBEZWNvbXBpbGUgc2NyaXB0DQoJbG9jYWwgRGVjb21waWxlZCwgSXNFcnJvciA9IFByb2Nlc3M6RGVjb21waWxlKFNjcmlwdCkNCg0KCS0tLy8gQWRkIGhlYWRlciBmb3Igc3VjY2Vzc2Z1bCBkZWNvbXBpbGF0aW9ucw0KCWlmIG5vdCBJc0Vycm9yIHRoZW4NCgkJRGVjb21waWxlZCA9IGB7SGVhZGVyfVxue0RlY29tcGlsZWR9YA0KCWVuZA0KDQoJRWRpdG9yOlNldFRleHQoRGVjb21waWxlZCkNCmVuZA0KDQp0eXBlIERpc3BsYXlUYWJsZUNvbmZpZyA9IHsNCglSb3dzOiB0YWJsZSwNCglGbGFnczogdGFibGU/LA0KCVRvRGlzcGxheTogdGFibGUsDQoJVGFibGU6IHRhYmxlDQp9DQpmdW5jdGlvbiBVaTpEaXNwbGF5VGFibGUoUGFyZW50LCBDb25maWc6IERpc3BsYXlUYWJsZUNvbmZpZyk6IHRhYmxlDQoJLS0vLyBDb25maWd1cmF0aW9uDQoJbG9jYWwgUm93cyA9IENvbmZpZy5Sb3dzDQoJbG9jYWwgRmxhZ3MgPSBDb25maWcuRmxhZ3MNCglsb2NhbCBEYXRhVGFibGUgPSBDb25maWcuVGFibGUNCglsb2NhbCBUb0Rpc3BsYXkgPSBDb25maWcuVG9EaXNwbGF5DQoNCglGbGFncy5NYXhDb2x1bW5zID0gI1Jvd3MNCg0KCS0tLy8gQ3JlYXRlIHRhYmxlDQoJbG9jYWwgVGFibGUgPSBQYXJlbnQ6VGFibGUoRmxhZ3MpDQoNCgktLS8vIFRhYmxlIGhlYWRlcnMNCglzZWxmOk1ha2VUYWJsZUhlYWRlcnMoVGFibGUsIFJvd3MpDQoNCgktLS8vIFRhYmxlIGxheW91dA0KCWZvciBSb3dJbmRleCwgTmFtZSBpbiBUb0Rpc3BsYXkgZG8NCgkJbG9jYWwgUm93ID0gVGFibGU6Um93KCkNCgkJDQoJCS0tLy8gQ3JlYXRlIENvbHVtbnMNCgkJZm9yIENvdW50LCBDYXRhZ29yeSBpbiBSb3dzIGRvDQoJCQlsb2NhbCBDb2x1bW4gPSBSb3c6TmV4dENvbHVtbigpDQoJCQkNCgkJCS0tLy8gVmFsdWUgdGV4dA0KCQkJbG9jYWwgVmFsdWUgPSBDYXRhZ29yeSA9PSAiTmFtZSIgYW5kIE5hbWUgb3IgRGF0YVRhYmxlW05hbWVdDQoJCQlpZiBub3QgVmFsdWUgdGhlbiBjb250aW51ZSBlbmQNCg0KCQkJLS0vLyBDcmVhdGUgZmlsdGVyZWQgbGFiZWwNCgkJCWxvY2FsIFN0cmluZyA9IHNlbGY6RmlsdGVyTmFtZShge1ZhbHVlfWAsIDE1MCkNCgkJCUNvbHVtbjpMYWJlbCh7VGV4dD1TdHJpbmd9KQ0KCQllbmQNCgllbmQNCg0KCXJldHVybiBUYWJsZQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlNldEZvY3VzZWRSZW1vdGUoRGF0YSkNCgktLS8vIFVucGFjayByZW1vdGUgZGF0YQ0KCWxvY2FsIFJlbW90ZSA9IERhdGEuUmVtb3RlDQoJbG9jYWwgTWV0aG9kID0gRGF0YS5NZXRob2QNCglsb2NhbCBJc1JlY2VpdmUgPSBEYXRhLklzUmVjZWl2ZQ0KCWxvY2FsIFNjcmlwdCA9IERhdGEuQ2FsbGluZ1NjcmlwdA0KCWxvY2FsIFNvdXJjZVNjcmlwdCA9IERhdGEuU291cmNlU2NyaXB0DQoJbG9jYWwgQ2xhc3NEYXRhID0gRGF0YS5DbGFzc0RhdGENCglsb2NhbCBIZWFkZXJEYXRhID0gRGF0YS5IZWFkZXJEYXRhDQoJbG9jYWwgVmFsdWVTd2FwcyA9IERhdGEuVmFsdWVTd2Fwcw0KCWxvY2FsIEFyZ3MgPSBEYXRhLkFyZ3MNCglsb2NhbCBJZCA9IERhdGEuSWQNCg0KCS0tLy8gRmxhZ3MNCglsb2NhbCBUYWJsZUFyZ3MgPSBGbGFnczpHZXRGbGFnVmFsdWUoIlRhYmxlQXJncyIpDQoJbG9jYWwgTm9WYXJpYWJsZXMgPSBGbGFnczpHZXRGbGFnVmFsdWUoIk5vVmFyaWFibGVzIikNCg0KCS0tLy8gVW5wYWNrIGluZm8NCglsb2NhbCBSZW1vdGVEYXRhID0gUHJvY2VzczpHZXRSZW1vdGVEYXRhKElkKQ0KCWxvY2FsIElzUmVtb3RlRnVuY3Rpb24gPSBDbGFzc0RhdGEuSXNSZW1vdGVGdW5jdGlvbg0KCWxvY2FsIFJlbW90ZU5hbWUgPSBzZWxmOkZpbHRlck5hbWUoYHtSZW1vdGV9YCwgNTApDQoNCgktLS8vIFVJIGRhdGENCglsb2NhbCBDb2RlRWRpdG9yID0gc2VsZi5Db2RlRWRpdG9yDQoJbG9jYWwgVG9EaXNwbGF5ID0gc2VsZi5EaXNwbGF5UmVtb3RlSW5mbw0KCWxvY2FsIEluZm9TZWxlY3RvciA9IHNlbGYuSW5mb1NlbGVjdG9yDQoNCglsb2NhbCBUYWJGb2N1c2VkID0gc2VsZjpSZW1vdmVQcmV2aW91c1RhYigpDQoJbG9jYWwgVGFiID0gSW5mb1NlbGVjdG9yOkNyZWF0ZVRhYih7DQoJCU5hbWUgPSBzZWxmOkZpbHRlck5hbWUoYFJlbW90ZToge1JlbW90ZU5hbWV9YCwgNTApLA0KCQlGb2N1c2VkID0gVGFiRm9jdXNlZA0KCX0pDQoNCgktLS8vIENyZWF0ZSBuZXcgcGFyc2VyDQoJbG9jYWwgTW9kdWxlID0gR2VuZXJhdGlvbjpOZXdQYXJzZXIoew0KCQlOb1ZhcmlhYmxlcyA9IE5vVmFyaWFibGVzDQoJfSkNCglsb2NhbCBQYXJzZXIgPSBNb2R1bGUuUGFyc2VyDQoJbG9jYWwgRm9ybWF0dGVyID0gTW9kdWxlLkZvcm1hdHRlcg0KCUZvcm1hdHRlcjpTZXRWYWx1ZVN3YXBzKFZhbHVlU3dhcHMpDQoNCgktLS8vIFNldCB0aGlzIGxvZyB0byBiZSBzZWxlY3RlZA0KCUFjdGl2ZURhdGEgPSBEYXRhDQoJRGF0YS5UYWIgPSBUYWINCglEYXRhLlNlbGVjdGFibGU6U2V0U2VsZWN0ZWQodHJ1ZSkNCg0KCWxvY2FsIGZ1bmN0aW9uIFNldElERVRleHQoQ29udGVudDogc3RyaW5nLCBUYXNrOiBzdHJpbmcpDQoJCURhdGEuVGFzayA9IFRhc2sgb3IgIlNpZ21hIFNweSINCgkJQ29kZUVkaXRvcjpTZXRUZXh0KENvbnRlbnQpDQoJZW5kDQoJbG9jYWwgZnVuY3Rpb24gRGF0YUNvbm5lY3Rpb24oTmFtZSwgLi4uKQ0KCQlsb2NhbCBBcmdzID0gey4uLn0NCgkJcmV0dXJuIGZ1bmN0aW9uKCkNCgkJCXJldHVybiBEYXRhW05hbWVdKERhdGEsIFByb2Nlc3M6VW5wYWNrKEFyZ3MpKQ0KCQllbmQNCgllbmQNCglsb2NhbCBmdW5jdGlvbiBTY3JpcHRDaGVjayhTY3JpcHQsIE5vTWlzc2luZ0NoZWNrOiBib29sZWFuKTogYm9vbGVhbg0KCQktLS8vIFJlamVjdCBjbGllbnQgZXZlbnRzDQoJCWlmIElzUmVjZWl2ZSB0aGVuIA0KCQkJVWk6U2hvd01vZGFsKHsNCgkJCQkiUmVjaWV2ZXMgZG8gbm90IGhhdmUgYSBzY3JpcHQgYmVjYXVzZSBpdCdzIGEgQ29ubmVjdGlvbiINCgkJCX0pDQoJCQlyZXR1cm4gDQoJCWVuZA0KDQoJCS0tLy8gQ2hlY2sgaWYgc2NyaXB0IGV4aXN0cw0KCQlpZiBub3QgU2NyaXB0IGFuZCBub3QgTm9NaXNzaW5nQ2hlY2sgdGhlbiANCgkJCVVpOlNob3dNb2RhbCh7IlRoZSBTY3JpcHQgaGFzIGJlZW4gZGVzdHJveWVkIGJ5IHRoZSBnYW1lICgtOTk5OTk5OSBBVVJBKSJ9KQ0KCQkJcmV0dXJuDQoJCWVuZA0KDQoJCXJldHVybiB0cnVlDQoJZW5kDQoNCgktLS8vIEZ1bmN0aW9ucw0KCWZ1bmN0aW9uIERhdGE6U2NyaXB0T3B0aW9ucyhCdXR0b246IEd1aUJ1dHRvbikNCgkJVWk6TWFrZUJ1dHRvbk1lbnUoQnV0dG9uLCB7c2VsZn0sIHsNCgkJCVsiQ2FsbGVyIEluZm8iXSA9IERhdGFDb25uZWN0aW9uKCJHZW5lcmF0ZUluZm8iKSwNCgkJCVsiRGVjb21waWxlIl0gPSBEYXRhQ29ubmVjdGlvbigiRGVjb21waWxlIiwgIlNvdXJjZVNjcmlwdCIpLA0KCQkJWyJEZWNvbXBpbGUgQ2FsbGluZyJdID0gRGF0YUNvbm5lY3Rpb24oIkRlY29tcGlsZSIsICJDYWxsaW5nU2NyaXB0IiksDQoJCQlbIlJlcGVhdCBDYWxsIl0gPSBEYXRhQ29ubmVjdGlvbigiUmVwZWF0Q2FsbCIpLA0KCQkJWyJTYXZlIEJ5dGVjb2RlIl0gPSBEYXRhQ29ubmVjdGlvbigiU2F2ZUJ5dGVjb2RlIiksDQoJCX0pDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpCdWlsZFNjcmlwdChCdXR0b246IEd1aUJ1dHRvbikNCgkJVWk6TWFrZUJ1dHRvbk1lbnUoQnV0dG9uLCB7c2VsZn0sIHsNCgkJCVsiQ2FsbCBSZW1vdGUiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIlJlbW90ZSIpLA0KCQkJWyJCbG9jayBSZW1vdGUiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIkJsb2NrIiksDQoJCQlbIlJlcGVhdCBGb3IiXSA9IERhdGFDb25uZWN0aW9uKCJNYWtlU2NyaXB0IiwgIlJlcGVhdCIpLA0KCQkJWyJTcGFtIFJlbW90ZSJdID0gRGF0YUNvbm5lY3Rpb24oIk1ha2VTY3JpcHQiLCAiU3BhbSIpDQoJCX0pDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpTYXZlQnl0ZWNvZGUoKQ0KCQktLS8vIFByb2JsZW0gY2hlY2sNCgkJaWYgbm90IFNjcmlwdENoZWNrKFNjcmlwdCwgdHJ1ZSkgdGhlbiByZXR1cm4gZW5kDQoNCgkJLS0vLyBnZXRzY3JpcHRieXRlY29kZQ0KICAgIAlsb2NhbCBTdWNjZXNzLCBCeXRlY29kZSA9IHBjYWxsKGdldHNjcmlwdGJ5dGVjb2RlLCBTY3JpcHQpDQoJCWlmIG5vdCBTdWNjZXNzIHRoZW4NCgkJCVVpOlNob3dNb2RhbCh7IkZhaWxlZCB0byBnZXQgU2NyaXB0ZSBieXRlY29kZSAoLTk5OTk5OTkgQVVSQSkifSkNCgkJCXJldHVybg0KCQllbmQNCg0KCQktLS8vIFNhdmUgZmlsZQ0KCQlsb2NhbCBQYXRoQmFzZSA9IGB7U2NyaXB0fSAlcy50eHRgDQoJCWxvY2FsIEZpbGVQYXRoID0gR2VuZXJhdGlvbjpUaW1lU3RhbXBGaWxlKFBhdGhCYXNlKQ0KCQl3cml0ZWZpbGUoRmlsZVBhdGgsIEJ5dGVjb2RlKQ0KDQoJCVVpOlNob3dNb2RhbCh7IlNhdmVkIGJ5dGVjb2RlIHRvIiwgRmlsZVBhdGh9KQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6TWFrZVNjcmlwdChTY3JpcHRUeXBlOiBzdHJpbmcpDQoJCWxvY2FsIFNjcmlwdCA9IEdlbmVyYXRpb246UmVtb3RlU2NyaXB0KE1vZHVsZSwgc2VsZiwgU2NyaXB0VHlwZSkNCgkJU2V0SURFVGV4dChTY3JpcHQsIGBFZGl0aW5nOiB7UmVtb3RlTmFtZX0ubHVhYCkNCgllbmQNCglmdW5jdGlvbiBEYXRhOlJlcGVhdENhbGwoKQ0KCQlsb2NhbCBTaWduYWwgPSBIb29rOkluZGV4KFJlbW90ZSwgTWV0aG9kKQ0KDQoJCWlmIElzUmVjZWl2ZSB0aGVuDQoJCQlmaXJlc2lnbmFsKFNpZ25hbCwgUHJvY2VzczpVbnBhY2soQXJncykpDQoJCWVsc2UNCgkJCVNpZ25hbChSZW1vdGUsIFByb2Nlc3M6VW5wYWNrKEFyZ3MpKQ0KCQllbmQNCgllbmQNCglmdW5jdGlvbiBEYXRhOkdldFJldHVybigpDQoJCWxvY2FsIFJldHVyblZhbHVlcyA9IHNlbGYuUmV0dXJuVmFsdWVzDQoNCgkJLS0vLyBFcnJvciBtZXNzYWdlcw0KCQlpZiBub3QgSXNSZW1vdGVGdW5jdGlvbiB0aGVuDQoJCQlVaTpTaG93TW9kYWwoeyJUaGUgUmVtb3RlIGlzIG5vdCBhIFJlbW90ZSBGdW5jdGlvbiAoLTk5OTk5OTkgQVVSQSkifSkNCgkJCXJldHVybg0KCQllbmQNCgkJaWYgbm90IFJldHVyblZhbHVlcyB0aGVuDQoJCQlVaTpTaG93TW9kYWwoeyJObyByZXR1cm4gdmFsdWVzICgtOTk5OTk5OSBBVVJBKSJ9KQ0KCQkJcmV0dXJuDQoJCWVuZA0KDQoJCS0tLy8gR2VuZXJhdGUgc2NyaXB0DQoJCWxvY2FsIFNjcmlwdCA9IEdlbmVyYXRpb246VGFibGVTY3JpcHQoTW9kdWxlLCBSZXR1cm5WYWx1ZXMpDQoJCVNldElERVRleHQoU2NyaXB0LCBgUmV0dXJuIFZhbHVlcyBmb3I6IHtSZW1vdGVOYW1lfWApDQoJZW5kDQoJZnVuY3Rpb24gRGF0YTpHZW5lcmF0ZUluZm8oKQ0KCQktLS8vIFByb2JsZW0gY2hlY2sNCgkJaWYgbm90IFNjcmlwdENoZWNrKG5pbCwgdHJ1ZSkgdGhlbiByZXR1cm4gZW5kDQoNCgkJLS0vLyBHZW5lcmF0ZSBzY3JpcHQNCgkJbG9jYWwgU2NyaXB0ID0gR2VuZXJhdGlvbjpBZHZhbmNlZEluZm8oTW9kdWxlLCBzZWxmKQ0KCQlTZXRJREVUZXh0KFNjcmlwdCwgYEFkdmFuY2VkIEluZm8gZm9yOiB7UmVtb3RlTmFtZX1gKQ0KCWVuZA0KCWZ1bmN0aW9uIERhdGE6RGVjb21waWxlKFdoaWNoU2NyaXB0OiBzdHJpbmcpDQoJCWxvY2FsIERlY29tcGlsZVBvcG91dCA9IEZsYWdzOkdldEZsYWdWYWx1ZSgiRGVjb21waWxlUG9wb3V0IikNCgkJbG9jYWwgVG9EZWNvbXBpbGUgPSBEYXRhW1doaWNoU2NyaXB0XQ0KCQlsb2NhbCBFZGl0b3IgPSBDb2RlRWRpdG9yDQoNCgkJLS0vLyBQcm9ibGVtIGNoZWNrDQoJCWlmIG5vdCBTY3JpcHRDaGVjayhUb0RlY29tcGlsZSwgdHJ1ZSkgdGhlbiByZXR1cm4gZW5kDQoNCgkJbG9jYWwgVGFzayA9IFVpOkZpbHRlck5hbWUoYFZpZXdpbmc6IHtUb0RlY29tcGlsZX0ubHVhYCwgMjAwKQ0KCQkNCgkJLS0vLyBBdXRvbWF0aWNhbGx5IFBvcC1vdXQgdGhlIGVkaXRvciBmb3IgZGVjb21waWxpbmcgaWYgZW5hYmxlZA0KCQlpZiBEZWNvbXBpbGVQb3BvdXQgdGhlbg0KCQkJRWRpdG9yID0gVWk6TWFrZUVkaXRvclBvcG91dFdpbmRvdyhEZWNvbXBpbGVkLCB7DQoJCQkJVGl0bGUgPSBUYXNrDQoJCQl9KQ0KCQllbmQNCg0KCQlVaTpEZWNvbXBpbGUoRWRpdG9yLCBUb0RlY29tcGlsZSkNCgllbmQNCgkNCgktLS8vIFJlbW90ZU9wdGlvbnMNCglzZWxmOkNyZWF0ZU9wdGlvbnNGb3JEaWN0KFRhYiwgUmVtb3RlRGF0YSwgZnVuY3Rpb24oKQ0KCQlQcm9jZXNzOlVwZGF0ZVJlbW90ZURhdGEoSWQsIFJlbW90ZURhdGEpDQoJZW5kKQ0KDQoJLS0vLyBJbnN0YW5jZSBvcHRpb25zDQoJc2VsZjpDcmVhdGVCdXR0b25zKFRhYiwgew0KCQlCYXNlID0gew0KCQkJU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyMCksDQoJCQlBdXRvbWF0aWNTaXplID0gRW51bS5BdXRvbWF0aWNTaXplLlksDQoJCX0sDQoJCUJ1dHRvbnMgPSB7DQoJCQl7DQoJCQkJVGV4dCA9ICJDb3B5IHNjcmlwdCBwYXRoIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJU2V0Q2xpcGJvYXJkKFBhcnNlcjpNYWtlUGF0aFN0cmluZyh7DQoJCQkJCQlPYmplY3QgPSBTY3JpcHQsDQoJCQkJCQlOb1ZhcmlhYmxlcyA9IHRydWUNCgkJCQkJfSkpDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkNvcHkgcmVtb3RlIHBhdGgiLA0KCQkJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJCQlTZXRDbGlwYm9hcmQoUGFyc2VyOk1ha2VQYXRoU3RyaW5nKHsNCgkJCQkJCU9iamVjdCA9IFJlbW90ZSwNCgkJCQkJCU5vVmFyaWFibGVzID0gdHJ1ZQ0KCQkJCQl9KSkNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiUmVtb3ZlIGxvZyIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCUluZm9TZWxlY3RvcjpSZW1vdmVUYWIoVGFiKQ0KCQkJCQlEYXRhLlNlbGVjdGFibGU6UmVtb3ZlKCkNCgkJCQkJSGVhZGVyRGF0YTpSZW1vdmUoKQ0KCQkJCQlBY3RpdmVEYXRhID0gbmlsDQoJCQkJZW5kLA0KCQkJfSwNCgkJCXsNCgkJCQlUZXh0ID0gIkR1bXAgbG9ncyIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIExvZ3MgPSBIZWFkZXJEYXRhLkVudHJpZXMNCgkJCQkJbG9jYWwgRmlsZVBhdGggPSBHZW5lcmF0aW9uOkR1bXBMb2dzKExvZ3MpDQoJCQkJCXNlbGY6U2hvd01vZGFsKHsiU2F2ZWQgZHVtcCB0byIsIEZpbGVQYXRofSkNCgkJCQllbmQsDQoJCQl9LA0KCQkJew0KCQkJCVRleHQgPSAiVmlldyBDb25uZWN0aW9ucyIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbigpDQoJCQkJCWxvY2FsIE1ldGhvZCA9IENsYXNzRGF0YS5SZWNlaXZlWzFdDQoJCQkJCWxvY2FsIFNpZ25hbCA9IFJlbW90ZVtNZXRob2RdDQoJCQkJCXNlbGY6Vmlld0Nvbm5lY3Rpb25zKFJlbW90ZU5hbWUsIFNpZ25hbCkNCgkJCQllbmQsDQoJCQl9DQoJCX0NCgl9KQ0KDQoJLS0vLyBSZW1vdGUgaW5mb3JtYXRpb24gdGFibGUNCglzZWxmOkRpc3BsYXlUYWJsZShUYWIsIHsNCgkJUm93cyA9IHsiTmFtZSIsICJWYWx1ZSJ9LA0KCQlUYWJsZSA9IERhdGEsDQoJCVRvRGlzcGxheSA9IFRvRGlzcGxheSwNCgkJRmxhZ3MgPSB7DQoJCQlCb3JkZXIgPSB0cnVlLA0KCQkJUm93QmFja2dyb3VuZCA9IHRydWUsDQoJCQlNYXhDb2x1bW5zID0gMg0KCQl9DQoJfSkNCgkNCgktLS8vIEFyZ3VtZW50cyB0YWJsZSBzY3JpcHQNCglpZiBUYWJsZUFyZ3MgdGhlbg0KCQlsb2NhbCBQYXJzZWQgPSBHZW5lcmF0aW9uOlRhYmxlU2NyaXB0KE1vZHVsZSwgQXJncykNCgkJU2V0SURFVGV4dChQYXJzZWQpDQoJCXJldHVybg0KCWVuZA0KDQoJLS0vLyBSZW1vdGUgY2FsbCBzY3JpcHQNCglEYXRhOk1ha2VTY3JpcHQoIlJlbW90ZSIpDQplbmQNCg0KZnVuY3Rpb24gVWk6Vmlld0Nvbm5lY3Rpb25zKFJlbW90ZU5hbWU6IHN0cmluZywgU2lnbmFsOiBSQlhTY3JpcHRDb25uZWN0aW9uKQ0KCWxvY2FsIFdpbmRvdyA9IHNlbGY6Q3JlYXRlV2luZG93KHsNCgkJVGl0bGUgPSBgQ29ubmVjdGlvbnMgZm9yOiB7UmVtb3RlTmFtZX1gLA0KCQlTaXplID0gVURpbTIuZnJvbU9mZnNldCg0NTAsIDI1MCkNCgl9KQ0KDQoJbG9jYWwgVG9EaXNwbGF5ID0gew0KCQkiRW5hYmxlZCIsDQoJCSJMdWFDb25uZWN0aW9uIiwNCgkJIlNjcmlwdCINCgl9DQoNCgktLS8vIEdldCBGaWx0ZXJlZCBjb25uZWN0aW9ucw0KCWxvY2FsIENvbm5lY3Rpb25zID0gUHJvY2VzczpGaWx0ZXJDb25uZWN0aW9ucyhTaWduYWwsIFRvRGlzcGxheSkNCg0KCS0tLy8gVGFibGUNCglsb2NhbCBUYWJsZSA9IFdpbmRvdzpUYWJsZSh7DQoJCUJvcmRlciA9IHRydWUsDQoJCVJvd0JhY2tncm91bmQgPSB0cnVlLA0KCQlNYXhDb2x1bW5zID0gMw0KCX0pDQoNCglsb2NhbCBCdXR0b25zRm9yVmFsdWVzID0gew0KCQlbIlNjcmlwdCJdID0gZnVuY3Rpb24oUm93LCBWYWx1ZSkNCgkJCVJvdzpCdXR0b24oew0KCQkJCVRleHQgPSAiRGVjb21waWxlIiwNCgkJCQlDYWxsYmFjayA9IGZ1bmN0aW9uKCkNCgkJCQkJbG9jYWwgVGFzayA9IHNlbGY6RmlsdGVyTmFtZShgVmlld2luZzoge1ZhbHVlfS5sdWFgLCAyMDApDQoJCQkJCWxvY2FsIEVkaXRvciA9IHNlbGY6TWFrZUVkaXRvclBvcG91dFdpbmRvdyhuaWwsIHsNCgkJCQkJCVRpdGxlID0gVGFzaw0KCQkJCQl9KQ0KCQkJCQlzZWxmOkRlY29tcGlsZShFZGl0b3IsIFZhbHVlKQ0KCQkJCWVuZA0KCQkJfSkNCgkJZW5kLA0KCQlbIkVuYWJsZWQiXSA9IGZ1bmN0aW9uKFJvdywgRW5hYmxlZCwgQ29ubmVjdGlvbikNCgkJCVJvdzpCdXR0b24oew0KCQkJCVRleHQgPSBFbmFibGVkIGFuZCAiRGlzYWJsZSIgb3IgIkVuYWJsZSIsDQoJCQkJQ2FsbGJhY2sgPSBmdW5jdGlvbihzZWxmKQ0KCQkJCQlFbmFibGVkID0gbm90IEVuYWJsZWQNCgkJCQkJc2VsZi5UZXh0ID0gRW5hYmxlZCBhbmQgIkRpc2FibGUiIG9yICJFbmFibGUiDQoNCgkJCQkJLS0vLyBFbmFibGUgb3IgZGlzYWJsZSB0aGUgY29ubmVjdGlvbg0KCQkJCQlpZiBFbmFibGVkIHRoZW4NCgkJCQkJCUNvbm5lY3Rpb246RW5hYmxlKCkNCgkJCQkJZWxzZQ0KCQkJCQkJQ29ubmVjdGlvbjpEaXNhYmxlKCkNCgkJCQkJZW5kDQoJCQkJZW5kDQoJCQl9KQ0KCQllbmQNCgl9DQoNCgktLS8vIE1ha2UgaGVhZGVycyBvbiB0aGUgdGFibGUNCglzZWxmOk1ha2VUYWJsZUhlYWRlcnMoVGFibGUsIFRvRGlzcGxheSkNCg0KCWZvciBfLCBDb25uZWN0aW9uIGluIENvbm5lY3Rpb25zIGRvDQoJCWxvY2FsIFJvdyA9IFRhYmxlOlJvdygpDQoNCgkJZm9yIF8sIFByb3BlcnR5IGluIFRvRGlzcGxheSBkbw0KCQkJbG9jYWwgQ29sdW1uID0gUm93Ok5leHRDb2x1bW4oKQ0KCQkJbG9jYWwgQ29sdW1uUm93ID0gQ29sdW1uOlJvdygpDQoNCgkJCWxvY2FsIFZhbHVlID0gQ29ubmVjdGlvbltQcm9wZXJ0eV0NCgkJCWxvY2FsIENhbGxiYWNrID0gQnV0dG9uc0ZvclZhbHVlc1tQcm9wZXJ0eV0NCg0KCQkJLS0vLyBWYWx1ZSBsYWJlbA0KCQkJQ29sdW1uUm93OkxhYmVsKHtUZXh0PWB7VmFsdWV9YH0pDQoNCgkJCS0tLy8gQWRkIGJ1dHRvbnMNCgkJCWlmIENhbGxiYWNrIHRoZW4NCgkJCQlDYWxsYmFjayhDb2x1bW5Sb3csIFZhbHVlLCBDb25uZWN0aW9uKQ0KCQkJZW5kDQoJCWVuZA0KCWVuZA0KDQoJLS0vLyBDZW50ZXIgV2luZG93DQoJV2luZG93OkNlbnRlcigpDQplbmQNCg0KZnVuY3Rpb24gVWk6R2V0UmVtb3RlSGVhZGVyKERhdGE6IExvZykNCglsb2NhbCBMb2dMaW1pdCA9IHNlbGYuTG9nTGltaXQNCglsb2NhbCBMb2dzID0gc2VsZi5Mb2dzDQoJbG9jYWwgUmVtb3Rlc0xpc3QgPSBzZWxmLlJlbW90ZXNMaXN0DQoNCgktLS8vIFJlbW90ZSBpbmZvDQoJbG9jYWwgSWQgPSBEYXRhLklkDQoJbG9jYWwgUmVtb3RlID0gRGF0YS5SZW1vdGUNCglsb2NhbCBSZW1vdGVOYW1lID0gc2VsZjpGaWx0ZXJOYW1lKGB7UmVtb3RlfWAsIDMwKQ0KDQoJLS0vLyBOb1RyZWVOb2Rlcw0KCWxvY2FsIE5vVHJlZU5vZGVzID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJOb1RyZWVOb2RlcyIpDQoNCgktLS8vIENoZWNrIGZvciBleGlzdGluZyBUcmVlTm9kZQ0KCWxvY2FsIEV4aXN0aW5nID0gTG9nc1tJZF0NCglpZiBFeGlzdGluZyB0aGVuIHJldHVybiBFeGlzdGluZyBlbmQNCg0KCS0tLy8gSGVhZGVyIGRhdGENCglsb2NhbCBIZWFkZXJEYXRhID0gewkNCgkJTG9nQ291bnQgPSAwLA0KCQlEYXRhID0gRGF0YSwNCgkJRW50cmllcyA9IHt9DQoJfQ0KDQoJLS0vLyBJbmNyZW1lbnQgdHJlZW5vZGUgY291bnQNCglSZW1vdGVzQ291bnQgKz0gMQ0KDQoJLS0vLyBDcmVhdGUgbmV3IHRyZWVub2RlIGVsZW1lbnQNCglpZiBub3QgTm9UcmVlTm9kZXMgdGhlbg0KCQlIZWFkZXJEYXRhLlRyZWVOb2RlID0gUmVtb3Rlc0xpc3Q6VHJlZU5vZGUoew0KCQkJTGF5b3V0T3JkZXIgPSAtMSAqIFJlbW90ZXNDb3VudCwNCgkJCVRpdGxlID0gUmVtb3RlTmFtZQ0KCQl9KQ0KCWVuZA0KDQoJZnVuY3Rpb24gSGVhZGVyRGF0YTpDaGVja0xpbWl0KCkNCgkJbG9jYWwgRW50cmllcyA9IHNlbGYuRW50cmllcw0KCQlpZiAjRW50cmllcyA8IExvZ0xpbWl0IHRoZW4gcmV0dXJuIGVuZA0KCQkJDQoJCS0tLy8gR2V0IGFuZCByZW1vdmUgbGFzdCBlbGVtZW50DQoJCWxvY2FsIExvZyA9IHRhYmxlLnJlbW92ZShFbnRyaWVzLCAxKQ0KCQlMb2cuU2VsZWN0YWJsZTpSZW1vdmUoKQ0KCWVuZA0KDQoJZnVuY3Rpb24gSGVhZGVyRGF0YTpMb2dBZGRlZChEYXRhKQ0KCQktLS8vIEluY3JlbWVudCBsb2cgY291bnQNCgkJc2VsZi5Mb2dDb3VudCArPSAxDQoJCXNlbGY6Q2hlY2tMaW1pdCgpDQoNCgkJLS0vLyBBZGQgZW50cnkNCgkJbG9jYWwgRW50cmllcyA9IHNlbGYuRW50cmllcw0KCQl0YWJsZS5pbnNlcnQoRW50cmllcywgRGF0YSkNCgkJDQoJCXJldHVybiBzZWxmDQoJZW5kDQoNCglmdW5jdGlvbiBIZWFkZXJEYXRhOlJlbW92ZSgpDQoJCS0tLy8gUmVtb3ZlIFRyZWVOb2RlDQoJCWxvY2FsIFRyZWVOb2RlID0gc2VsZi5UcmVlTm9kZQ0KCQlpZiBUcmVlTm9kZSB0aGVuDQoJCQlUcmVlTm9kZTpSZW1vdmUoKQ0KCQllbmQNCg0KCQktLS8vIENsZWFyIHRhYmxlcyBmcm9tIG1lbW9yeQ0KCQlMb2dzW0lkXSA9IG5pbA0KCQl0YWJsZS5jbGVhcihIZWFkZXJEYXRhKQ0KCWVuZA0KDQoJTG9nc1tJZF0gPSBIZWFkZXJEYXRhDQoJcmV0dXJuIEhlYWRlckRhdGENCmVuZA0KDQpmdW5jdGlvbiBVaTpDbGVhckxvZ3MoKQ0KCWxvY2FsIExvZ3MgPSBzZWxmLkxvZ3MNCglsb2NhbCBSZW1vdGVzTGlzdCA9IHNlbGYuUmVtb3Rlc0xpc3QNCg0KCS0tLy8gQ2xlYXIgYWxsIGVsZW1lbnRzDQoJUmVtb3Rlc0NvdW50ID0gMA0KCVJlbW90ZXNMaXN0OkNsZWFyQ2hpbGRFbGVtZW50cygpDQoNCgktLS8vIENsZWFyIGxvZ3MgZnJvbSBtZW1vcnkNCgl0YWJsZS5jbGVhcihMb2dzKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlF1ZXVlTG9nKERhdGEpDQoJbG9jYWwgTG9nUXVldWUgPSBzZWxmLkxvZ1F1ZXVlDQogICAgdGFibGUuaW5zZXJ0KExvZ1F1ZXVlLCBEYXRhKQ0KZW5kDQoNCmZ1bmN0aW9uIFVpOlByb2Nlc3NMb2dRdWV1ZSgpDQoJbG9jYWwgUXVldWUgPSBzZWxmLkxvZ1F1ZXVlDQogICAgaWYgI1F1ZXVlIDw9IDAgdGhlbiByZXR1cm4gZW5kDQoNCgktLS8vIENyZWF0ZSBhIGxvZyBlbGVtZW50IGZvciBlYWNoIGluIHRoZSBRdWV1ZQ0KICAgIGZvciBJbmRleCwgRGF0YSBpbiBuZXh0LCBRdWV1ZSBkbw0KICAgICAgICBzZWxmOkNyZWF0ZUxvZyhEYXRhKQ0KICAgICAgICB0YWJsZS5yZW1vdmUoUXVldWUsIEluZGV4KQ0KICAgIGVuZA0KZW5kDQoNCmZ1bmN0aW9uIFVpOkJlZ2luTG9nU2VydmljZSgpDQoJY29yb3V0aW5lLndyYXAoZnVuY3Rpb24oKQ0KCQl3aGlsZSB0cnVlIGRvDQoJCQlzZWxmOlByb2Nlc3NMb2dRdWV1ZSgpDQoJCQl0YXNrLndhaXQoKQ0KCQllbmQNCgllbmQpKCkNCmVuZA0KDQpmdW5jdGlvbiBVaTpGaWx0ZXJOYW1lKE5hbWU6IHN0cmluZywgQ2hhcmFjdGVyTGltaXQ6IG51bWJlcj8pOiBzdHJpbmcNCglsb2NhbCBUcmltbWVkID0gTmFtZTpzdWIoMSwgQ2hhcmFjdGVyTGltaXQgb3IgMjApDQoJbG9jYWwgRmlsdHJlZCA9IFRyaW1tZWQ6Z3N1YigiW1xuXHJdIiwgIiIpDQoJRmlsdHJlZCA9IEdlbmVyYXRpb246TWFrZVByaW50YWJsZShGaWx0cmVkKQ0KDQoJcmV0dXJuIEZpbHRyZWQNCmVuZA0KDQpmdW5jdGlvbiBVaTpDcmVhdGVMb2coRGF0YTogTG9nKQ0KCS0tLy8gVW5wYWNrIGxvZyBkYXRhDQogICAgbG9jYWwgUmVtb3RlID0gRGF0YS5SZW1vdGUNCglsb2NhbCBNZXRob2QgPSBEYXRhLk1ldGhvZA0KICAgIGxvY2FsIEFyZ3MgPSBEYXRhLkFyZ3MNCiAgICBsb2NhbCBJc1JlY2VpdmUgPSBEYXRhLklzUmVjZWl2ZQ0KCWxvY2FsIElkID0gRGF0YS5JZA0KCWxvY2FsIFRpbWVzdGFtcCA9IERhdGEuVGltZXN0YW1wDQoJbG9jYWwgSXNFeHBsb2l0ID0gRGF0YS5Jc0V4cGxvaXQNCgkNCglsb2NhbCBJc05pbFBhcmVudCA9IEhvb2s6SW5kZXgoUmVtb3RlLCAiUGFyZW50IikgPT0gbmlsDQoJbG9jYWwgUmVtb3RlRGF0YSA9IFByb2Nlc3M6R2V0UmVtb3RlRGF0YShJZCkNCg0KCS0tLy8gUGF1c2VkDQoJbG9jYWwgUGF1c2VkID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJQYXVzZWQiKQ0KCWlmIFBhdXNlZCB0aGVuIHJldHVybiBlbmQNCg0KCS0tLy8gQ2hlY2sgY2FsbGVyIChJZ25vcmUgZXhwbG9pdCBjYWxscykNCglsb2NhbCBMb2dFeHBsb2l0ID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJMb2dFeHBsb2l0IikNCglpZiBub3QgTG9nRXhwbG9pdCBhbmQgSXNFeHBsb2l0IHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBJZ25vcmVOaWwNCglsb2NhbCBJZ25vcmVOaWwgPSBGbGFnczpHZXRGbGFnVmFsdWUoIklnbm9yZU5pbCIpDQoJaWYgSWdub3JlTmlsIGFuZCBJc05pbFBhcmVudCB0aGVuIHJldHVybiBlbmQNCg0KICAgIC0tLy8gTG9nUmVjaXZlcyBjaGVjaw0KCWxvY2FsIExvZ1JlY2l2ZXMgPSBGbGFnczpHZXRGbGFnVmFsdWUoIkxvZ1JlY2l2ZXMiKQ0KCWlmIG5vdCBMb2dSZWNpdmVzIGFuZCBJc1JlY2VpdmUgdGhlbiByZXR1cm4gZW5kDQoNCglsb2NhbCBTZWxlY3ROZXdlc3QgPSBGbGFnczpHZXRGbGFnVmFsdWUoIlNlbGVjdE5ld2VzdCIpDQoJbG9jYWwgTm9UcmVlTm9kZXMgPSBGbGFnczpHZXRGbGFnVmFsdWUoIk5vVHJlZU5vZGVzIikNCg0KICAgIC0tLy8gRXhjbHVkZWQgY2hlY2sNCiAgICBpZiBSZW1vdGVEYXRhLkV4Y2x1ZGVkIHRoZW4gcmV0dXJuIGVuZA0KDQoJLS0vLyBEZXNlcmlhbGl6ZSBhcmd1bWVudHMNCglBcmdzID0gQ29tbXVuaWNhdGlvbjpEZXNlcmlhbGl6ZVRhYmxlKEFyZ3MpDQoNCgktLS8vIERlZXAgY2xvbmUgZGF0YQ0KCWxvY2FsIENsb25lZEFyZ3MgPSBQcm9jZXNzOkRlZXBDbG9uZVRhYmxlKEFyZ3MpDQoJRGF0YS5BcmdzID0gQ2xvbmVkQXJncw0KCURhdGEuVmFsdWVTd2FwcyA9IEdlbmVyYXRpb246TWFrZVZhbHVlU3dhcHNUYWJsZShUaW1lc3RhbXApDQoNCgktLS8vIEdlbmVyYXRlIGxvZyB0aXRsZQ0KCWxvY2FsIENvbG9yID0gQ29uZmlnLk1ldGhvZENvbG9yc1tNZXRob2Q6bG93ZXIoKV0NCglsb2NhbCBUZXh0ID0gTm9UcmVlTm9kZXMgYW5kIGB7UmVtb3RlfSB8IHtNZXRob2R9YCBvciBNZXRob2QNCg0KCS0tLy8gRmluZFN0cmluZ0Zvck5hbWUgY2hlY2sNCglsb2NhbCBGaW5kU3RyaW5nID0gRmxhZ3M6R2V0RmxhZ1ZhbHVlKCJGaW5kU3RyaW5nRm9yTmFtZSIpDQoJaWYgRmluZFN0cmluZyB0aGVuDQoJCWZvciBfLCBBcmcgaW4gbmV4dCwgQ2xvbmVkQXJncyBkbw0KCQkJaWYgdHlwZW9mKEFyZykgPT0gInN0cmluZyIgdGhlbg0KCQkJCWxvY2FsIEZpbHRyZWQgPSBzZWxmOkZpbHRlck5hbWUoQXJnKQ0KCQkJCVRleHQgPSBge0ZpbHRyZWR9IHwge1RleHR9YA0KCQkJCWJyZWFrDQoJCQllbmQNCgkJZW5kDQoJZW5kDQoNCgktLS8vIEZldGNoIEhlYWRlckRhdGEgYnkgdGhlIFJlbW90ZUlEIHVzZWQgZm9yIHN0YWNraW5nDQoJbG9jYWwgSGVhZGVyID0gc2VsZjpHZXRSZW1vdGVIZWFkZXIoRGF0YSkNCglsb2NhbCBSZW1vdGVzTGlzdCA9IHNlbGYuUmVtb3Rlc0xpc3QNCg0KCWxvY2FsIExvZ0NvdW50ID0gSGVhZGVyLkxvZ0NvdW50DQoJbG9jYWwgVHJlZU5vZGUgPSBIZWFkZXIuVHJlZU5vZGUgDQoJbG9jYWwgUGFyZW50ID0gVHJlZU5vZGUgb3IgUmVtb3Rlc0xpc3QNCg0KCS0tLy8gSW5jcmVhc2UgbG9nIGNvdW50IC0gVHJlZU5vZGVzIGFyZSBpbiBHZXRSZW1vdGVIZWFkZXIgZnVuY3Rpb24NCglpZiBOb1RyZWVOb2RlcyB0aGVuDQoJCVJlbW90ZXNDb3VudCArPSAxDQoJCUxvZ0NvdW50ID0gUmVtb3Rlc0NvdW50DQoJZW5kDQoNCiAgICAtLS8vIENyZWF0ZSBmb2N1cyBidXR0b24NCglEYXRhLkhlYWRlckRhdGEgPSBIZWFkZXINCglEYXRhLlNlbGVjdGFibGUgPSBQYXJlbnQ6U2VsZWN0YWJsZSh7DQoJCVRleHQgPSBUZXh0LA0KICAgICAgICBMYXlvdXRPcmRlciA9IC0xICogTG9nQ291bnQsDQoJCVRleHRDb2xvcjMgPSBDb2xvciwNCgkJVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQsDQoJCUNhbGxiYWNrID0gZnVuY3Rpb24oKQ0KCQkJc2VsZjpTZXRGb2N1c2VkUmVtb3RlKERhdGEpDQoJCWVuZCwNCiAgICB9KQ0KDQoJSGVhZGVyOkxvZ0FkZGVkKERhdGEpDQoNCgktLS8vIEF1dG8gc2VsZWN0IGNoZWNrDQoJbG9jYWwgR3JvdXBTZWxlY3RlZCA9IEFjdGl2ZURhdGEgYW5kIEFjdGl2ZURhdGEuSGVhZGVyRGF0YSA9PSBIZWFkZXINCglpZiBTZWxlY3ROZXdlc3QgYW5kIEdyb3VwU2VsZWN0ZWQgdGhlbg0KCQlzZWxmOlNldEZvY3VzZWRSZW1vdGUoRGF0YSkNCgllbmQNCmVuZA0KDQpyZXR1cm4gVWk=]]
},Generation={'base64',
[[]]
},Communication={'base64',
[[]]
}},d.Players local i=e:LoadLibraries(g)local j,k,l,m,n,o,p=i.Process,i.Hook,i.Ui
,i.Generation,i.Communication,i.Config,e:GetAsset('ProggyClean.ttf',true)local q
=e:CreateFont('ProggyClean',p)l:SetFontFile(q)j:CheckConfig(o)e:LoadModules(i,{
Modules=i,Services=d})local r,s=l:CreateMainWindow(),j:CheckIsSupported()if not
s then r:Close()return end local t,u=n:CreateChannel()n:AddCommCallback(
'QueueLog',function(...)l:QueueLog(...)end)local v=h.LocalPlayer m:
SetSwapsCallback(function(w)w:AddSwap(v,{String='LocalPlayer'})w:AddSwap(v.
Character,{String='Character',NextParent=v})end)l:CreateWindowContent(r)l:
SetCommChannel(u)l:BeginLogService()local w=e:MakeActorScript(g,t)k:LoadHooks(w,
t)